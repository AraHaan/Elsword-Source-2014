#pragma once

#ifdef SERV_COUNTRY_CN
	#define EXTEND_SERVER_GROUP_MASK
#endif SERV_COUNTRY_CN

namespace SEnum
{
	// user auth level
	enum USER_AUTH_LEVEL
	{
		//{{ 계정 제재 일수 상태 추가 - 김민성
//#ifdef SERV_ADD_BLOCK_DAY
		UAL_BLOCKED_9	= -9, // 60일
		UAL_BLOCKED_8	= -8, // 15일
		UAL_BLOCKED_7	= -7, // 3일
//#endif SERV_ADD_BLOCK_DAY
		//}}
		UAL_BLOCKED_6	= -6, // 90일
		UAL_BLOCKED_5	= -5, // 180일
		UAL_BLOCKED_4	= -4, // 계정블럭
		UAL_BLOCKED_3	= -3, // 30일 계정블럭
		UAL_BLOCKED_2	= -2, // 7일 계정블럭
		UAL_BLOCKED_1	= -1, // 경고(일반유저와 동일)
		UAL_NORMAL		= 0,
		UAL_SUPERIOR	= 1,
		UAL_GM			= 2,
		UAL_DEVELOPER	= 3,
		//{{ 2011.10.14     김민성    운영자 기능은 특정 IP 에서만 사용 가능
//#ifdef SERV_USE_GM_CHEAT_RESTRICTED_IP
		UAL_SUPERDEVELOPER	= 4,
//#endif SERV_USE_GM_CHEAT_RESTRICTED_IP
		//}}
	};

	//080602.hoons. 자체 해킹신고 기능을 클라이언트와 식별하기위해.
	// Hacking user flag
	enum HACKING_USER_TYPE
	{
		HUT_NORMAL = 0,
		HUT_DISAGREE_HACK_USER,
		HUT_AGREE_HACK_USER,

		HUT_TOTAL_NUM,
	};

	//{{ 2009. 4. 28  최육사	최대ED
	enum UNIT_INFO
	{
		UI_MAX_ED_CHAR_HAVE	= 2000000000,	// 20억
		UI_MAX_PSHOP_ED		= 700000000,	// 7억
		UI_MAX_TRADE_ED		= 700000000,	// 7억
		UI_MAX_LETTER_ED	= 500000000,	// 5억
	};
	//}}

	//{{ 2009. 7. 6  최육사	
	enum RANKING_TYPE
	{
		RT_DAY_RANKING		= 0,
		RT_WEEK_RANKING		= 1,
		RT_MONTH_RANKING	= 2,
		RT_DUNGEON_RANKING	= 3,
		RT_PVP_RANKING		= 4,
//#ifdef SERV_HENIR_RENEWAL_2013// 작업날짜: 2013-09-17	// 박세훈
		RT_HERO_RANKING		= 9,	// X2UIRankingInfo.h와 맞추기 위함.
//#endif // SERV_HENIR_RENEWAL_2013

		RT_MAX_NUM,
	};
	//}}

	//{{ 2009. 9. 25  최육사	길드
	enum GUILD_USER_GRADE
	{
		GUG_INVALID = 0,
		GUG_MASTER,			// 마스터
		GUG_SYSOP,			// 관리자
		GUG_OLD_USER,		// 원로 길드원
		GUG_VIP_USER,		// 우수 길드원
		GUG_NORMAL_USER,	// 일반 길드원
		GUG_NEW_USER,		// 신입 길드원 
	};
	//}}

	//{{ 2009. 11. 17  최육사	대전길드경험치	
	enum ENUM_PVP_TIME
	{
		ET_PVP_DRAWN_TIME = 30,
	};
	//}}
// 2014.02.28 이지헌 해당 enum 쓰는 곳이 많아서 EXTEND_SERVER_GROUP_MASK 쓰는 국가도 사용하도록 주석
// 이상 있을시 수정해야 합니다!
//#ifdef EXTEND_SERVER_GROUP_MASK
//#else EXTEND_SERVER_GROUP_MASK
	//{{ 2009. 12. 15  최육사	서버군추가	
	enum SERVER_GROUP_ID
	{
		SGI_INVALID = -1, 
		SGI_SOLES	= 0,
		SGI_GAIA	= 1,
		SGI_END		= 2,
	};
	//}}
//#endif EXTEND_SERVER_GROUP_MASK

	//{{ 2011. 05. 11	최육사	대리상인
//#ifdef SERV_PSHOP_AGENCY
	enum PERSONAL_SHOP_TYPE
	{
		PST_NONE = 0,
		PST_PERSONAL_SHOP,
		PST_PSHOP_AGENCY,
	};

	enum PSHOP_ITEM_DELETE_REASON
	{
		PIDR_NOT_DELETE = 0,
		PIDR_PICK_UP,
	};

	enum PSHOP_AGENCY_ENUM
	{
		PSHOP_AGENCY_PROXY_ID = 255,
		//{{ 2012. 05. 31	김민성       대리 상점 거래 로직 변경
//#ifdef SERV_TRADE_LOGIC_CHANGE_AGENCY_SHOP
		PAE_SELL_ITEM_LIMIT_NUM = 15,
//#endif SERV_TRADE_LOGIC_CHANGE_AGENCY_SHOP
		//}}
	};
//#endif SERV_PSHOP_AGENCY
	//}}
#ifdef SERV_UPGRADE_TRADE_SYSTEM
    enum AGENCY_SHOP_TYPE // grade
    {
        AST_NONE = 0,
        AST_FREE, 
        AST_NORMAL,
        AST_PREMIUM,
        AST_END,
    };
#endif //SERV_UPGRADE_TRADE_SYSTEM

	//{{ 2011. 07. 18	최육사	대전 개편
//#ifdef SERV_PVP_NEW_SYSTEM
	enum PVP_ENUM
	{
		PE_MAX_SELECT_PVP_MAP_COUNT		= 2,	// 최대 선택 가능한 대전맵 갯수
		PE_PVP_LIMIT_LEVEL				= 3,	// 대전 참가 최소 레벨
		PE_PVP_OFFICIAL_LIMIT_LEVEL		= 10,	// 공식대전 참가 최소 레벨
		PE_PVP_OFFICIAL_MIN_PLAY_TIME	= 30,	// 공식대전에서 30초 이내에 이탈하면 페널티 처리
		PE_MAX_MATCH_PLAYER_COUNT		= 3,	// 공식대전의 한팀 플레이 인원
		PE_MAX_TOTAL_PLAYER_COUNT		= 6,	// 공식대전의 총 플레이 인원
	};

	enum MATCH_TYPE
	{
		MT_NONE = -1,
		MT_TEAM_1_ON_1 = 0,
		MT_TEAM_2_ON_2,
		MT_TEAM_3_ON_3,
		MT_TEAM_DEATH_1_ON_1,
		MT_TEAM_DEATH_2_ON_2,
		MT_TEAM_DEATH_3_ON_3,

		MT_MAX,
	};

	enum PVP_NPC_TYPE
	{
		PNT_NONE = 0,
		PNT_BEGINNER_NPC,
		PNT_HERO_NPC,

		PNT_MAX,
	};
//#endif SERV_PVP_NEW_SYSTEM
	//}}

	//{{ 2011. 11. 2	최육사	배틀필드 시스템
//#ifdef SERV_BATTLE_FIELD_SYSTEM
	enum BATTLE_FIELD_NUM
	{
		BATTLE_FIELD_MAX_NUM = 12,
	};

	enum AUTO_PARTY_ENUM
	{
		AUTO_PARTY_TOTAL_PLAYER_COUNT = 4,
	};
//#endif SERV_BATTLE_FIELD_SYSTEM
	//}}

	//{{ 2012. 02. 06	최육사	배틀필드 시스템
//#ifdef SERV_BATTLE_FIELD_SYSTEM
	enum VILLAGE_MAP_ID
	{
		VMI_INVALID = 0,

		//////////////////////////////////////////////////////////////////////////
		// BATTLE FIELD REST
		VMI_BATTLE_FIELD_ELDER_REST_00	= 1000,	/// 보리스 평야
		VMI_BATTLE_FIELD_BESMA_REST_00	= 1001,	/// 아슬아슬 하늘길
		VMI_BATTLE_FIELD_ALTERA_REST_00	= 1002,	/// 퐁고족 은신처
		VMI_BATTLE_FIELD_PEITA_REST_00	= 1003,	
		VMI_BATTLE_FIELD_VELDER_REST_00	= 1004,	/// 시계탑 광장
		VMI_BATTLE_FIELD_HAMEL_REST_00	= 1005,	/// 치유의 샘터
		VMI_BATTLE_FIELD_SANDER_REST_00	= 1006,	/// 윈드스톤 유적지

		VMI_BATTLE_FIELD_REST_END,
		//////////////////////////////////////////////////////////////////////////

		//{{ QUEST 개편 - 김민성
//#ifdef SERV_REFORM_QUEST
		VMI_TUTORIAL = 2000,			// 캐릭터 생성 시 최초 발급 MID
//#endif SERV_REFORM_QUEST
		//}}

		//////////////////////////////////////////////////////////////////////////
		// VILLAGE MAP ID
		VMI_RUBEN = 20000,
		VMI_ELDER,
		VMI_BESMA,
		VMI_ALTERA,
		VMI_VELDER,
		VMI_PEITA,
		VMI_HAMEL,
		VMI_SANDER,

		VMI_VILLAGE_MAP_END,
		//////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////
		// DUNGEON GATE
		VMI_DUNGEON_GATE_RUBEN = 10000,
		VMI_DUNGEON_GATE_ELDER,
		VMI_DUNGEON_GATE_BESMA,
		VMI_DUNGEON_GATE_ALTERA,
		VMI_DUNGEON_GATE_VELDER,
		VMI_DUNGEON_GATE_HAMEL,

		//////////////////////////////////////////////////////////////////////////
		// DUNGEON LOUNGE
		VMI_DUNGEON_LOUNGE_RUBEN = 30000,
		VMI_DUNGEON_LOUNGE_ELDER,
		VMI_DUNGEON_LOUNGE_BESMA,
		VMI_DUNGEON_LOUNGE_ALTERA,
		VMI_DUNGEON_LOUNGE_PEITA,
		VMI_DUNGEON_LOUNGE_VELDER,
		VMI_DUNGEON_LOUNGE_HAMEL,
		
		//////////////////////////////////////////////////////////////////////////
		// BATTLE FIELD
		VMI_BATTLE_FIELD_RUBEN_FIELD_01		= 40000,	// 노아스의 호수
		VMI_BATTLE_FIELD_ELDER_FIELD_01		= 40001,	// 월리 기념교
		VMI_BATTLE_FIELD_ELDER_FIELD_02		= 40002,	// 쌍둥이 감시탑
		VMI_BATTLE_FIELD_BESMA_FIELD_01		= 40003,	// 베스아가라 폭포
		VMI_BATTLE_FIELD_BESMA_FIELD_02		= 40004,	// 레이키키 호수
		VMI_BATTLE_FIELD_BESMA_FIELD_03		= 40005,	// 토리투게라 캐년
		VMI_BATTLE_FIELD_ALTERA_FIELD_01	= 40006,	// 정화의 무덤
		VMI_BATTLE_FIELD_ALTERA_FIELD_02	= 40007,	// 나소드 폐기장
		VMI_BATTLE_FIELD_ALTERA_FIELD_03	= 40008,	// 천공의 기지
		VMI_BATTLE_FIELD_PEITA_FIELD_01		= 40009,	// 순례자의 관문
		VMI_BATTLE_FIELD_PEITA_FIELD_02		= 40010,	// 순례자의 터
		VMI_BATTLE_FIELD_PEITA_FIELD_03		= 40011,	// 망자의 언덕
		VMI_BATTLE_FIELD_VELDER_FIELD_01	= 40012,	// 번영의 길
		VMI_BATTLE_FIELD_VELDER_FIELD_02	= 40013,	// 공존의 길
		VMI_BATTLE_FIELD_VELDER_FIELD_03	= 40014,	// 평화의 길
		VMI_BATTLE_FIELD_VELDER_FIELD_04	= 40015,	// 루렌시아 항구
		VMI_BATTLE_FIELD_HAMEL_FIELD_01		= 40016,	// 엘라임의 물결
		VMI_BATTLE_FIELD_HAMEL_FIELD_02		= 40017,	// 휩쓸린 도시
		VMI_BATTLE_FIELD_HAMEL_FIELD_03		= 40018,	// 원형 수로
		VMI_BATTLE_FIELD_HAMEL_FIELD_04		= 40019,	// 노아호의 무덤
		VMI_BATTLE_FIELD_VELDER_SHIP_STAGE	= 40020,	// 벨더 배
		VMI_BATTLE_FIELD_HAMEL_SHIP_STAGE	= 40021,	// 하멜 배
		VMI_BATTLE_FIELD_SANDER_FIELD_01	= 40022,	// 바람의 사원
		VMI_BATTLE_FIELD_SANDER_FIELD_02	= 40023,	// 샌더2
		VMI_BATTLE_FIELD_SANDER_FIELD_03	= 40024,	// 샌더3
		VMI_BATTLE_FIELD_SANDER_FIELD_04	= 40025,	// 샌더4

		VMI_FIELD_BOSSRAID_KINGDOM_OF_NASOD	= 40026,	// 보스 레이드 필드
		VMI_FIELD_BOSSRAID_VALLEY_OF_ABYSS	= 40027,	// 보스 레이드 필드

		VMI_BATTLE_FIELD_END,
		//////////////////////////////////////////////////////////////////////////
	};

	// 배틀필드 ID
	enum BATTLE_FIELD_ID
	{
		BFI_INVALID					= 0,
		BFI_RUBEN_FIELD_01			= VMI_BATTLE_FIELD_RUBEN_FIELD_01,

		BFI_ELDER_FIELD_01			= VMI_BATTLE_FIELD_ELDER_FIELD_01,
		BFI_ELDER_FIELD_02			= VMI_BATTLE_FIELD_ELDER_FIELD_02,

		BFI_BESMA_FIELD_01			= VMI_BATTLE_FIELD_BESMA_FIELD_01,
		BFI_BESMA_FIELD_02			= VMI_BATTLE_FIELD_BESMA_FIELD_02,
		BFI_BESMA_FIELD_03			= VMI_BATTLE_FIELD_BESMA_FIELD_03,

		BFI_PEITA_FIELD_01			= VMI_BATTLE_FIELD_PEITA_FIELD_01,
		BFI_PEITA_FIELD_02          = VMI_BATTLE_FIELD_PEITA_FIELD_02,
		BFI_PEITA_FIELD_03          = VMI_BATTLE_FIELD_PEITA_FIELD_03,

		BFI_ALTERA_FIELD_01			= VMI_BATTLE_FIELD_ALTERA_FIELD_01,
		BFI_ALTERA_FIELD_02			= VMI_BATTLE_FIELD_ALTERA_FIELD_02,
		BFI_ALTERA_FIELD_03			= VMI_BATTLE_FIELD_ALTERA_FIELD_03,

		BFI_VELDER_FIELD_01			= VMI_BATTLE_FIELD_VELDER_FIELD_01,
		BFI_VELDER_FIELD_02			= VMI_BATTLE_FIELD_VELDER_FIELD_02,		
		BFI_VELDER_FIELD_03			= VMI_BATTLE_FIELD_VELDER_FIELD_03,
		BFI_VELDER_FIELD_04			= VMI_BATTLE_FIELD_VELDER_FIELD_04,
		BFI_VELDER_FIELD_05			= VMI_BATTLE_FIELD_VELDER_SHIP_STAGE,

		BFI_HAMEL_FIELD_01			= VMI_BATTLE_FIELD_HAMEL_FIELD_01,
		BFI_HAMEL_FIELD_02			= VMI_BATTLE_FIELD_HAMEL_FIELD_02,
		BFI_HAMEL_FIELD_03			= VMI_BATTLE_FIELD_HAMEL_FIELD_03,
		BFI_HAMEL_FIELD_04			= VMI_BATTLE_FIELD_HAMEL_FIELD_04,
		BFI_HAMEL_FIELD_05			= VMI_BATTLE_FIELD_HAMEL_SHIP_STAGE,

		BFI_END,
	};

	enum LOCAL_MAP_ID
	{
		LMI_INVALID					= 0,
		LMI_RUBEN					= 10000,
		LMI_ELDER					= 10001,
		LMI_BESMA					= 10002,
		LMI_ALTERA_ISLAND			= 10003,
		LMI_PEITA					= 10004,
		LMI_VELDER					= 10005,
		LMI_HAMEL					= 10006,
		LMI_SANDER					= 10007,
	};
//#endif SERV_BATTLE_FIELD_SYSTEM
	//}}

	//{{ 2010. 9. 8	최육사	아이템 획득 사유
//#ifdef SERV_GET_ITEM_REASON
	enum GET_ITEM_REASON
	{
		GIR_NO_REASON = 100,		
		GIR_DUNGEON_RESULT,		// [101] 던전 결과창 보상
		GIR_DUNGEON_DROP,		// [102] 던전에서 드롭
		GIR_PVP_RESULT,			// [103] 대전 결과창 보상
		GIR_QUEST_REWARD,		// [104] 퀘스트 보상
		GIR_TRADE,				// [105] 개인거래
		GIR_TRADE_EXCEPTION,	// [106] 개인거래 예외처리
		GIR_BUY_ED_ITEM,		// [107] ED아이템 구매
		GIR_BUY_CASH_ITEM,		// [108] 캐쉬템 구매
		GIR_BUY_CASH_PACKAGE,	// [109] 캐쉬템 패키지 구매
		GIR_RANDOM_ITEM,		// [110] 랜덤큐브
		GIR_MANUFACTURE,		// [111] 제조
		GIR_RESOLVE_ITEM,		// [112] 분해
		GIR_PERSONAL_SHOP,		// [113] 개인상점
		GIR_FROM_LETTER,		// [114] 우편 첨부물
		GIR_IDENTIFY_ITEM,		// [115] 교환 아이템
		GIR_EXCHANGE_ITEM,		// [116] 교환 아이템
		GIR_TEMP_INVENTORY,		// [117] 임시 인벤토리
		GIR_XMAS_EVENT,			// [118] 크리스마스 이벤트
		GIR_GM_TOOL,			// [119] 운영툴
		//{{ 2011. 04. 26	최육사	대리 상인
//#ifdef SERV_PSHOP_AGENCY
		GIR_PICK_UP_PSHOP,		// [120] 대리상인 PickUp
//#endif SERV_PSHOP_AGENCY
		//}}
		GIR_GET_ITEM_BY_CHEAT,	// [121] /b 치트로 아이템 획득
		GIR_SYNTHESIS_ITEM,		// [122] 합성 // 임규수 일본 추가 
		//{{ 2011. 8. 03	임규수 일일 퀴즈
		//#ifdef SERV_ONE_DAY_QUIZ
		GIR_QUIZ_ITEM,			// [123] 퀴즈로 얻은 아이템 // 임규수 일본 추가	
		//#endif SERV_ONE_DAY_QUIZ
		//}}
		//{{ 2011. 08. 31	최육사	아이템 생성 사유
//#ifdef SERV_NEW_ITEM_REASON_DB_LOG
		GIR_INSERTED_BY_DBA,	// [124] DBA가 직접 넣은 아이템
//#endif SERV_NEW_ITEM_REASON_DB_LOG
		//}}
		GIR_CREATE_CHAR,		// [125] 캐릭터생성 할때 지급하는 아이템 - 이벤트 및 프로모션 포함 // 해외
		//{{ 2011.10.25 낚시 시스템
		//#ifdef SERV_FISHING_SYSTEM
		GIR_FISHING_ITEM,		// [126] 낚시로 얻은 아이템
		//#endif SERV_FISHING_SYSTEM
		//}}
		//#ifdef SERV_SHARING_BANK_TEST
		GIR_SHARING_BANK,		// [127] 계정 은행으로 얻은 아이템 // 대만 홍콩
		//#endif
		//{{ 2011. 06. 22    김민성    이탈 방지 모델 - NEXON 세션 시스템 수정
		//#ifdef SERV_NEXON_SESSION_PROTOCOL
		GIR_RETAINING_ITEM,		// [128] 이탈 방지 보상
		//#endif SERV_NEXON_SESSION_PROTOCOL
		//}}
		//{{
		//#ifdef SERV_ENCHANTMENT_EXTRACTION_SYSTEM
		GIR_ENCHANTMENT_EXTRACTION_ITEM,      // [129] 강화 추출로 얻은 아리엘의 강화부적 아이템
		//#endif SERV_ENCHANTMENT_EXTRACTION_SYSTEM
		//}}
//#ifdef SERV_FINALITY_SKILL_SYSTEM	// 적용날짜: 2013-08-01
		GIR_ITEM_EXTRACT,		// [130] 아이템 추출
//#endif // SERV_FINALITY_SKILL_SYSTEM
		GIR_MAX,
	};

//#ifdef	SERV_SHARING_BANK_TEST
	enum TRADE_ERROR_TYPE
	{
		TET_POST			= 1,
		TET_TRADE			= 2,
	};
//#endif	SERV_SHARING_BANK_TEST

	static bool IsValidGetItemReason( GET_ITEM_REASON eReason )
	{
		if( GIR_NO_REASON < eReason  &&  GIR_MAX > eReason )
			return true;

		return false;
	}
//#endif SERV_GET_ITEM_REASON
	//}}

	static bool IsValidServerGroupID( int iServerGroupID )
	{
#ifdef EXTEND_SERVER_GROUP_MASK
		// 중국의 경우 무한대로 서버군을 만들었다 지웠다 하므로 어떤 숫자든 들어올 수 있다.
		return true;
#else EXTEND_SERVER_GROUP_MASK
		switch( iServerGroupID )
		{
		case SGI_SOLES:
		case SGI_GAIA:
			return true;
		}

		return false;
#endif EXTEND_SERVER_GROUP_MASK
	}

	static const wchar_t* GetServerGroupName( int iServerGroupID )
	{
#ifdef EXTEND_SERVER_GROUP_MASK
#else EXTEND_SERVER_GROUP_MASK
		switch( iServerGroupID )
		{
		case SGI_SOLES: return L"SOLES";
		case SGI_GAIA:	return L"GAIA";
		}
#endif EXTEND_SERVER_GROUP_MASK

		return L"NONE";
	}

	//{{ 2011. 07. 18	최육사	대전 개편
//#ifdef SERV_PVP_NEW_SYSTEM
	static const wchar_t* GetMatchTypeName( int iMatchTypeEnum )
	{
		switch( iMatchTypeEnum )
		{
		case MT_TEAM_1_ON_1:		return L"TEAM_1_ON_1";
		case MT_TEAM_2_ON_2:		return L"TEAM_2_ON_2";
		case MT_TEAM_3_ON_3:		return L"TEAM_3_ON_3";
		case MT_TEAM_DEATH_1_ON_1:	return L"TEAM_DEATH_1_ON_1";
		case MT_TEAM_DEATH_2_ON_2:	return L"TEAM_DEATH_2_ON_2";
		case MT_TEAM_DEATH_3_ON_3:	return L"TEAM_DEATH_3_ON_3";
		}

		return L"NONE";
	}
//#endif SERV_PVP_NEW_SYSTEM
	//}}

	static bool IsHenirRankingType( int iRankingType )
	{
		switch( iRankingType )
		{
		case RT_DAY_RANKING:
		case RT_WEEK_RANKING:
		case RT_MONTH_RANKING:
#ifdef SERV_HENIR_RENEWAL_2013// 작업날짜: 2013-09-24	// 박세훈
		case RT_HERO_RANKING:
#endif // SERV_HENIR_RENEWAL_2013
			return true;
		}

		return false;
	}

	//{{ 2012. 02. 06	최육사	배틀필드 시스템
//#ifdef SERV_BATTLE_FIELD_SYSTEM
	static bool IsVillageMapID( const int iFieldMapID )
	{
		if( VMI_RUBEN <= iFieldMapID  &&  iFieldMapID < VMI_VILLAGE_MAP_END )
			return true;

		return false;
	}

	static bool IsBattleFieldID( const int iBattleFieldID )
	{
		if( VMI_BATTLE_FIELD_RUBEN_FIELD_01 <= iBattleFieldID  &&  iBattleFieldID < VMI_BATTLE_FIELD_END )
			return true;

		return false;
	}

	static bool IsRestFieldID( const int iBattleFieldID )
	{
		if( VMI_BATTLE_FIELD_ELDER_REST_00 <= iBattleFieldID  &&  iBattleFieldID < VMI_BATTLE_FIELD_REST_END )
			return true;

		return false;
	}
//#endif SERV_BATTLE_FIELD_SYSTEM
	//}}

	//{{ 2013. 3. 13	박세훈	 로컬 랭킹 시스템
//#ifdef SERV_LOCAL_RANKING_SYSTEM
	enum LOCAL_RAKING_LOCATION_CATEGORY //Area.lua와 순서가 같아야 함.
	{
		LRLC_NONE				= -1,
		LRLC_SEOUL_GANGNAM		= 0,
		LRLC_SEOUL_GANGDONG		= 1,
		LRLC_SEOUL_GANGBUK		= 2,
		LRLC_SEOUL_GANGSEO		= 3,
		LRLC_SEOUL_GWANAK		= 4,
		LRLC_SEOUL_GWANGJIN		= 5,
		LRLC_SEOUL_GURO			= 6,
		LRLC_SEOUL_GEUMCHEON	= 7,
		LRLC_SEOUL_NOWON		= 8,
		LRLC_SEOUL_DOBONG		= 9,
		LRLC_SEOUL_DONGDAEMUN	= 10,
		LRLC_SEOUL_DONGJAK		= 11,
		LRLC_SEOUL_MAPO			= 12,
		LRLC_SEOUL_SEODAEMUN	= 13,
		LRLC_SEOUL_SEOCHO		= 14,
		LRLC_SEOUL_SEONGDONG	= 15,
		LRLC_SEOUL_SEONGBUK		= 16,
		LRLC_SEOUL_SONGPA		= 17,
		LRLC_SEOUL_YANGCHEON	= 18,
		LRLC_SEOUL_YEONGDEUNGPO	= 19,
		LRLC_SEOUL_YONGSAN		= 20,
		LRLC_SEOUL_EUNPYEONG	= 21,
		LRLC_SEOUL_JONGNO		= 22,
		LRLC_SEOUL_JUNG			= 23,
		LRLC_SEOUL_JUNGNANG		= 24,
		LRLC_BUSAN				= 25,
		LRLC_DAEGU				= 26,
		LRLC_INCHEON			= 27,
		LRLC_GWANGJU			= 28,
		LRLC_DAEJEON			= 29,
		LRLC_ULSAN				= 30,
		LRLC_SEJONG				= 31,
		LRLC_GYEONGGIDO			= 32,
		LRLC_GANGWONDO			= 33,
		LRLC_CHUNGBUK			= 34,
		LRLC_CHUNGNAM			= 35,
		LRLC_JEONBUK			= 36,
		LRLC_JEONNAM			= 37,
		LRLC_GYEONGBUK			= 38,
		LRLC_GYEONGNAM			= 39,
		LRLC_JEJU				= 40,

		LRLC_BUSAN_GANGSEO		= 41,
		LRLC_BUSAN_GEUMJEONG	= 42,	
		LRLC_BUSAN_GIJANG		= 43,	
		LRLC_BUSAN_NAM			= 44,
		LRLC_BUSAN_DONG			= 45,
		LRLC_BUSAN_DONGNAE		= 46,
		LRLC_BUSAN_BUSANJIN		= 47,
		LRLC_BUSAN_BUK			= 48,
		LRLC_BUSAN_SASANG		= 49,
		LRLC_BUSAN_SAHA			= 50,
		LRLC_BUSAN_SEO			= 51,
		LRLC_BUSAN_SUYEONG		= 52,
		LRLC_BUSAN_YEONJE		= 53,
		LRLC_BUSAN_YEONGDO		= 54,
		LRLC_BUSAN_JUNG			= 55,
		LRLC_BUSAN_HAEUNDAE		= 56,

		LRLC_DAEGU_NAM			= 57,
		LRLC_DAEGU_DALSEO		= 58,
		LRLC_DAEGU_DALSEONG		= 59,
		LRLC_DAEGU_DONG			= 60,
		LRLC_DAEGU_BUK			= 61,
		LRLC_DAEGU_SEO			= 62,
		LRLC_DAEGU_SUSEONG		= 63,
		LRLC_DAEGU_JUNG			= 64,

		LRLC_INCHEON_GANGHWA	= 65,
		LRLC_INCHEON_GYEYANG	= 66,
		LRLC_INCHEON_NAM		= 67,
		LRLC_INCHEON_NAMDONG	= 68,
		LRLC_INCHEON_DONG		= 69,
		LRLC_INCHEON_BUPYEONG	= 70,
		LRLC_INCHEON_SEO		= 71,
		LRLC_INCHEON_YEONSU		= 72,
		LRLC_INCHEON_ONGJIN		= 73,
		LRLC_INCHEON_JUNG		= 74,

		LRLC_GWANGJU_GWANGSAN	= 75,
		LRLC_GWANGJU_NAM		= 76,
		LRLC_GWANGJU_DONG		= 77,
		LRLC_GWANGJU_BUK		= 78,
		LRLC_GWANGJU_SEO		= 79,

		LRLC_DAEJEON_DAEDEOK	= 80,
		LRLC_DAEJEON_DONG		= 81,
		LRLC_DAEJEON_SEO		= 82,
		LRLC_DAEJEON_YUSEONG	= 83,
		LRLC_DAEJEON_JUNG		= 84,

		LRLC_ULSAN_NAM			= 85,
		LRLC_ULSAN_DONG			= 86,
		LRLC_ULSAN_BUK			= 87,
		LRLC_ULSAN_ULJU			= 88,
		LRLC_ULSAN_JUNG			= 89,

		LRLC_GYEONGGIDO_GAPYEONG	= 90,
		LRLC_GYEONGGIDO_GOYANG		= 91,
		LRLC_GYEONGGIDO_GWACHEON	= 92,
		LRLC_GYEONGGIDO_GWANGMYEONG	= 93,
		LRLC_GYEONGGIDO_GWANGJU		= 94,
		LRLC_GYEONGGIDO_GURI		= 95,
		LRLC_GYEONGGIDO_GUNPO		= 96,
		LRLC_GYEONGGIDO_GIMPO		= 97,
		LRLC_GYEONGGIDO_NAMYANGJU	= 98,
		LRLC_GYEONGGIDO_DONGDUCHEON	= 99,
		LRLC_GYEONGGIDO_BUCHEON		= 100,
		LRLC_GYEONGGIDO_SEONGNAM	= 101,
		LRLC_GYEONGGIDO_SUWON		= 102,
		LRLC_GYEONGGIDO_SIHEUNG		= 103,
		LRLC_GYEONGGIDO_ANSAN		= 104,
		LRLC_GYEONGGIDO_ANSEONG		= 105,
		LRLC_GYEONGGIDO_ANYANG		= 106,
		LRLC_GYEONGGIDO_YANGJU		= 107,
		LRLC_GYEONGGIDO_YANGPYEONG	= 108,
		LRLC_GYEONGGIDO_YEOJU		= 109,
		LRLC_GYEONGGIDO_YEONCHEON	= 110,
		LRLC_GYEONGGIDO_OSAN		= 111,
		LRLC_GYEONGGIDO_YONGIN		= 112,
		LRLC_GYEONGGIDO_UIWANG		= 113,
		LRLC_GYEONGGIDO_UIJEONGBU	= 114,
		LRLC_GYEONGGIDO_ICHEON		= 115,
		LRLC_GYEONGGIDO_PAJU		= 116,
		LRLC_GYEONGGIDO_PYEONGTAEK	= 117,
		LRLC_GYEONGGIDO_POCHEON		= 118,
		LRLC_GYEONGGIDO_HANAM		= 119,
		LRLC_GYEONGGIDO_HWASEONG	= 120,

		LRLC_GANGWONDO_GANGNEUNG	= 121,
		LRLC_GANGWONDO_GOSEONG		= 122,
		LRLC_GANGWONDO_DONGHAE		= 123,
		LRLC_GANGWONDO_SAMCHEOK		= 124,
		LRLC_GANGWONDO_SOKCHO		= 125,
		LRLC_GANGWONDO_YANGGU		= 126,
		LRLC_GANGWONDO_YANGYANG		= 127,
		LRLC_GANGWONDO_YEONGWOL		= 128,
		LRLC_GANGWONDO_WONJU		= 129,
		LRLC_GANGWONDO_INJE			= 130,
		LRLC_GANGWONDO_JEONGSEON	= 131,
		LRLC_GANGWONDO_CHEORWON		= 132,
		LRLC_GANGWONDO_CHUNCHEON	= 133,
		LRLC_GANGWONDO_TAEBAEK		= 134,
		LRLC_GANGWONDO_PYEONGCHANG	= 135,
		LRLC_GANGWONDO_HONGCHEON	= 136,
		LRLC_GANGWONDO_HWACHEON		= 137,
		LRLC_GANGWONDO_HOENGSEONG	= 138,

		LRLC_CHUNGBUK_GOESAN		= 139,
		LRLC_CHUNGBUK_DANYANG		= 140,
		LRLC_CHUNGBUK_BOEUN			= 141,
		LRLC_CHUNGBUK_YEONGDONG		= 142,
		LRLC_CHUNGBUK_OKCHEON		= 143,
		LRLC_CHUNGBUK_EUMSEONG		= 144,
		LRLC_CHUNGBUK_JECHEON		= 145,
		LRLC_CHUNGBUK_JEUNGPYEONG	= 146,
		LRLC_CHUNGBUK_JINCHEON		= 147,
		LRLC_CHUNGBUK_CHEONGWON		= 148,
		LRLC_CHUNGBUK_CHEONGJU		= 149,
		LRLC_CHUNGBUK_CHUNGJU		= 150,

		LRLC_CHUNGNAM_GYERYONG		= 151,
		LRLC_CHUNGNAM_GONGJU		= 152,
		LRLC_CHUNGNAM_GEUMSAN		= 153,
		LRLC_CHUNGNAM_NONSAN		= 154,
		LRLC_CHUNGNAM_DANGJIN		= 155,
		LRLC_CHUNGNAM_BORYEONG		= 156,
		LRLC_CHUNGNAM_BUYEO			= 157,
		LRLC_CHUNGNAM_SEOSAN		= 158,
		LRLC_CHUNGNAM_SEOCHEON		= 159,
		LRLC_CHUNGNAM_ASAN			= 160,
		LRLC_CHUNGNAM_YESAN			= 161,
		LRLC_CHUNGNAM_CHEONAN		= 162,
		LRLC_CHUNGNAM_CHEONGYANG	= 163,
		LRLC_CHUNGNAM_TAEAN			= 164,
		LRLC_CHUNGNAM_HONGSEONG		= 165,

		LRLC_JEONBUK_GOCHANG		= 166,
		LRLC_JEONBUK_GUNSAN			= 167,
		LRLC_JEONBUK_GIMJE			= 168,
		LRLC_JEONBUK_NAMWON			= 169,
		LRLC_JEONBUK_MUJU			= 170,
		LRLC_JEONBUK_BUAN			= 171,
		LRLC_JEONBUK_SUNCHANG		= 172,
		LRLC_JEONBUK_WANJU			= 173,
		LRLC_JEONBUK_IKSAN			= 174,
		LRLC_JEONBUK_IMSIL			= 175,
		LRLC_JEONBUK_JANGSU			= 176,
		LRLC_JEONBUK_JEONJU			= 177,
		LRLC_JEONBUK_JEONGEUP		= 178,
		LRLC_JEONBUK_JINAN			= 179,

		LRLC_JEONNAM_GANGJIN		= 180,
		LRLC_JEONNAM_GOHEUNG		= 181,
		LRLC_JEONNAM_GOKSEONG		= 182,
		LRLC_JEONNAM_GWANGYANG		= 183,
		LRLC_JEONNAM_GURYE			= 184,
		LRLC_JEONNAM_NAJU			= 185,
		LRLC_JEONNAM_DAMYANG		= 186,
		LRLC_JEONNAM_MOKPO			= 187,
		LRLC_JEONNAM_MUAN			= 188,
		LRLC_JEONNAM_BOSEONG		= 189,
		LRLC_JEONNAM_SUNCHEON		= 190,
		LRLC_JEONNAM_SINAN			= 191,
		LRLC_JEONNAM_YEOSU			= 192,
		LRLC_JEONNAM_YEONGGWANG		= 193,
		LRLC_JEONNAM_YEONGAM		= 194,
		LRLC_JEONNAM_WANDO			= 195,
		LRLC_JEONNAM_JANGSEONG		= 196,
		LRLC_JEONNAM_JANGHEUNG		= 197,
		LRLC_JEONNAM_JINDO			= 198,
		LRLC_JEONNAM_HAMPYEONG		= 199,
		LRLC_JEONNAM_HAENAM			= 200,
		LRLC_JEONNAM_HWASUN			= 201,

		LRLC_GYEONGBUK_GYEONGSAN	= 202,
		LRLC_GYEONGBUK_GYEONGJU		= 203,
		LRLC_GYEONGBUK_GORYEONG		= 204,
		LRLC_GYEONGBUK_GUMI			= 205,
		LRLC_GYEONGBUK_GUNWI		= 206,
		LRLC_GYEONGBUK_GIMCHEON		= 207,
		LRLC_GYEONGBUK_MUNGYEONG	= 208,
		LRLC_GYEONGBUK_BONGHWA		= 209,
		LRLC_GYEONGBUK_SANGJU		= 210,
		LRLC_GYEONGBUK_SEONGJU		= 211,
		LRLC_GYEONGBUK_ANDONG		= 212,
		LRLC_GYEONGBUK_YEONGDEOK	= 213,
		LRLC_GYEONGBUK_YEONGYANG	= 214,
		LRLC_GYEONGBUK_YEONGJU		= 215,
		LRLC_GYEONGBUK_YEONGCHEON	= 216,
		LRLC_GYEONGBUK_YECHEON		= 217,
		LRLC_GYEONGBUK_ULLEUNG		= 218,
		LRLC_GYEONGBUK_ULJIN		= 219,
		LRLC_GYEONGBUK_UISEONG		= 220,
		LRLC_GYEONGBUK_CHEONGDO		= 221,
		LRLC_GYEONGBUK_CHEONGSONG	= 222,
		LRLC_GYEONGBUK_CHILGOK		= 223,
		LRLC_GYEONGBUK_POHANG		= 224,

		LRLC_GYEONGNAM_GEOJE		= 225,
		LRLC_GYEONGNAM_GEOCHANG		= 226,
		LRLC_GYEONGNAM_GOSEONG		= 227,
		LRLC_GYEONGNAM_GIMHAE		= 228,
		LRLC_GYEONGNAM_NAMHAE		= 229,
		LRLC_GYEONGNAM_MIRYANG		= 230,
		LRLC_GYEONGNAM_SACHEON		= 231,
		LRLC_GYEONGNAM_SANCHEONG	= 232,
		LRLC_GYEONGNAM_YANGSAN		= 233,
		LRLC_GYEONGNAM_UIRYEONG		= 234,
		LRLC_GYEONGNAM_JINJU		= 235,
		LRLC_GYEONGNAM_CHANGNYEONG	= 236,
		LRLC_GYEONGNAM_CHANGWON		= 237,
		LRLC_GYEONGNAM_TONGYEONG	= 238,
		LRLC_GYEONGNAM_HADONG		= 239,
		LRLC_GYEONGNAM_HAMAN		= 240,
		LRLC_GYEONGNAM_HAMYANG		= 241,
		LRLC_GYEONGNAM_HAPCHEON		= 242,

		LRLC_JEJU_JEJU				= 243,
		LRLC_JEJU_SEOGWIPO			= 244,

		LRLC_MAX,
	};

	static	int	GetCategoryIndex( const int iCategory )
	{
		switch( iCategory )
		{
		case LRLC_SEOUL_GANGNAM:
			return LRLC_SEOUL_GANGNAM;

		case LRLC_SEOUL_GANGDONG:
			return LRLC_SEOUL_GANGDONG;

		case LRLC_SEOUL_GANGBUK:
			return LRLC_SEOUL_GANGBUK;

		case LRLC_SEOUL_GANGSEO:
			return LRLC_SEOUL_GANGSEO;

		case LRLC_SEOUL_GWANAK:
			return LRLC_SEOUL_GWANAK;

		case LRLC_SEOUL_GWANGJIN:
			return LRLC_SEOUL_GWANGJIN;

		case LRLC_SEOUL_GURO:
			return LRLC_SEOUL_GURO;

		case LRLC_SEOUL_GEUMCHEON:
			return LRLC_SEOUL_GEUMCHEON;

		case LRLC_SEOUL_NOWON:
			return LRLC_SEOUL_NOWON;

		case LRLC_SEOUL_DOBONG:
			return LRLC_SEOUL_DOBONG;

		case LRLC_SEOUL_DONGDAEMUN:
			return LRLC_SEOUL_DONGDAEMUN;

		case LRLC_SEOUL_DONGJAK:
			return LRLC_SEOUL_DONGJAK;

		case LRLC_SEOUL_MAPO:
			return LRLC_SEOUL_MAPO;

		case LRLC_SEOUL_SEODAEMUN:
			return LRLC_SEOUL_SEODAEMUN;

		case LRLC_SEOUL_SEOCHO:
			return LRLC_SEOUL_SEOCHO;

		case LRLC_SEOUL_SEONGDONG:
			return LRLC_SEOUL_SEONGDONG;

		case LRLC_SEOUL_SEONGBUK:
			return LRLC_SEOUL_SEONGBUK;

		case LRLC_SEOUL_SONGPA:
			return LRLC_SEOUL_SONGPA;

		case LRLC_SEOUL_YANGCHEON:
			return LRLC_SEOUL_YANGCHEON;

		case LRLC_SEOUL_YEONGDEUNGPO:
			return LRLC_SEOUL_YEONGDEUNGPO;

		case LRLC_SEOUL_YONGSAN:
			return LRLC_SEOUL_YONGSAN;

		case LRLC_SEOUL_EUNPYEONG:
			return LRLC_SEOUL_EUNPYEONG;

		case LRLC_SEOUL_JONGNO:
			return LRLC_SEOUL_JONGNO;

		case LRLC_SEOUL_JUNG:
			return LRLC_SEOUL_JUNG;

		case LRLC_SEOUL_JUNGNANG:
			return LRLC_SEOUL_JUNGNANG;

		case LRLC_BUSAN:
		case LRLC_BUSAN_GANGSEO:
		case LRLC_BUSAN_GEUMJEONG:
		case LRLC_BUSAN_GIJANG	:
		case LRLC_BUSAN_NAM:
		case LRLC_BUSAN_DONG:
		case LRLC_BUSAN_DONGNAE:
		case LRLC_BUSAN_BUSANJIN:
		case LRLC_BUSAN_BUK:
		case LRLC_BUSAN_SASANG:
		case LRLC_BUSAN_SAHA:
		case LRLC_BUSAN_SEO:
		case LRLC_BUSAN_SUYEONG:
		case LRLC_BUSAN_YEONJE:
		case LRLC_BUSAN_YEONGDO:
		case LRLC_BUSAN_JUNG:
		case LRLC_BUSAN_HAEUNDAE:
			return LRLC_BUSAN;

		case LRLC_DAEGU:
		case LRLC_DAEGU_NAM:
		case LRLC_DAEGU_DALSEO:
		case LRLC_DAEGU_DALSEONG:
		case LRLC_DAEGU_DONG:
		case LRLC_DAEGU_BUK:
		case LRLC_DAEGU_SEO:
		case LRLC_DAEGU_SUSEONG:
		case LRLC_DAEGU_JUNG:
			return LRLC_DAEGU;

		case LRLC_INCHEON:
		case LRLC_INCHEON_GANGHWA:
		case LRLC_INCHEON_GYEYANG:
		case LRLC_INCHEON_NAM:
		case LRLC_INCHEON_NAMDONG:
		case LRLC_INCHEON_DONG:
		case LRLC_INCHEON_BUPYEONG:
		case LRLC_INCHEON_SEO:
		case LRLC_INCHEON_YEONSU:
		case LRLC_INCHEON_ONGJIN:
		case LRLC_INCHEON_JUNG:
			return LRLC_INCHEON;

		case LRLC_GWANGJU:
		case LRLC_GWANGJU_GWANGSAN:
		case LRLC_GWANGJU_NAM:
		case LRLC_GWANGJU_DONG:
		case LRLC_GWANGJU_BUK:
		case LRLC_GWANGJU_SEO:
			return LRLC_GWANGJU;

		case LRLC_DAEJEON:
		case LRLC_DAEJEON_DAEDEOK:
		case LRLC_DAEJEON_DONG:
		case LRLC_DAEJEON_SEO:
		case LRLC_DAEJEON_YUSEONG:
		case LRLC_DAEJEON_JUNG:
			return LRLC_DAEJEON;

		case LRLC_ULSAN:
		case LRLC_ULSAN_NAM:
		case LRLC_ULSAN_DONG:
		case LRLC_ULSAN_BUK:
		case LRLC_ULSAN_ULJU:
		case LRLC_ULSAN_JUNG:
			return LRLC_ULSAN;

		case LRLC_SEJONG:
			return LRLC_SEJONG;

		case LRLC_GYEONGGIDO:
		case LRLC_GYEONGGIDO_GAPYEONG:
		case LRLC_GYEONGGIDO_GOYANG:
		case LRLC_GYEONGGIDO_GWACHEON:
		case LRLC_GYEONGGIDO_GWANGMYEONG:
		case LRLC_GYEONGGIDO_GWANGJU:
		case LRLC_GYEONGGIDO_GURI:
		case LRLC_GYEONGGIDO_GUNPO:
		case LRLC_GYEONGGIDO_GIMPO:
		case LRLC_GYEONGGIDO_NAMYANGJU:
		case LRLC_GYEONGGIDO_DONGDUCHEON:
		case LRLC_GYEONGGIDO_BUCHEON:
		case LRLC_GYEONGGIDO_SEONGNAM:
		case LRLC_GYEONGGIDO_SUWON:
		case LRLC_GYEONGGIDO_SIHEUNG:
		case LRLC_GYEONGGIDO_ANSAN:
		case LRLC_GYEONGGIDO_ANSEONG:
		case LRLC_GYEONGGIDO_ANYANG:
		case LRLC_GYEONGGIDO_YANGJU:
		case LRLC_GYEONGGIDO_YANGPYEONG:
		case LRLC_GYEONGGIDO_YEOJU:
		case LRLC_GYEONGGIDO_YEONCHEON:
		case LRLC_GYEONGGIDO_OSAN:
		case LRLC_GYEONGGIDO_YONGIN:
		case LRLC_GYEONGGIDO_UIWANG:
		case LRLC_GYEONGGIDO_UIJEONGBU:
		case LRLC_GYEONGGIDO_ICHEON:
		case LRLC_GYEONGGIDO_PAJU:
		case LRLC_GYEONGGIDO_PYEONGTAEK:
		case LRLC_GYEONGGIDO_POCHEON:
		case LRLC_GYEONGGIDO_HANAM:
		case LRLC_GYEONGGIDO_HWASEONG:
			return LRLC_GYEONGGIDO;

		case LRLC_GANGWONDO:
		case LRLC_GANGWONDO_GANGNEUNG:
		case LRLC_GANGWONDO_GOSEONG:
		case LRLC_GANGWONDO_DONGHAE:
		case LRLC_GANGWONDO_SAMCHEOK:
		case LRLC_GANGWONDO_SOKCHO:
		case LRLC_GANGWONDO_YANGGU:
		case LRLC_GANGWONDO_YANGYANG:
		case LRLC_GANGWONDO_YEONGWOL:
		case LRLC_GANGWONDO_WONJU:
		case LRLC_GANGWONDO_INJE:
		case LRLC_GANGWONDO_JEONGSEON:
		case LRLC_GANGWONDO_CHEORWON:
		case LRLC_GANGWONDO_CHUNCHEON:
		case LRLC_GANGWONDO_TAEBAEK:
		case LRLC_GANGWONDO_PYEONGCHANG:
		case LRLC_GANGWONDO_HONGCHEON:
		case LRLC_GANGWONDO_HWACHEON:
		case LRLC_GANGWONDO_HOENGSEONG:
			return LRLC_GANGWONDO;

		case LRLC_CHUNGBUK:
		case LRLC_CHUNGBUK_GOESAN:
		case LRLC_CHUNGBUK_DANYANG:
		case LRLC_CHUNGBUK_BOEUN:
		case LRLC_CHUNGBUK_YEONGDONG:
		case LRLC_CHUNGBUK_OKCHEON:
		case LRLC_CHUNGBUK_EUMSEONG:
		case LRLC_CHUNGBUK_JECHEON:
		case LRLC_CHUNGBUK_JEUNGPYEONG:
		case LRLC_CHUNGBUK_JINCHEON:
		case LRLC_CHUNGBUK_CHEONGWON:
		case LRLC_CHUNGBUK_CHEONGJU:
		case LRLC_CHUNGBUK_CHUNGJU:
			return LRLC_CHUNGBUK;

		case LRLC_CHUNGNAM:
		case LRLC_CHUNGNAM_GYERYONG:
		case LRLC_CHUNGNAM_GONGJU:
		case LRLC_CHUNGNAM_GEUMSAN:
		case LRLC_CHUNGNAM_NONSAN:
		case LRLC_CHUNGNAM_DANGJIN:
		case LRLC_CHUNGNAM_BORYEONG:
		case LRLC_CHUNGNAM_BUYEO:
		case LRLC_CHUNGNAM_SEOSAN:
		case LRLC_CHUNGNAM_SEOCHEON:
		case LRLC_CHUNGNAM_ASAN:
		case LRLC_CHUNGNAM_YESAN:
		case LRLC_CHUNGNAM_CHEONAN:
		case LRLC_CHUNGNAM_CHEONGYANG:
		case LRLC_CHUNGNAM_TAEAN:
		case LRLC_CHUNGNAM_HONGSEONG:
			return LRLC_CHUNGNAM;

		case LRLC_JEONBUK:
		case LRLC_JEONBUK_GOCHANG:
		case LRLC_JEONBUK_GUNSAN:
		case LRLC_JEONBUK_GIMJE:
		case LRLC_JEONBUK_NAMWON:
		case LRLC_JEONBUK_MUJU:
		case LRLC_JEONBUK_BUAN:
		case LRLC_JEONBUK_SUNCHANG:
		case LRLC_JEONBUK_WANJU:
		case LRLC_JEONBUK_IKSAN:
		case LRLC_JEONBUK_IMSIL:
		case LRLC_JEONBUK_JANGSU:
		case LRLC_JEONBUK_JEONJU:
		case LRLC_JEONBUK_JEONGEUP:
		case LRLC_JEONBUK_JINAN:
			return LRLC_JEONBUK;

		case LRLC_JEONNAM:
		case LRLC_JEONNAM_GANGJIN:
		case LRLC_JEONNAM_GOHEUNG:
		case LRLC_JEONNAM_GOKSEONG:
		case LRLC_JEONNAM_GWANGYANG:
		case LRLC_JEONNAM_GURYE:
		case LRLC_JEONNAM_NAJU:
		case LRLC_JEONNAM_DAMYANG:
		case LRLC_JEONNAM_MOKPO:
		case LRLC_JEONNAM_MUAN:
		case LRLC_JEONNAM_BOSEONG:
		case LRLC_JEONNAM_SUNCHEON:
		case LRLC_JEONNAM_SINAN:
		case LRLC_JEONNAM_YEOSU:
		case LRLC_JEONNAM_YEONGGWANG:
		case LRLC_JEONNAM_YEONGAM:
		case LRLC_JEONNAM_WANDO:
		case LRLC_JEONNAM_JANGSEONG:
		case LRLC_JEONNAM_JANGHEUNG:
		case LRLC_JEONNAM_JINDO:
		case LRLC_JEONNAM_HAMPYEONG:
		case LRLC_JEONNAM_HAENAM:
		case LRLC_JEONNAM_HWASUN:
			return LRLC_JEONNAM;

		case LRLC_GYEONGBUK:
		case LRLC_GYEONGBUK_GYEONGSAN:
		case LRLC_GYEONGBUK_GYEONGJU:
		case LRLC_GYEONGBUK_GORYEONG:
		case LRLC_GYEONGBUK_GUMI:
		case LRLC_GYEONGBUK_GUNWI:
		case LRLC_GYEONGBUK_GIMCHEON:
		case LRLC_GYEONGBUK_MUNGYEONG:
		case LRLC_GYEONGBUK_BONGHWA:
		case LRLC_GYEONGBUK_SANGJU:
		case LRLC_GYEONGBUK_SEONGJU:
		case LRLC_GYEONGBUK_ANDONG:
		case LRLC_GYEONGBUK_YEONGDEOK:
		case LRLC_GYEONGBUK_YEONGYANG:
		case LRLC_GYEONGBUK_YEONGJU:
		case LRLC_GYEONGBUK_YEONGCHEON:
		case LRLC_GYEONGBUK_YECHEON:
		case LRLC_GYEONGBUK_ULLEUNG:
		case LRLC_GYEONGBUK_ULJIN:
		case LRLC_GYEONGBUK_UISEONG:
		case LRLC_GYEONGBUK_CHEONGDO:
		case LRLC_GYEONGBUK_CHEONGSONG:
		case LRLC_GYEONGBUK_CHILGOK:
		case LRLC_GYEONGBUK_POHANG:
			return LRLC_GYEONGBUK;

		case LRLC_GYEONGNAM:
		case LRLC_GYEONGNAM_GEOJE:
		case LRLC_GYEONGNAM_GEOCHANG:
		case LRLC_GYEONGNAM_GOSEONG:
		case LRLC_GYEONGNAM_GIMHAE:
		case LRLC_GYEONGNAM_NAMHAE:
		case LRLC_GYEONGNAM_MIRYANG:
		case LRLC_GYEONGNAM_SACHEON:
		case LRLC_GYEONGNAM_SANCHEONG:
		case LRLC_GYEONGNAM_YANGSAN:
		case LRLC_GYEONGNAM_UIRYEONG:
		case LRLC_GYEONGNAM_JINJU:
		case LRLC_GYEONGNAM_CHANGNYEONG:
		case LRLC_GYEONGNAM_CHANGWON:
		case LRLC_GYEONGNAM_TONGYEONG:
		case LRLC_GYEONGNAM_HADONG:
		case LRLC_GYEONGNAM_HAMAN:
		case LRLC_GYEONGNAM_HAMYANG:
		case LRLC_GYEONGNAM_HAPCHEON:
			return LRLC_GYEONGNAM;

		case LRLC_JEJU:
		case LRLC_JEJU_JEJU:
		case LRLC_JEJU_SEOGWIPO:
			return LRLC_JEJU;

		default:
			return LRLC_NONE;
		}
	}

	enum LOCAL_RAKING_MAIN_TAB_CATEGORY
	{
		// 추가할 때 CommonPacket.h의 KLocalRankingUnitInfo 클래스의 멤버 m_iPoint도 고려할 것!
		LRMTC_NONE				= -1,
		LRMTC_SPIRIT			= 0,
		LRMTC_AP				= 1,
		LRMTC_MAX,
	};

	enum LOCAL_RAKING_SUB_TAB_CATEGORY
	{
		LRSTC_NONE				= -1,
		LRSTC_LOCATION			= 0,
		LRSTC_GUILD				= 1,
	};

	enum LOCAL_RAKING_FILTER
	{
		// 랭커 리스트 검색 필터
		LRF_FRIEND				= ( 1 << 0 ),
		LRF_UNIT				= ( 1 << 1 ),
		LRF_GENDER_MALE			= ( 1 << 2 ),
		LRF_GENDER_FEMALE		= ( 1 << 3 ),

		// 유저 정보 공개 여부 필터
		LRF_USER_INFO_CATEGORY	= ( 1 << 0 ),
		LRF_USER_INFO_BIRTH		= ( 1 << 1 ),
		LRF_USER_INFO_PROFILE	= ( 1 << 2 ),
		LRF_USER_INFO_GENDER	= ( 1 << 3 ),
	};

	template < class T >	inline	bool	CheckFlag( T tValue, const T tFlag ){	return ( tValue & tFlag) == tFlag;	}
	template < class T >	inline	void	AddFlag( T& tValue, const T tFlag ){	tValue |= tFlag;	}
	template < class T >	inline	void	RemoveFlag( T& tValue, const T tFlag ){	tValue &= ~tFlag;	}

	inline	bool	CheckFlag( unsigned char tValue, const unsigned char tFlag ){	return CheckFlag<unsigned char>( tValue, tFlag );	}
	inline	void	AddFlag( unsigned char& tValue, const unsigned char tFlag ){	AddFlag<unsigned char>( tValue, tFlag );	}
	inline	void	RemoveFlag( unsigned char& tValue, const unsigned char tFlag ){	RemoveFlag<unsigned char>( tValue, tFlag );	}
//#endif SERV_LOCAL_RANKING_SYSTEM
	//}}

	//{{ 2013. 04. 01	 인연 시스템 - 김민성
//#ifdef SERV_RELATIONSHIP_SYSTEM
	enum RELATIONSHIP_TYPE
	{
		RT_SOLO		= 0,	// 솔로! 슬프구나...
		RT_COUPLE,			// 커플 상태
		RT_MARRIED,			// 결혼 상태

		RT_END,
	};

	enum WEDDING_HALL_TYPE
	{
		WHT_CASH_A				= 0, // 루벤
		WHT_CASH_B				= 1, // 샌더
		WHT_END,
	};

	enum WEDDING_OFFICIANT_TYPE		// 주례
	{
		WOT_NPC_A				= 0,
		WOT_NPC_B				= 1,
		WOT_NPC_C				= 2,
		WOT_NPC_END,
	};

	enum WEDDING_STATUS
	{
		WS_NONE,
		WS_GROOM,		// 신랑
		WS_BRIDE,		// 신부
		WS_GUEST,		// 하객
	};

	enum WEDDING_HALL_NUM
	{
		WEDDING_HALL_MAX_NUM = 32,
	};
//#endif SERV_RELATIONSHIP_SYSTEM
	//}

//#ifdef SERV_HACKING_USER_CHECK_COUNT// 작업날짜: 2013-06-03	// 박세훈
	enum HackingUserCheckType
	{
		HUCT_NONE							= 0,
		HUCT_FIELD_WORKING_CHECK			= 1,	// 필드 작업장
//#ifdef SERV_HACKING_USER_PROCESS_NAME_RECORD// 작업날짜: 2013-06-03	// 박세훈
		HUCT_CLIENT_HACKING_PROCESS			= 2,
		HUCT_CLIENT_HACKING_TEXT			= 3,
		HUCT_CLIENT_HACKING_MODULE			= 4,
		HUCT_CLIENT_HACKING_DLL_MANAGER		= 5,
		HUCT_CLIENT_HACKING_ZOMBIE_PROCESS	= 6,
		HUCT_CLIENT_HACKING_THREAD_TITLE	= 7,
//#endif // SERV_HACKING_USER_PROCESS_NAME_RECORD
		HUCT_MANUAL_BLOCK					= 8,
		HUCT_MAX,
	};
//#endif // SERV_HACKING_USER_CHECK_COUNT

//#ifdef SERV_NEXON_COUPON_SYSTEM// 작업날짜: 2013-06-18	// 박세훈
	enum COUPON_LIST
	{
		CL_INDEX_PER_PAGE	= 3,
	};

	enum NEXON_COUPON_BOX_TYPE
	{
		NCBT_WHOLE		= 0,
		NCBT_ITEM		= 1220,
		NCBT_DISCOUNT	= 1250,
	};
//#endif // SERV_NEXON_COUPON_SYSTEM

//#ifdef SERV_CRITERION_DATE_EVENT// 작업날짜: 2013-06-26	// 박세훈
	enum CRITERION_USER_TYPE
	{
		CUT_NONE		= 0,
		CUT_EXIST		= ( 1 << 0 ),
		CUT_COMEBACK	= ( 1 << 1 ),
		CUT_NEW			= ( 1 << 2 ),
//#ifdef SERV_CRITERION_DATE_EVENT_JUMPING_CHARACTER// 작업날짜: 2013-06-26	// 박세훈
		CUT_JUMPING		= ( 1 << 3 ),
		CUT_ALL			= ( CUT_EXIST | CUT_COMEBACK | CUT_NEW | CUT_JUMPING ),
//#else // SERV_CRITERION_DATE_EVENT_JUMPING_CHARACTER
//		CUT_ALL			= ( CUT_EXIST | CUT_COMEBACK | CUT_NEW ),
//#endif // SERV_CRITERION_DATE_EVENT_JUMPING_CHARACTER
	};
//#endif // SERV_CRITERION_DATE_EVENT

//#ifdef SERV_BATTLE_FIELD_BOSS// 작업날짜: 2013-11-06	// 박세훈
	enum BOSS_FIELD_ROOM_STATE
	{
		BFRS_BOSS_FIELD				= ( 1 << 0 ),
		BFRS_INTRUDE_RESTRICTION	= ( 1 << 1 ),
		BFRS_CLOSE_PROCESS			= ( 1 << 2 ),
		BFRS_RETURN_TO_FIELD		= ( 1 << 3 ),
	};
//#endif // SERV_BATTLE_FIELD_BOSS
}
