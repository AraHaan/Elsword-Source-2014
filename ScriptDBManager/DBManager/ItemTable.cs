//09. 06. 24 김정협 나라별 define
// ItemTable.cs, QuestTable.cs, TitleTable.cs SkillTable.cs 네군대 정의를
// 모두 바꿔줘야 함.
#define __COUNTRY_KR__
//#define __COUNTRY_TW__
//#define __COUNTRY_HK__
//#define __COUNTRY_JP__


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Collections;
using DBManager.LocalizationDataSetTableAdapters;
using DBManager.ScriptData_TWDataSetTableAdapters;
using DBManager.ScriptData_HKDataSetTableAdapters;
using System.Diagnostics;

//using System.Runtime.InteropServices;

//using System.Diagnostics;



namespace DBManager
{


    public partial class ItemTable : Form
    {
        
        private SqlConnection Con;
        private SqlDataAdapter Adpt;
        DataTable tblItem;
        object objTemp;
        object objTemp2;
                

        //09. 06. 03 김정협 추가 : 셀배경색 DB
        //ColorTable용        
        private SqlDataAdapter Adpt_ColorTable;
        DataTable tblColor;

        //09. 07. 07         
        //BorderTable용        
        private SqlDataAdapter Adpt_BorderTable;
        DataTable tblBorder;

        //ItemHistory용        
        private SqlDataAdapter Adpt_Item_History;
        DataTable tblItem_History;
        //ItemDelete용        
        private SqlDataAdapter Adpt_Item_DeleteHistory;
        DataTable tblItem_DeleteHistory;

        //String 용        
        //private SqlDataAdapter Adpt_String;
        //09. 06. 19 김정협 Trans 연결
        DataTable tblTrans;
        TransTableAdapter Adpt_Trans = new TransTableAdapter();
        DataTable tblTrans_History;
        Trans_HistoryTableAdapter Adpt_Trans_History = new Trans_HistoryTableAdapter();

        //09. 06. 19 김정협 Release 연결
        DataTable tblRelease;
        ReleaseTableAdapter Adpt_Release = new ReleaseTableAdapter();
        DataTable tblRelease_History;
        Release_HistoryTableAdapter Adpt_Release_History = new Release_HistoryTableAdapter();

        //09. 06. 02 김정협 추가 : 색상을 변경 기억을 위한 배열
        ArrayList m_ChangeCellList = new ArrayList();

        string m_strID;
        ArrayList m_ModifyIDList = new ArrayList();

        ArrayList m_DeleteRowList = new ArrayList();

        Stack m_UndoStack = new Stack();
        Stack m_RedoStack = new Stack();

        public bool m_bSaveEnd = true; //수정했을 시 저장한 후 끝내는지 확인하는 변수

        //SpecialAbility 용
        private SqlDataAdapter Adpt_SpecialAbility;
        DataTable tblSpecialAbility;
        //SpecialAbility History용        
        private SqlDataAdapter Adpt_SpecialAbility_History;
        DataTable tblSpecialAbility_History;
        //ItemDelete용        
        private SqlDataAdapter Adpt_SpecialAbility_DeleteHistory;
        DataTable tblSpecialAbility_DeleteHistory;

        //SocketItem 용
        private SqlDataAdapter Adpt_SocketItem;
        DataTable tblSocketItem;
        //SocketItem History용        
        private SqlDataAdapter Adpt_SocketItem_History;
        DataTable tblSocketItem_History;
        //SocketItemDelete용        
        private SqlDataAdapter Adpt_SocketItem_DeleteHistory;
        DataTable tblSocketItem_DeleteHistory;

        //SocketRandom 용
        private SqlDataAdapter Adpt_SocketRandom;
        DataTable tblSocketRandom;
        //SocketRandom History용        
        private SqlDataAdapter Adpt_SocketRandom_History;
        DataTable tblSocketRandom_History;
        //SocketRandomDelete용        
        private SqlDataAdapter Adpt_SocketRandom_DeleteHistory;
        DataTable tblSocketRandom_DeleteHistory;

        //SocketGroup 용
        private SqlDataAdapter Adpt_SocketGroup;
        DataTable tblSocketGroup;
        //SocketGroup History용        
        private SqlDataAdapter Adpt_SocketGroup_History;
        DataTable tblSocketGroup_History;
        //SocketGroupDelete용        
        private SqlDataAdapter Adpt_SocketGroup_DeleteHistory;
        DataTable tblSocketGroup_DeleteHistory;


        //SetItem 용
        private SqlDataAdapter Adpt_SetItem;
        DataTable tblSetItem;
        //SetItem History용        
        private SqlDataAdapter Adpt_SetItem_History;
        DataTable tblSetItem_History;
        //SetItemDelete용        
        private SqlDataAdapter Adpt_SetItem_DeleteHistory;
        DataTable tblSetItem_DeleteHistory;

        //RandomBoxTable 용
        private SqlDataAdapter Adpt_RandomBoxTable;
        DataTable tblRandomBoxTable;
        //RandomBoxTable History용        
        private SqlDataAdapter Adpt_RandomBoxTable_History;
        DataTable tblRandomBoxTable_History;
        //RandomBoxTableDelete용        
        private SqlDataAdapter Adpt_RandomBoxTable_DeleteHistory;
        DataTable tblRandomBoxTable_DeleteHistory;

        //RandomItemGroup 용
        private SqlDataAdapter Adpt_RandomItemGroup;
        DataTable tblRandomItemGroup;
        //RandomItemGroup History용        
        private SqlDataAdapter Adpt_RandomItemGroup_History;
        DataTable tblRandomItemGroup_History;
        //RandomItemGroupDelete용        
        private SqlDataAdapter Adpt_RandomItemGroup_DeleteHistory;
        DataTable tblRandomItemGroup_DeleteHistory;

        //ExchangeTable 용
        private SqlDataAdapter Adpt_ExchangeTable;
        DataTable tblExchangeTable;
        //ExchangeTable History용        
        private SqlDataAdapter Adpt_ExchangeTable_History;
        DataTable tblExchangeTable_History;
        //ExchangeTableDelete용        
        private SqlDataAdapter Adpt_ExchangeTable_DeleteHistory;
        DataTable tblExchangeTable_DeleteHistory;

        //ManufactureTable 용
        private SqlDataAdapter Adpt_ManufactureTable;
        DataTable tblManufactureTable;
        //ManufactureTable History용        
        private SqlDataAdapter Adpt_ManufactureTable_History;
        DataTable tblManufactureTable_History;
        //ManufactureTableDelete용        
        private SqlDataAdapter Adpt_ManufactureTable_DeleteHistory;
        DataTable tblManufactureTable_DeleteHistory;

        //ManufactureResultGroup 용
        private SqlDataAdapter Adpt_ManufactureResultGroup;
        DataTable tblManufactureResultGroup;
        //ManufactureResultGroup History용        
        private SqlDataAdapter Adpt_ManufactureResultGroup_History;
        DataTable tblManufactureResultGroup_History;
        //ManufactureResultGroupDelete용        
        private SqlDataAdapter Adpt_ManufactureResultGroup_DeleteHistory;
        DataTable tblManufactureResultGroup_DeleteHistory;

        //ManufactureVillage 용
        private SqlDataAdapter Adpt_ManufactureVillage;
        DataTable tblManufactureVillage;
        //ManufactureVillage History용        
        private SqlDataAdapter Adpt_ManufactureVillage_History;
        DataTable tblManufactureVillage_History;
        //ManufactureVillageDelete용        
        private SqlDataAdapter Adpt_ManufactureVillage_DeleteHistory;
        DataTable tblManufactureVillage_DeleteHistory;

        //AttribEnchantItem 용
        private SqlDataAdapter Adpt_AttribEnchantItem;
        DataTable tblAttribEnchantItem;
        //AttribEnchantItem History용        
        private SqlDataAdapter Adpt_AttribEnchantItem_History;
        DataTable tblAttribEnchantItem_History;
        //AttribEnchantRequireDelete용        
        private SqlDataAdapter Adpt_AttribEnchantItem_DeleteHistory;
        DataTable tblAttribEnchantItem_DeleteHistory;

        //AttribEnchantRequire 용
        private SqlDataAdapter Adpt_AttribEnchantRequire;
        DataTable tblAttribEnchantRequire;
        //AttribEnchantRequire History용        
        private SqlDataAdapter Adpt_AttribEnchantRequire_History;
        DataTable tblAttribEnchantRequire_History;
        //AttribEnchantRequireDelete용        
        private SqlDataAdapter Adpt_AttribEnchantRequire_DeleteHistory;
        DataTable tblAttribEnchantRequire_DeleteHistory;

        //NpcExtraAbility 용
        private SqlDataAdapter Adpt_NpcExtraAbility;
        DataTable tblNpcExtraAbility;
        //NpcExtraAbility History용        
        private SqlDataAdapter Adpt_NpcExtraAbility_History;
        DataTable tblNpcExtraAbility_History;
        //NpcExtraAbilityDelete용        
        private SqlDataAdapter Adpt_NpcExtraAbility_DeleteHistory;
        DataTable tblNpcExtraAbility_DeleteHistory;


        //09. 06. 06 김정협 자동 수정으로 인해 추가
        //ITEM_TYPE용        
        private SqlDataAdapter Adpt_ItemType;
        DataTable tblItemType;

        //USE_TYPE용        
        private SqlDataAdapter Adpt_UseType;
        DataTable tblUseType;

        //PERIODTYPE용        
        private SqlDataAdapter Adpt_PeriodType;
        DataTable tblPeriodType;

        //PRICETYPE용        
        private SqlDataAdapter Adpt_PriceType;
        DataTable tblPriceType;

        //USECONDITION용        
        private SqlDataAdapter Adpt_UseCondition;
        DataTable tblUseCondition;

        //UNITTYPE용        
        private SqlDataAdapter Adpt_UnitType;
        DataTable tblUnitType;

        //UNITCLASS용        
        private SqlDataAdapter Adpt_UnitClass;
        DataTable tblUnitClass;

        //EQIPPOSITION용        
        private SqlDataAdapter Adpt_EqipPosition;
        DataTable tblEqipPosition;

        //ITEMGRADE용        
        private SqlDataAdapter Adpt_ItemGrade;
        DataTable tblItemGrade;

        //SPECIAL_ABILITY_TYPE용        
        private SqlDataAdapter Adpt_SpecialAbilityType;
        DataTable tblSpecialAbilityType;


        //SOCKET_DATA_TYPE용        
        private SqlDataAdapter Adpt_SoketDataType;
        DataTable tblSocketDataType;

        //EXTRA_DAMAGE_TYPE용        
        private SqlDataAdapter Adpt_ExtraDamageType;
        DataTable tblExtraDamageType;

        //HouseID용
        private SqlDataAdapter Adpt_HouseID;
        DataTable tblHouseID;

        //ExchangeType용
        private SqlDataAdapter Adpt_ExchangeType;
        DataTable tblExchangeType;

        //MANUFACTURE_TYPE용        
        private SqlDataAdapter Adpt_MenufactureType;
        DataTable tblMenufactureType;

        //VILLAGE_ID용        
        private SqlDataAdapter Adpt_VillageID;
        DataTable tblVillageID;

        //ATTRIB_ENCHANT_TYPE용        
        private SqlDataAdapter Adpt_AttribEnchantType;
        DataTable tblAttribEnchantType;

        //NPC_ABILITY_ID용        
        private SqlDataAdapter Adpt_NPCAbility;
        DataTable tblNPCAbility;

        public int m_nFilteringColumnIndex = -1;

        private int m_nStartPoint = 0;

        private int m_nLastRow = 0;

        //다중 붙여넣기에서 CellEditBegin 과 End를 사용하기 위해서 만듬
        private DataGridViewCell m_dgvcTemp;
        private bool m_bPaste = false;

        //09. 07. 02 김정협 여러 값을 그룹화하여 언두리두시 한번에 바꿀때 사용하기 위해 만든 변수
        int m_nPasteGroup = -1;

        //09. 06. 10 필터링 결과내 재검색 기능
        public bool m_IsFiltering = false;


        //09. 07. 09 김정협 사용자 마음대로 정렬순서정하게 하기 위함
        ArrayList m_CopyList = new ArrayList();
        bool m_bCopy = false;

        
        
        public ItemTable()
        {
            InitializeComponent();
                      
        }

        public void SetID(string strID)
        {
            m_strID = strID;
        }

        public int GetCurrentTab() { return tabControl1.SelectedIndex; }

        public int CurrentMaxStringIndex() 
        {
            //09. 06. 22 김정협 현재 맥스스트링을 Rows.Count가 아닌 현재 인덱스 아이디를 얻어와서 계산
            DataTable dtTemp = Adpt_Trans.GetDataByDescTransIDX();
            int nMaxStringIndex = Convert.ToInt32(dtTemp.Rows[0]["TransIDX"].ToString());
            return nMaxStringIndex;//tblTrans.Rows.Count - 1; 
        }
                

        public void ColorRefresh(bool bRed)
        {
            switch (tabControl1.SelectedIndex)
            {
                case 0:
                    {
                        for (int i = 0; i < dataGridView1.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView1.ColumnCount; k++)
                            {
                                if (dataGridView1[k, i].HasStyle)
                                    dataGridView1[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 0)
                            {
                                for (int i = 0; i < dataGridView1.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView1["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView1.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView1[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView1[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 0)
                            {
                                for (int i = 0; i < dataGridView1.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView1["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView1[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView1["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView1[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView1["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }

                    }
                    break;
                case 1:
                    {
                        for (int i = 0; i < dataGridView2.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView2.ColumnCount; k++)
                            {
                                if (dataGridView2[k, i].HasStyle)
                                    dataGridView2[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 1)
                            {
                                for (int i = 0; i < dataGridView2.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView2["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView2.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView2[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView2[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 1)
                            {
                                for (int i = 0; i < dataGridView2.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView2["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView2[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView2["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView2[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView2["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }

                    }
                    break;
                case 2:
                    {
                        for (int i = 0; i < dataGridView3.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView3.ColumnCount; k++)
                            {
                                if (dataGridView3[k, i].HasStyle)
                                    dataGridView3[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 2)
                            {
                                for (int i = 0; i < dataGridView3.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView3["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView3.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView3[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView3[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 2)
                            {
                                for (int i = 0; i < dataGridView3.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView3["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView3[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView3["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView3[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView3["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }

                    }
                    break;
                case 3:
                    {
                        for (int i = 0; i < dataGridView4.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView4.ColumnCount; k++)
                            {
                                if (dataGridView4[k, i].HasStyle)
                                    dataGridView4[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 3)
                            {
                                for (int i = 0; i < dataGridView4.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView4["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView4.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView4[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView4[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 3)
                            {
                                for (int i = 0; i < dataGridView4.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView4["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView4[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView4["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView4[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView4["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }

                    }
                    break;
                case 4:
                    {
                        for (int i = 0; i < dataGridView5.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView5.ColumnCount; k++)
                            {
                                if (dataGridView5[k, i].HasStyle)
                                    dataGridView5[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 4)
                            {
                                for (int i = 0; i < dataGridView5.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView5["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView5.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView5[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView5[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 4)
                            {
                                for (int i = 0; i < dataGridView5.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView5["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView5[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView5["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView5[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView5["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 5:
                    {
                        for (int i = 0; i < dataGridView6.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView6.ColumnCount; k++)
                            {
                                if (dataGridView6[k, i].HasStyle)
                                    dataGridView6[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 5)
                            {
                                for (int i = 0; i < dataGridView6.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView6["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView6.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView6[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView6[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 5)
                            {
                                for (int i = 0; i < dataGridView6.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView6["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView6[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView6["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView6[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView6["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 6:
                    {
                        for (int i = 0; i < dataGridView7.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView7.ColumnCount; k++)
                            {
                                if (dataGridView7[k, i].HasStyle)
                                    dataGridView7[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 6)
                            {
                                for (int i = 0; i < dataGridView7.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView7["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView7.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView7[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView7[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 6)
                            {
                                for (int i = 0; i < dataGridView7.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView7["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView7[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView7["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView7[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView7["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 7:
                    {
                        for (int i = 0; i < dataGridView8.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView8.ColumnCount; k++)
                            {
                                if (dataGridView8[k, i].HasStyle)
                                    dataGridView8[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 7)
                            {
                                for (int i = 0; i < dataGridView8.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView8["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView8.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView8[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView8[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 7)
                            {
                                for (int i = 0; i < dataGridView8.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView8["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView8[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView8["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView8[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView8["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 8:
                    {
                        for (int i = 0; i < dataGridView9.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView9.ColumnCount; k++)
                            {
                                if (dataGridView9[k, i].HasStyle)
                                    dataGridView9[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 8)
                            {
                                for (int i = 0; i < dataGridView9.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView9["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView9.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView9[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView9[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 8)
                            {
                                for (int i = 0; i < dataGridView9.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView9["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView9[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView9["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView9[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView9["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 9:
                    {
                        for (int i = 0; i < dataGridView10.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView10.ColumnCount; k++)
                            {
                                if (dataGridView10[k, i].HasStyle)
                                    dataGridView10[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 9)
                            {
                                for (int i = 0; i < dataGridView10.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView10["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView10.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView10[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView10[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 9)
                            {
                                for (int i = 0; i < dataGridView10.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView10["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView10[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView10["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView10[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView10["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 10:
                    {
                        for (int i = 0; i < dataGridView11.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView11.ColumnCount; k++)
                            {
                                if (dataGridView11[k, i].HasStyle)
                                    dataGridView11[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 10)
                            {
                                for (int i = 0; i < dataGridView11.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView11["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView11.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView11[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView11[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 10)
                            {
                                for (int i = 0; i < dataGridView11.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView11["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView11[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView11["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView11[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView11["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 11:
                    {
                        for (int i = 0; i < dataGridView12.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView12.ColumnCount; k++)
                            {
                                if (dataGridView12[k, i].HasStyle)
                                    dataGridView12[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 11)
                            {
                                for (int i = 0; i < dataGridView12.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView12["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView12.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView12[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView12[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 11)
                            {
                                for (int i = 0; i < dataGridView12.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView12["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView12[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView12["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView12[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView12["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 12:
                    {
                        for (int i = 0; i < dataGridView13.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView13.ColumnCount; k++)
                            {
                                if (dataGridView13[k, i].HasStyle)
                                    dataGridView13[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 12)
                            {
                                for (int i = 0; i < dataGridView13.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView13["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView13.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView13[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView13[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 12)
                            {
                                for (int i = 0; i < dataGridView13.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView13["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView13[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView13["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView13[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView13["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 13:
                    {
                        for (int i = 0; i < dataGridView14.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView14.ColumnCount; k++)
                            {
                                if (dataGridView14[k, i].HasStyle)
                                    dataGridView14[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 13)
                            {
                                for (int i = 0; i < dataGridView14.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView14["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView14.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView14[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView14[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 13)
                            {
                                for (int i = 0; i < dataGridView14.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView14["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView14[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView14["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView14[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView14["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 14:
                    {
                        for (int i = 0; i < dataGridView15.RowCount; i++)
                        {
                            for (int k = 0; k < dataGridView15.ColumnCount; k++)
                            {
                                if (dataGridView15[k, i].HasStyle)
                                    dataGridView15[k, i].Style.ForeColor = Color.Black;
                            }
                        }

                        //09. 06. 01 김정협 수정 : IndexKey와 대조하여 색을 새로 입힘
                        for (int j = 0; j < m_ModifyIDList.Count; j++)
                        {
                            if (((sTableValue)m_ModifyIDList[j]).nTabIndex == 14)
                            {
                                for (int i = 0; i < dataGridView15.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView15["IndexKey", i].Value.ToString()) == ((sTableValue)m_ModifyIDList[j]).nIndexKey)
                                    {
                                        if (!((sTableValue)m_ModifyIDList[j]).bCell)
                                        {
                                            //m_dgvData.Rows[i].DefaultCellStyle.ForeColor = Color.Red;
                                            for (int k = 0; k < dataGridView15.ColumnCount; k++)
                                            {
                                                if (bRed)
                                                    dataGridView15[k, i].Style.ForeColor = Color.Red;
                                                else
                                                    dataGridView15[k, i].Style.ForeColor = Color.Black;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        //09. 06. 02 김정협 수정 : 배열정보에 따라 글씨 색 붉게 함.
                        for (int j = 0; j < m_ChangeCellList.Count; j++)
                        {
                            if (((sChangeCell)m_ChangeCellList[j]).nTabIndex == 14)
                            {
                                for (int i = 0; i < dataGridView15.RowCount; i++)
                                {
                                    if (Convert.ToInt32(dataGridView15["IndexKey", i].Value.ToString()) == ((sChangeCell)m_ChangeCellList[j]).nIndexKey)
                                    {
                                        if (bRed)
                                        {
                                            dataGridView15[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Red;
                                            dataGridView15["Regdate", i].Style.ForeColor = Color.Red;
                                        }
                                        else
                                        {
                                            dataGridView15[((sChangeCell)m_ChangeCellList[j]).nColumnIndex, i].Style.ForeColor = Color.Black;
                                            dataGridView15["Regdate", i].Style.ForeColor = Color.Black;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    break;
            }
        }

        private void Save()
        {
            //09. 07. 01 김정협 현재 위치 기억
            int nCurrentPosTabIndex = tabControl1.SelectedIndex;
            int nCurrentPosColumnIndex = -1;
            int nCurrentPosRowIndex = -1;
            switch(nCurrentPosTabIndex)
            {
                case 0 :
                    nCurrentPosColumnIndex = dataGridView1.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView1.CurrentCell.RowIndex;                    
                    break;
                case 1:
                    nCurrentPosColumnIndex = dataGridView2.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView2.CurrentCell.RowIndex;                    
                    break;
                case 2:
                    nCurrentPosColumnIndex = dataGridView3.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView3.CurrentCell.RowIndex;
                    break;
                case 3:
                    nCurrentPosColumnIndex = dataGridView4.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView4.CurrentCell.RowIndex;
                    break;
                case 4:
                    nCurrentPosColumnIndex = dataGridView5.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView5.CurrentCell.RowIndex;
                    break;
                case 5:
                    nCurrentPosColumnIndex = dataGridView6.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView6.CurrentCell.RowIndex;
                    break;
                case 6:
                    nCurrentPosColumnIndex = dataGridView7.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView7.CurrentCell.RowIndex;
                    break;
                case 7:
                    nCurrentPosColumnIndex = dataGridView8.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView8.CurrentCell.RowIndex;
                    break;
                case 8:
                    nCurrentPosColumnIndex = dataGridView9.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView9.CurrentCell.RowIndex;
                    break;
                case 9:
                    nCurrentPosColumnIndex = dataGridView10.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView10.CurrentCell.RowIndex;
                    break;
                case 10:
                    nCurrentPosColumnIndex = dataGridView11.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView11.CurrentCell.RowIndex;
                    break;
                case 11:
                    nCurrentPosColumnIndex = dataGridView12.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView12.CurrentCell.RowIndex;
                    break;
                case 12:
                    nCurrentPosColumnIndex = dataGridView13.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView13.CurrentCell.RowIndex;
                    break;
                case 13:
                    nCurrentPosColumnIndex = dataGridView14.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView14.CurrentCell.RowIndex;
                    break;
                case 14:
                    nCurrentPosColumnIndex = dataGridView15.CurrentCell.ColumnIndex;
                    nCurrentPosRowIndex = dataGridView15.CurrentCell.RowIndex;
                    break;

            }

#if __COUNTRY_KR__
            //09. 07. 08 김정협 저장 속도 증가를 위하여 한번만 실행하게 함.
            ArrayList arModifyTabIndex = new ArrayList();
            for(int i = 0; i < m_ModifyIDList.Count;i++)
            {
                if (!arModifyTabIndex.Contains(((sTableValue)m_ModifyIDList[i]).nTabIndex))
                {
                    arModifyTabIndex.Add(((sTableValue)m_ModifyIDList[i]).nTabIndex);
                }
            }
            ArrayList arDeleteTabIndex = new ArrayList();
            for (int i = 0; i < m_DeleteRowList.Count; i++)
            {
                if (!arDeleteTabIndex.Contains(((sDeleteRow)m_DeleteRowList[i]).nTabIndex))
                {
                    arDeleteTabIndex.Add(((sDeleteRow)m_DeleteRowList[i]).nTabIndex);
                }
            }


            ///////////////////////////////////////////////////////////////////////////
            //대만버전
            ///////////////////////////////////////////////////////////////////////////

            ScriptData_TWDataSetTableAdapters.ItemTableAdapter Adt_ItemTW = null;
            DataTable tblItemTW = null;
            ScriptData_TWDataSetTableAdapters.Item_HistoryTableAdapter Adt_ItemTW_History = null;
            DataTable tblItemTW_History = null;
            ScriptData_TWDataSetTableAdapters.Item_DeleteHistoryTableAdapter Adpt_ItemTW_DeleteHistory = null;
            DataTable tblItemTW_DeleteHistory = null;

            
            if (arModifyTabIndex.Contains(0) || arDeleteTabIndex.Contains(0))
            {
                Adt_ItemTW = new ScriptData_TWDataSetTableAdapters.ItemTableAdapter();
                tblItemTW = Adt_ItemTW.GetData();
                tblItemTW.Columns["IndexKey"].AllowDBNull = true;
                tblItemTW.Columns["ID"].AllowDBNull = true;
                tblItemTW.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(0))
                {
                    Adt_ItemTW_History = new ScriptData_TWDataSetTableAdapters.Item_HistoryTableAdapter();                    
                    tblItemTW_History = Adt_ItemTW_History.GetData();
                    tblItemTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblItemTW_History.Columns["ID"].AllowDBNull = true;
                    tblItemTW_History.Columns["Regdate"].AllowDBNull = true;
                    
                }
                if (arDeleteTabIndex.Contains(0))
                {
                    Adpt_ItemTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.Item_DeleteHistoryTableAdapter();
                    tblItemTW_DeleteHistory = Adpt_ItemTW_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblItemTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblItemTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_TWDataSetTableAdapters.SpecialAbilityTableAdapter Adt_SpecialAbilityTW = null;
            ScriptData_TWDataSetTableAdapters.SpecialAbility_HistoryTableAdapter Adt_SpecialAbilityTW_History = null;
            ScriptData_TWDataSetTableAdapters.SpecialAbility_DeleteHistoryTableAdapter Adpt_SpecialAbilityTW_DeleteHistory = null;
            DataTable tblSpecialAbilityTW = null;
            DataTable tblSpecialAbilityTW_History = null;
            DataTable tblSpecialAbilityTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(1) || arDeleteTabIndex.Contains(1))
            {
                Adt_SpecialAbilityTW = new ScriptData_TWDataSetTableAdapters.SpecialAbilityTableAdapter();

                tblSpecialAbilityTW = Adt_SpecialAbilityTW.GetData();

                tblSpecialAbilityTW.Columns["IndexKey"].AllowDBNull = true;
                tblSpecialAbilityTW.Columns["ID"].AllowDBNull = true;
                tblSpecialAbilityTW.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(1))
                {
                    Adt_SpecialAbilityTW_History = new ScriptData_TWDataSetTableAdapters.SpecialAbility_HistoryTableAdapter();
                    tblSpecialAbilityTW_History = Adt_SpecialAbilityTW_History.GetData();

                    tblSpecialAbilityTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSpecialAbilityTW_History.Columns["ID"].AllowDBNull = true;
                    tblSpecialAbilityTW_History.Columns["Regdate"].AllowDBNull = true;
                    
                }
                if (arDeleteTabIndex.Contains(1))
                {
                    Adpt_SpecialAbilityTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.SpecialAbility_DeleteHistoryTableAdapter();
                    tblSpecialAbilityTW_DeleteHistory = Adpt_SpecialAbilityTW_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSpecialAbilityTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSpecialAbilityTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }                    
                }                
            }

            ScriptData_TWDataSetTableAdapters.SocketItemTableAdapter Adt_SocketItemTW = null;
            DataTable tblSocketItemTW = null;
            ScriptData_TWDataSetTableAdapters.SocketItem_HistoryTableAdapter Adt_SocketItemTW_History = null;
            DataTable tblSocketItemTW_History = null;
            ScriptData_TWDataSetTableAdapters.SocketItem_DeleteHistoryTableAdapter Adpt_SocketItemTW_DeleteHistory = null;
            DataTable tblSocketItemTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(2) || arDeleteTabIndex.Contains(2))
            {
                Adt_SocketItemTW = new ScriptData_TWDataSetTableAdapters.SocketItemTableAdapter();

                tblSocketItemTW = Adt_SocketItemTW.GetData();
                tblSocketItemTW.Columns["IndexKey"].AllowDBNull = true;
                tblSocketItemTW.Columns["ID"].AllowDBNull = true;
                tblSocketItemTW.Columns["Regdate"].AllowDBNull = true;
                
                
                if (arModifyTabIndex.Contains(2))
                {
                    Adt_SocketItemTW_History = new ScriptData_TWDataSetTableAdapters.SocketItem_HistoryTableAdapter();
                    tblSocketItemTW_History = Adt_SocketItemTW_History.GetData();
                    tblSocketItemTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSocketItemTW_History.Columns["ID"].AllowDBNull = true;
                    tblSocketItemTW_History.Columns["Regdate"].AllowDBNull = true;
                    
                }
                if (arDeleteTabIndex.Contains(2))
                {
                    Adpt_SocketItemTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.SocketItem_DeleteHistoryTableAdapter();

                    tblSocketItemTW_DeleteHistory = Adpt_SocketItemTW_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSocketItemTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSocketItemTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }                
            }

            ScriptData_TWDataSetTableAdapters.SocketRandomTableAdapter Adt_SocketRandomTW = null;
            DataTable tblSocketRandomTW = null;
            ScriptData_TWDataSetTableAdapters.SocketRandom_HistoryTableAdapter Adt_SocketRandomTW_History = null;
            DataTable tblSocketRandomTW_History = null;
            ScriptData_TWDataSetTableAdapters.SocketRandom_DeleteHistoryTableAdapter Adpt_SocketRandomTW_DeleteHistory = null;
            DataTable tblSocketRandomTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(3) || arDeleteTabIndex.Contains(3))
            {
                Adt_SocketRandomTW = new ScriptData_TWDataSetTableAdapters.SocketRandomTableAdapter();
                tblSocketRandomTW = Adt_SocketRandomTW.GetData();

                tblSocketRandomTW.Columns["IndexKey"].AllowDBNull = true;
                tblSocketRandomTW.Columns["SocketDataType"].AllowDBNull = true;
                tblSocketRandomTW.Columns["Regdate"].AllowDBNull = true;
                
                if (arModifyTabIndex.Contains(3))
                {
                    Adt_SocketRandomTW_History = new ScriptData_TWDataSetTableAdapters.SocketRandom_HistoryTableAdapter();

                    tblSocketRandomTW_History = Adt_SocketRandomTW_History.GetData();

                    tblSocketRandomTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSocketRandomTW_History.Columns["SocketDataType"].AllowDBNull = true;
                    tblSocketRandomTW_History.Columns["Regdate"].AllowDBNull = true;
                    
                }

                if (arDeleteTabIndex.Contains(3))
                {
                    Adpt_SocketRandomTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.SocketRandom_DeleteHistoryTableAdapter();

                    tblSocketRandomTW_DeleteHistory = Adpt_SocketRandomTW_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSocketRandomTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSocketRandomTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }

            }


            ScriptData_TWDataSetTableAdapters.SocketGroupTableAdapter Adt_SocketGroupTW = null;
            DataTable tblSocketGroupTW = null;
            ScriptData_TWDataSetTableAdapters.SocketGroup_HistoryTableAdapter Adt_SocketGroupTW_History = null;
            DataTable tblSocketGroupTW_History = null;
            ScriptData_TWDataSetTableAdapters.SocketGroup_DeleteHistoryTableAdapter Adpt_SocketGroupTW_DeleteHistory = null;
            DataTable tblSocketGroupTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(4) || arDeleteTabIndex.Contains(4))
            {
                Adt_SocketGroupTW = new ScriptData_TWDataSetTableAdapters.SocketGroupTableAdapter();

                tblSocketGroupTW = Adt_SocketGroupTW.GetData();

                tblSocketGroupTW.Columns["IndexKey"].AllowDBNull = true;
                tblSocketGroupTW.Columns["GroupID"].AllowDBNull = true;
                tblSocketGroupTW.Columns["Regdate"].AllowDBNull = true;
                
                if (arModifyTabIndex.Contains(4))
                {
                    Adt_SocketGroupTW_History = new ScriptData_TWDataSetTableAdapters.SocketGroup_HistoryTableAdapter();
                    tblSocketGroupTW_History = Adt_SocketGroupTW_History.GetData();

                    tblSocketGroupTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSocketGroupTW_History.Columns["GroupID"].AllowDBNull = true;
                    tblSocketGroupTW_History.Columns["Regdate"].AllowDBNull = true;
                    
                }
                if (arDeleteTabIndex.Contains(4))
                {
                    Adpt_SocketGroupTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.SocketGroup_DeleteHistoryTableAdapter();

                    tblSocketGroupTW_DeleteHistory = Adpt_SocketGroupTW_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSocketGroupTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSocketGroupTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_TWDataSetTableAdapters.SetItemTableAdapter Adt_SetItemTW = null;
            DataTable tblSetItemTW = null;
            ScriptData_TWDataSetTableAdapters.SetItem_HistoryTableAdapter Adt_SetItemTW_History = null;
            DataTable tblSetItemTW_History = null;
            ScriptData_TWDataSetTableAdapters.SetItem_DeleteHistoryTableAdapter Adpt_SetItemTW_DeleteHistory = null;
            DataTable tblSetItemTW_DeleteHistory = null;
            
            if (arModifyTabIndex.Contains(5) || arDeleteTabIndex.Contains(5))
            {
                Adt_SetItemTW = new ScriptData_TWDataSetTableAdapters.SetItemTableAdapter();
                tblSetItemTW = Adt_SetItemTW.GetData();
                tblSetItemTW.Columns["IndexKey"].AllowDBNull = true;
                tblSetItemTW.Columns["SetID"].AllowDBNull = true;
                tblSetItemTW.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(5))
                {
                    Adt_SetItemTW_History = new ScriptData_TWDataSetTableAdapters.SetItem_HistoryTableAdapter();
                    tblSetItemTW_History = Adt_SetItemTW_History.GetData();

                    tblSetItemTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSetItemTW_History.Columns["SetID"].AllowDBNull = true;
                    tblSetItemTW_History.Columns["Regdate"].AllowDBNull = true;
                }

                if (arDeleteTabIndex.Contains(5))
                {
                    Adpt_SetItemTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.SetItem_DeleteHistoryTableAdapter();
                    tblSetItemTW_DeleteHistory = Adpt_SetItemTW_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSetItemTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSetItemTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_TWDataSetTableAdapters.RandomBoxTableTableAdapter Adt_RandomBoxTableTW = null;
            DataTable tblRandomBoxTableTW = null;
            ScriptData_TWDataSetTableAdapters.RandomBoxTable_HistoryTableAdapter Adt_RandomBoxTableTW_History = null;
            DataTable tblRandomBoxTableTW_History = null;
            ScriptData_TWDataSetTableAdapters.RandomBoxTable_DeleteHistoryTableAdapter Adpt_RandomBoxTableTW_DeleteHistory = null;
            DataTable tblRandomBoxTableTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(6) || arDeleteTabIndex.Contains(6))
            {
                Adt_RandomBoxTableTW = new ScriptData_TWDataSetTableAdapters.RandomBoxTableTableAdapter();

                tblRandomBoxTableTW = Adt_RandomBoxTableTW.GetData();
                tblRandomBoxTableTW.Columns["IndexKey"].AllowDBNull = true;
                tblRandomBoxTableTW.Columns["BoxID"].AllowDBNull = true;
                tblRandomBoxTableTW.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(6))
                {
                    Adt_RandomBoxTableTW_History = new ScriptData_TWDataSetTableAdapters.RandomBoxTable_HistoryTableAdapter();
                    tblRandomBoxTableTW_History = Adt_RandomBoxTableTW_History.GetData();

                    tblRandomBoxTableTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblRandomBoxTableTW_History.Columns["BoxID"].AllowDBNull = true;
                    tblRandomBoxTableTW_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(6))
                {
                    Adpt_RandomBoxTableTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.RandomBoxTable_DeleteHistoryTableAdapter();

                    tblRandomBoxTableTW_DeleteHistory = Adpt_RandomBoxTableTW_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblRandomBoxTableTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblRandomBoxTableTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }


            ScriptData_TWDataSetTableAdapters.RandomItemGroupTableAdapter Adt_RandomItemGroupTW = null;
            DataTable tblRandomItemGroupTW = null;
            ScriptData_TWDataSetTableAdapters.RandomItemGroup_HistoryTableAdapter Adt_RandomItemGroupTW_History = null;
            DataTable tblRandomItemGroupTW_History = null;
            ScriptData_TWDataSetTableAdapters.RandomItemGroup_DeleteHistoryTableAdapter Adpt_RandomItemGroupTW_DeleteHistory = null;
            DataTable tblRandomItemGroupTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(7) || arDeleteTabIndex.Contains(7))
            {
                Adt_RandomItemGroupTW = new ScriptData_TWDataSetTableAdapters.RandomItemGroupTableAdapter();

                tblRandomItemGroupTW = Adt_RandomItemGroupTW.GetData();

                tblRandomItemGroupTW.Columns["IndexKey"].AllowDBNull = true;
                tblRandomItemGroupTW.Columns["Group ID"].AllowDBNull = true;
                tblRandomItemGroupTW.Columns["Regdate"].AllowDBNull = true;


                if (arModifyTabIndex.Contains(7))
                {
                    Adt_RandomItemGroupTW_History = new ScriptData_TWDataSetTableAdapters.RandomItemGroup_HistoryTableAdapter();

                    tblRandomItemGroupTW_History = Adt_RandomItemGroupTW_History.GetData();

                    tblRandomItemGroupTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblRandomItemGroupTW_History.Columns["Group ID"].AllowDBNull = true;
                    tblRandomItemGroupTW_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(7))
                {
                    Adpt_RandomItemGroupTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.RandomItemGroup_DeleteHistoryTableAdapter();

                    tblRandomItemGroupTW_DeleteHistory = Adpt_RandomItemGroupTW_DeleteHistory.GetData();
                    
                    for (int nTemp = 0; nTemp < tblRandomItemGroupTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblRandomItemGroupTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_TWDataSetTableAdapters.ExchangeTableTableAdapter Adt_ExchangeTableTW = null;
            DataTable tblExchangeTableTW = null;
            ScriptData_TWDataSetTableAdapters.ExchangeTable_HistoryTableAdapter Adt_ExchangeTableTW_History = null;
            DataTable tblExchangeTableTW_History = null;
            ScriptData_TWDataSetTableAdapters.ExchangeTable_DeleteHistoryTableAdapter Adpt_ExchangeTableTW_DeleteHistory = null;
            DataTable tblExchangeTableTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(8) || arDeleteTabIndex.Contains(8))
            {
                Adt_ExchangeTableTW = new ScriptData_TWDataSetTableAdapters.ExchangeTableTableAdapter();

                tblExchangeTableTW = Adt_ExchangeTableTW.GetData();
                tblExchangeTableTW.Columns["IndexKey"].AllowDBNull = true;
                tblExchangeTableTW.Columns["House_ID"].AllowDBNull = true;
                tblExchangeTableTW.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(8))
                {
                    Adt_ExchangeTableTW_History = new ScriptData_TWDataSetTableAdapters.ExchangeTable_HistoryTableAdapter();

                    tblExchangeTableTW_History = Adt_ExchangeTableTW_History.GetData();
                    tblExchangeTableTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblExchangeTableTW_History.Columns["House_ID"].AllowDBNull = true;
                    tblExchangeTableTW_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(8))
                {
                    Adpt_ExchangeTableTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.ExchangeTable_DeleteHistoryTableAdapter();

                    tblExchangeTableTW_DeleteHistory = Adpt_ExchangeTableTW_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblExchangeTableTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblExchangeTableTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_TWDataSetTableAdapters.ManufactureTableTableAdapter Adt_ManufactureTableTW = null;
            DataTable tblManufactureTableTW = null;
            ScriptData_TWDataSetTableAdapters.ManufactureTable_HistoryTableAdapter Adt_ManufactureTableTW_History = null;
            DataTable tblManufactureTableTW_History = null;
            ScriptData_TWDataSetTableAdapters.ManufactureTable_DeleteHistoryTableAdapter Adpt_ManufactureTableTW_DeleteHistory = null;
            DataTable tblManufactureTableTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(9) || arDeleteTabIndex.Contains(9))
            {
                Adt_ManufactureTableTW = new ScriptData_TWDataSetTableAdapters.ManufactureTableTableAdapter();

                tblManufactureTableTW = Adt_ManufactureTableTW.GetData();
                tblManufactureTableTW.Columns["IndexKey"].AllowDBNull = true;
                tblManufactureTableTW.Columns["Manufacture ID"].AllowDBNull = true;
                tblManufactureTableTW.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(9))
                {
                    Adt_ManufactureTableTW_History = new ScriptData_TWDataSetTableAdapters.ManufactureTable_HistoryTableAdapter();

                    tblManufactureTableTW_History = Adt_ManufactureTableTW_History.GetData();

                    tblManufactureTableTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblManufactureTableTW_History.Columns["Manufacture ID"].AllowDBNull = true;
                    tblManufactureTableTW_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(9))
                {
                    Adpt_ManufactureTableTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.ManufactureTable_DeleteHistoryTableAdapter();

                    tblManufactureTableTW_DeleteHistory = Adpt_ManufactureTableTW_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblManufactureTableTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblManufactureTableTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_TWDataSetTableAdapters.ManufactureResultGroupTableAdapter Adt_ManufactureResultGroupTW = null;
            DataTable tblManufactureResultGroupTW = null;
            ScriptData_TWDataSetTableAdapters.ManufactureResultGroup_HistoryTableAdapter Adt_ManufactureResultGroupTW_History = null;
            DataTable tblManufactureResultGroupTW_History = null;
            ScriptData_TWDataSetTableAdapters.ManufactureResultGroup_DeleteHistoryTableAdapter Adpt_ManufactureResultGroupTW_DeleteHistory = null;
            DataTable tblManufactureResultGroupTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(10) || arDeleteTabIndex.Contains(10))
            {
                Adt_ManufactureResultGroupTW = new ScriptData_TWDataSetTableAdapters.ManufactureResultGroupTableAdapter();

                tblManufactureResultGroupTW = Adt_ManufactureResultGroupTW.GetData();
                tblManufactureResultGroupTW.Columns["IndexKey"].AllowDBNull = true;
                tblManufactureResultGroupTW.Columns["Group ID"].AllowDBNull = true;
                tblManufactureResultGroupTW.Columns["Regdate"].AllowDBNull = true;
                                

                if (arModifyTabIndex.Contains(10))
                {
                    Adt_ManufactureResultGroupTW_History = new ScriptData_TWDataSetTableAdapters.ManufactureResultGroup_HistoryTableAdapter();

                    tblManufactureResultGroupTW_History = Adt_ManufactureResultGroupTW_History.GetData();

                    tblManufactureResultGroupTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblManufactureResultGroupTW_History.Columns["Group ID"].AllowDBNull = true;
                    tblManufactureResultGroupTW_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(10))
                {
                    Adpt_ManufactureResultGroupTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.ManufactureResultGroup_DeleteHistoryTableAdapter();

                    tblManufactureResultGroupTW_DeleteHistory = Adpt_ManufactureResultGroupTW_DeleteHistory.GetData();
                    for (int nTemp = 0; nTemp < tblManufactureResultGroupTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblManufactureResultGroupTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_TWDataSetTableAdapters.ManufactureVillageTableAdapter Adt_ManufactureVillageTW = null;
            DataTable tblManufactureVillageTW = null;
            ScriptData_TWDataSetTableAdapters.ManufactureVillage_HistoryTableAdapter Adt_ManufactureVillageTW_History = null;
            DataTable tblManufactureVillageTW_History = null;
            ScriptData_TWDataSetTableAdapters.ManufactureVillage_DeleteHistoryTableAdapter Adpt_ManufactureVillageTW_DeleteHistory = null;
            DataTable tblManufactureVillageTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(11) || arDeleteTabIndex.Contains(11))
            {
                Adt_ManufactureVillageTW = new ScriptData_TWDataSetTableAdapters.ManufactureVillageTableAdapter();

                tblManufactureVillageTW = Adt_ManufactureVillageTW.GetData();

                tblManufactureVillageTW.Columns["IndexKey"].AllowDBNull = true;
                tblManufactureVillageTW.Columns["Manufacture ID"].AllowDBNull = true;
                tblManufactureVillageTW.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(11))
                {
                    Adt_ManufactureVillageTW_History = new ScriptData_TWDataSetTableAdapters.ManufactureVillage_HistoryTableAdapter();

                    tblManufactureVillageTW_History = Adt_ManufactureVillageTW_History.GetData();

                    tblManufactureVillageTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblManufactureVillageTW_History.Columns["Manufacture ID"].AllowDBNull = true;
                    tblManufactureVillageTW_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(11))
                {
                    Adpt_ManufactureVillageTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.ManufactureVillage_DeleteHistoryTableAdapter();

                    tblManufactureVillageTW_DeleteHistory = Adpt_ManufactureVillageTW_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblManufactureVillageTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblManufactureVillageTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_TWDataSetTableAdapters.AttribEnchantItemTableAdapter Adt_AttribEnchantItemTW = null;
            DataTable tblAttribEnchantItemTW = null;
            ScriptData_TWDataSetTableAdapters.AttribEnchantItem_HistoryTableAdapter Adt_AttribEnchantItemTW_History = null;
            DataTable tblAttribEnchantItemTW_History = null;
            ScriptData_TWDataSetTableAdapters.AttribEnchantItem_DeleteHistoryTableAdapter Adpt_AttribEnchantItemTW_DeleteHistory = null;
            DataTable tblAttribEnchantItemTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(12) || arDeleteTabIndex.Contains(12))
            {
                Adt_AttribEnchantItemTW = new ScriptData_TWDataSetTableAdapters.AttribEnchantItemTableAdapter();

                tblAttribEnchantItemTW = Adt_AttribEnchantItemTW.GetData();

                tblAttribEnchantItemTW.Columns["IndexKey"].AllowDBNull = true;
                tblAttribEnchantItemTW.Columns["ExtraDamageType"].AllowDBNull = true;
                tblAttribEnchantItemTW.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(12))
                {
                    Adt_AttribEnchantItemTW_History = new ScriptData_TWDataSetTableAdapters.AttribEnchantItem_HistoryTableAdapter();

                    tblAttribEnchantItemTW_History = Adt_AttribEnchantItemTW_History.GetData();

                    tblAttribEnchantItemTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblAttribEnchantItemTW_History.Columns["ExtraDamageType"].AllowDBNull = true;
                    tblAttribEnchantItemTW_History.Columns["Regdate"].AllowDBNull = true;
                }

                if (arDeleteTabIndex.Contains(12))
                {
                    Adpt_AttribEnchantItemTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.AttribEnchantItem_DeleteHistoryTableAdapter();

                    tblAttribEnchantItemTW_DeleteHistory = Adpt_AttribEnchantItemTW_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblAttribEnchantItemTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblAttribEnchantItemTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_TWDataSetTableAdapters.AttribEnchantRequireTableAdapter Adt_AttribEnchantRequireTW = null;
            DataTable tblAttribEnchantRequireTW = null;
            ScriptData_TWDataSetTableAdapters.AttribEnchantRequire_HistoryTableAdapter Adt_AttribEnchantRequireTW_History = null;
            DataTable tblAttribEnchantRequireTW_History = null;
            ScriptData_TWDataSetTableAdapters.AttribEnchantRequire_DeleteHistoryTableAdapter Adpt_AttribEnchantRequireTW_DeleteHistory = null;
            DataTable tblAttribEnchantRequireTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(13) || arDeleteTabIndex.Contains(13))
            {
                Adt_AttribEnchantRequireTW = new ScriptData_TWDataSetTableAdapters.AttribEnchantRequireTableAdapter();

                tblAttribEnchantRequireTW = Adt_AttribEnchantRequireTW.GetData();
                tblAttribEnchantRequireTW.Columns["IndexKey"].AllowDBNull = true;
                tblAttribEnchantRequireTW.Columns["Enchant Type"].AllowDBNull = true;
                tblAttribEnchantRequireTW.Columns["Regdate"].AllowDBNull = true;

                                
                if (arModifyTabIndex.Contains(13))
                {
                    Adt_AttribEnchantRequireTW_History = new ScriptData_TWDataSetTableAdapters.AttribEnchantRequire_HistoryTableAdapter();

                    tblAttribEnchantRequireTW_History = Adt_AttribEnchantRequireTW_History.GetData();

                    tblAttribEnchantRequireTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblAttribEnchantRequireTW_History.Columns["Enchant Type"].AllowDBNull = true;
                    tblAttribEnchantRequireTW_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(13))
                {
                    Adpt_AttribEnchantRequireTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.AttribEnchantRequire_DeleteHistoryTableAdapter();

                    tblAttribEnchantRequireTW_DeleteHistory = Adpt_AttribEnchantRequireTW_DeleteHistory.GetData();
                    for (int nTemp = 0; nTemp < tblAttribEnchantRequireTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblAttribEnchantRequireTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }


            ScriptData_TWDataSetTableAdapters.NpcExtraAbilityTableAdapter Adt_NpcExtraAbilityTW = null;
            DataTable tblNpcExtraAbilityTW = null;
            ScriptData_TWDataSetTableAdapters.NpcExtraAbility_HistoryTableAdapter Adt_NpcExtraAbilityTW_History = null;
            DataTable tblNpcExtraAbilityTW_History = null;
            ScriptData_TWDataSetTableAdapters.NpcExtraAbility_DeleteHistoryTableAdapter Adpt_NpcExtraAbilityTW_DeleteHistory = null;
            DataTable tblNpcExtraAbilityTW_DeleteHistory = null;
            if (arModifyTabIndex.Contains(14) || arDeleteTabIndex.Contains(14))
            {
                Adt_NpcExtraAbilityTW = new ScriptData_TWDataSetTableAdapters.NpcExtraAbilityTableAdapter();

                tblNpcExtraAbilityTW = Adt_NpcExtraAbilityTW.GetData();

                tblNpcExtraAbilityTW.Columns["IndexKey"].AllowDBNull = true;
                tblNpcExtraAbilityTW.Columns["NPC_ABILITY_ID"].AllowDBNull = true;
                tblNpcExtraAbilityTW.Columns["Regdate"].AllowDBNull = true;
                
                if (arModifyTabIndex.Contains(14))
                {
                    Adt_NpcExtraAbilityTW_History = new ScriptData_TWDataSetTableAdapters.NpcExtraAbility_HistoryTableAdapter();

                    tblNpcExtraAbilityTW_History = Adt_NpcExtraAbilityTW_History.GetData();

                    tblNpcExtraAbilityTW_History.Columns["IndexKey"].AllowDBNull = true;
                    tblNpcExtraAbilityTW_History.Columns["NPC_ABILITY_ID"].AllowDBNull = true;
                    tblNpcExtraAbilityTW_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(14))
                {
                    Adpt_NpcExtraAbilityTW_DeleteHistory = new ScriptData_TWDataSetTableAdapters.NpcExtraAbility_DeleteHistoryTableAdapter();

                    tblNpcExtraAbilityTW_DeleteHistory = Adpt_NpcExtraAbilityTW_DeleteHistory.GetData();
                    
                    for (int nTemp = 0; nTemp < tblNpcExtraAbilityTW_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblNpcExtraAbilityTW_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }
            
            ///////////////////////////////////////////////////////////////////////////
            //홍콩버전
            ///////////////////////////////////////////////////////////////////////////

            ScriptData_HKDataSetTableAdapters.ItemTableAdapter Adt_ItemHK = null;
            DataTable tblItemHK = null;
            ScriptData_HKDataSetTableAdapters.Item_HistoryTableAdapter Adt_ItemHK_History = null;
            DataTable tblItemHK_History = null;
            ScriptData_HKDataSetTableAdapters.Item_DeleteHistoryTableAdapter Adpt_ItemHK_DeleteHistory = null;
            DataTable tblItemHK_DeleteHistory = null;
                       

            if (arModifyTabIndex.Contains(0) || arDeleteTabIndex.Contains(0))
            {
                Adt_ItemHK = new ScriptData_HKDataSetTableAdapters.ItemTableAdapter();
                tblItemHK = Adt_ItemHK.GetData();
                tblItemHK.Columns["IndexKey"].AllowDBNull = true;
                tblItemHK.Columns["ID"].AllowDBNull = true;
                tblItemHK.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(0))
                {
                    Adt_ItemHK_History = new ScriptData_HKDataSetTableAdapters.Item_HistoryTableAdapter();
                    tblItemHK_History = Adt_ItemHK_History.GetData();
                    tblItemHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblItemHK_History.Columns["ID"].AllowDBNull = true;
                    tblItemHK_History.Columns["Regdate"].AllowDBNull = true;

                }
                if (arDeleteTabIndex.Contains(0))
                {
                    Adpt_ItemHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.Item_DeleteHistoryTableAdapter();
                    tblItemHK_DeleteHistory = Adpt_ItemHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblItemHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblItemHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_HKDataSetTableAdapters.SpecialAbilityTableAdapter Adt_SpecialAbilityHK = null;
            ScriptData_HKDataSetTableAdapters.SpecialAbility_HistoryTableAdapter Adt_SpecialAbilityHK_History = null;
            ScriptData_HKDataSetTableAdapters.SpecialAbility_DeleteHistoryTableAdapter Adpt_SpecialAbilityHK_DeleteHistory = null;
            DataTable tblSpecialAbilityHK = null;
            DataTable tblSpecialAbilityHK_History = null;
            DataTable tblSpecialAbilityHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(1) || arDeleteTabIndex.Contains(1))
            {
                Adt_SpecialAbilityHK = new ScriptData_HKDataSetTableAdapters.SpecialAbilityTableAdapter();

                tblSpecialAbilityHK = Adt_SpecialAbilityHK.GetData();

                tblSpecialAbilityHK.Columns["IndexKey"].AllowDBNull = true;
                tblSpecialAbilityHK.Columns["ID"].AllowDBNull = true;
                tblSpecialAbilityHK.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(1))
                {
                    Adt_SpecialAbilityHK_History = new ScriptData_HKDataSetTableAdapters.SpecialAbility_HistoryTableAdapter();
                    tblSpecialAbilityHK_History = Adt_SpecialAbilityHK_History.GetData();

                    tblSpecialAbilityHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSpecialAbilityHK_History.Columns["ID"].AllowDBNull = true;
                    tblSpecialAbilityHK_History.Columns["Regdate"].AllowDBNull = true;

                }
                if (arDeleteTabIndex.Contains(1))
                {
                    Adpt_SpecialAbilityHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.SpecialAbility_DeleteHistoryTableAdapter();
                    tblSpecialAbilityHK_DeleteHistory = Adpt_SpecialAbilityHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSpecialAbilityHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSpecialAbilityHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_HKDataSetTableAdapters.SocketItemTableAdapter Adt_SocketItemHK = null;
            DataTable tblSocketItemHK = null;
            ScriptData_HKDataSetTableAdapters.SocketItem_HistoryTableAdapter Adt_SocketItemHK_History = null;
            DataTable tblSocketItemHK_History = null;
            ScriptData_HKDataSetTableAdapters.SocketItem_DeleteHistoryTableAdapter Adpt_SocketItemHK_DeleteHistory = null;
            DataTable tblSocketItemHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(2) || arDeleteTabIndex.Contains(2))
            {
                Adt_SocketItemHK = new ScriptData_HKDataSetTableAdapters.SocketItemTableAdapter();

                tblSocketItemHK = Adt_SocketItemHK.GetData();
                tblSocketItemHK.Columns["IndexKey"].AllowDBNull = true;
                tblSocketItemHK.Columns["ID"].AllowDBNull = true;
                tblSocketItemHK.Columns["Regdate"].AllowDBNull = true;


                if (arModifyTabIndex.Contains(2))
                {
                    Adt_SocketItemHK_History = new ScriptData_HKDataSetTableAdapters.SocketItem_HistoryTableAdapter();
                    tblSocketItemHK_History = Adt_SocketItemHK_History.GetData();
                    tblSocketItemHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSocketItemHK_History.Columns["ID"].AllowDBNull = true;
                    tblSocketItemHK_History.Columns["Regdate"].AllowDBNull = true;

                }
                if (arDeleteTabIndex.Contains(2))
                {
                    Adpt_SocketItemHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.SocketItem_DeleteHistoryTableAdapter();

                    tblSocketItemHK_DeleteHistory = Adpt_SocketItemHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSocketItemHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSocketItemHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_HKDataSetTableAdapters.SocketRandomTableAdapter Adt_SocketRandomHK = null;
            DataTable tblSocketRandomHK = null;
            ScriptData_HKDataSetTableAdapters.SocketRandom_HistoryTableAdapter Adt_SocketRandomHK_History = null;
            DataTable tblSocketRandomHK_History = null;
            ScriptData_HKDataSetTableAdapters.SocketRandom_DeleteHistoryTableAdapter Adpt_SocketRandomHK_DeleteHistory = null;
            DataTable tblSocketRandomHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(3) || arDeleteTabIndex.Contains(3))
            {
                Adt_SocketRandomHK = new ScriptData_HKDataSetTableAdapters.SocketRandomTableAdapter();
                tblSocketRandomHK = Adt_SocketRandomHK.GetData();

                tblSocketRandomHK.Columns["IndexKey"].AllowDBNull = true;
                tblSocketRandomHK.Columns["SocketDataType"].AllowDBNull = true;
                tblSocketRandomHK.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(3))
                {
                    Adt_SocketRandomHK_History = new ScriptData_HKDataSetTableAdapters.SocketRandom_HistoryTableAdapter();

                    tblSocketRandomHK_History = Adt_SocketRandomHK_History.GetData();

                    tblSocketRandomHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSocketRandomHK_History.Columns["SocketDataType"].AllowDBNull = true;
                    tblSocketRandomHK_History.Columns["Regdate"].AllowDBNull = true;

                }

                if (arDeleteTabIndex.Contains(3))
                {
                    Adpt_SocketRandomHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.SocketRandom_DeleteHistoryTableAdapter();

                    tblSocketRandomHK_DeleteHistory = Adpt_SocketRandomHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSocketRandomHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSocketRandomHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }

            }


            ScriptData_HKDataSetTableAdapters.SocketGroupTableAdapter Adt_SocketGroupHK = null;
            DataTable tblSocketGroupHK = null;
            ScriptData_HKDataSetTableAdapters.SocketGroup_HistoryTableAdapter Adt_SocketGroupHK_History = null;
            DataTable tblSocketGroupHK_History = null;
            ScriptData_HKDataSetTableAdapters.SocketGroup_DeleteHistoryTableAdapter Adpt_SocketGroupHK_DeleteHistory = null;
            DataTable tblSocketGroupHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(4) || arDeleteTabIndex.Contains(4))
            {
                Adt_SocketGroupHK = new ScriptData_HKDataSetTableAdapters.SocketGroupTableAdapter();

                tblSocketGroupHK = Adt_SocketGroupHK.GetData();

                tblSocketGroupHK.Columns["IndexKey"].AllowDBNull = true;
                tblSocketGroupHK.Columns["GroupID"].AllowDBNull = true;
                tblSocketGroupHK.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(4))
                {
                    Adt_SocketGroupHK_History = new ScriptData_HKDataSetTableAdapters.SocketGroup_HistoryTableAdapter();
                    tblSocketGroupHK_History = Adt_SocketGroupHK_History.GetData();

                    tblSocketGroupHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSocketGroupHK_History.Columns["GroupID"].AllowDBNull = true;
                    tblSocketGroupHK_History.Columns["Regdate"].AllowDBNull = true;

                }
                if (arDeleteTabIndex.Contains(4))
                {
                    Adpt_SocketGroupHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.SocketGroup_DeleteHistoryTableAdapter();

                    tblSocketGroupHK_DeleteHistory = Adpt_SocketGroupHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSocketGroupHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSocketGroupHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_HKDataSetTableAdapters.SetItemTableAdapter Adt_SetItemHK = null;
            DataTable tblSetItemHK = null;
            ScriptData_HKDataSetTableAdapters.SetItem_HistoryTableAdapter Adt_SetItemHK_History = null;
            DataTable tblSetItemHK_History = null;
            ScriptData_HKDataSetTableAdapters.SetItem_DeleteHistoryTableAdapter Adpt_SetItemHK_DeleteHistory = null;
            DataTable tblSetItemHK_DeleteHistory = null;

            if (arModifyTabIndex.Contains(5) || arDeleteTabIndex.Contains(5))
            {
                Adt_SetItemHK = new ScriptData_HKDataSetTableAdapters.SetItemTableAdapter();
                tblSetItemHK = Adt_SetItemHK.GetData();
                tblSetItemHK.Columns["IndexKey"].AllowDBNull = true;
                tblSetItemHK.Columns["SetID"].AllowDBNull = true;
                tblSetItemHK.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(5))
                {
                    Adt_SetItemHK_History = new ScriptData_HKDataSetTableAdapters.SetItem_HistoryTableAdapter();
                    tblSetItemHK_History = Adt_SetItemHK_History.GetData();

                    tblSetItemHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSetItemHK_History.Columns["SetID"].AllowDBNull = true;
                    tblSetItemHK_History.Columns["Regdate"].AllowDBNull = true;
                }

                if (arDeleteTabIndex.Contains(5))
                {
                    Adpt_SetItemHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.SetItem_DeleteHistoryTableAdapter();
                    tblSetItemHK_DeleteHistory = Adpt_SetItemHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSetItemHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSetItemHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_HKDataSetTableAdapters.RandomBoxTableTableAdapter Adt_RandomBoxTableHK = null;
            DataTable tblRandomBoxTableHK = null;
            ScriptData_HKDataSetTableAdapters.RandomBoxTable_HistoryTableAdapter Adt_RandomBoxTableHK_History = null;
            DataTable tblRandomBoxTableHK_History = null;
            ScriptData_HKDataSetTableAdapters.RandomBoxTable_DeleteHistoryTableAdapter Adpt_RandomBoxTableHK_DeleteHistory = null;
            DataTable tblRandomBoxTableHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(6) || arDeleteTabIndex.Contains(6))
            {
                Adt_RandomBoxTableHK = new ScriptData_HKDataSetTableAdapters.RandomBoxTableTableAdapter();

                tblRandomBoxTableHK = Adt_RandomBoxTableHK.GetData();
                tblRandomBoxTableHK.Columns["IndexKey"].AllowDBNull = true;
                tblRandomBoxTableHK.Columns["BoxID"].AllowDBNull = true;
                tblRandomBoxTableHK.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(6))
                {
                    Adt_RandomBoxTableHK_History = new ScriptData_HKDataSetTableAdapters.RandomBoxTable_HistoryTableAdapter();
                    tblRandomBoxTableHK_History = Adt_RandomBoxTableHK_History.GetData();

                    tblRandomBoxTableHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblRandomBoxTableHK_History.Columns["BoxID"].AllowDBNull = true;
                    tblRandomBoxTableHK_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(6))
                {
                    Adpt_RandomBoxTableHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.RandomBoxTable_DeleteHistoryTableAdapter();

                    tblRandomBoxTableHK_DeleteHistory = Adpt_RandomBoxTableHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblRandomBoxTableHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblRandomBoxTableHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }


            ScriptData_HKDataSetTableAdapters.RandomItemGroupTableAdapter Adt_RandomItemGroupHK = null;
            DataTable tblRandomItemGroupHK = null;
            ScriptData_HKDataSetTableAdapters.RandomItemGroup_HistoryTableAdapter Adt_RandomItemGroupHK_History = null;
            DataTable tblRandomItemGroupHK_History = null;
            ScriptData_HKDataSetTableAdapters.RandomItemGroup_DeleteHistoryTableAdapter Adpt_RandomItemGroupHK_DeleteHistory = null;
            DataTable tblRandomItemGroupHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(7) || arDeleteTabIndex.Contains(7))
            {
                Adt_RandomItemGroupHK = new ScriptData_HKDataSetTableAdapters.RandomItemGroupTableAdapter();

                tblRandomItemGroupHK = Adt_RandomItemGroupHK.GetData();

                tblRandomItemGroupHK.Columns["IndexKey"].AllowDBNull = true;
                tblRandomItemGroupHK.Columns["Group ID"].AllowDBNull = true;
                tblRandomItemGroupHK.Columns["Regdate"].AllowDBNull = true;


                if (arModifyTabIndex.Contains(7))
                {
                    Adt_RandomItemGroupHK_History = new ScriptData_HKDataSetTableAdapters.RandomItemGroup_HistoryTableAdapter();

                    tblRandomItemGroupHK_History = Adt_RandomItemGroupHK_History.GetData();

                    tblRandomItemGroupHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblRandomItemGroupHK_History.Columns["Group ID"].AllowDBNull = true;
                    tblRandomItemGroupHK_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(7))
                {
                    Adpt_RandomItemGroupHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.RandomItemGroup_DeleteHistoryTableAdapter();

                    tblRandomItemGroupHK_DeleteHistory = Adpt_RandomItemGroupHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblRandomItemGroupHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblRandomItemGroupHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_HKDataSetTableAdapters.ExchangeTableTableAdapter Adt_ExchangeTableHK = null;
            DataTable tblExchangeTableHK = null;
            ScriptData_HKDataSetTableAdapters.ExchangeTable_HistoryTableAdapter Adt_ExchangeTableHK_History = null;
            DataTable tblExchangeTableHK_History = null;
            ScriptData_HKDataSetTableAdapters.ExchangeTable_DeleteHistoryTableAdapter Adpt_ExchangeTableHK_DeleteHistory = null;
            DataTable tblExchangeTableHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(8) || arDeleteTabIndex.Contains(8))
            {
                Adt_ExchangeTableHK = new ScriptData_HKDataSetTableAdapters.ExchangeTableTableAdapter();

                tblExchangeTableHK = Adt_ExchangeTableHK.GetData();
                tblExchangeTableHK.Columns["IndexKey"].AllowDBNull = true;
                tblExchangeTableHK.Columns["House_ID"].AllowDBNull = true;
                tblExchangeTableHK.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(8))
                {
                    Adt_ExchangeTableHK_History = new ScriptData_HKDataSetTableAdapters.ExchangeTable_HistoryTableAdapter();

                    tblExchangeTableHK_History = Adt_ExchangeTableHK_History.GetData();
                    tblExchangeTableHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblExchangeTableHK_History.Columns["House_ID"].AllowDBNull = true;
                    tblExchangeTableHK_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(8))
                {
                    Adpt_ExchangeTableHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.ExchangeTable_DeleteHistoryTableAdapter();

                    tblExchangeTableHK_DeleteHistory = Adpt_ExchangeTableHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblExchangeTableHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblExchangeTableHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_HKDataSetTableAdapters.ManufactureTableTableAdapter Adt_ManufactureTableHK = null;
            DataTable tblManufactureTableHK = null;
            ScriptData_HKDataSetTableAdapters.ManufactureTable_HistoryTableAdapter Adt_ManufactureTableHK_History = null;
            DataTable tblManufactureTableHK_History = null;
            ScriptData_HKDataSetTableAdapters.ManufactureTable_DeleteHistoryTableAdapter Adpt_ManufactureTableHK_DeleteHistory = null;
            DataTable tblManufactureTableHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(9) || arDeleteTabIndex.Contains(9))
            {
                Adt_ManufactureTableHK = new ScriptData_HKDataSetTableAdapters.ManufactureTableTableAdapter();

                tblManufactureTableHK = Adt_ManufactureTableHK.GetData();
                tblManufactureTableHK.Columns["IndexKey"].AllowDBNull = true;
                tblManufactureTableHK.Columns["Manufacture ID"].AllowDBNull = true;
                tblManufactureTableHK.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(9))
                {
                    Adt_ManufactureTableHK_History = new ScriptData_HKDataSetTableAdapters.ManufactureTable_HistoryTableAdapter();

                    tblManufactureTableHK_History = Adt_ManufactureTableHK_History.GetData();

                    tblManufactureTableHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblManufactureTableHK_History.Columns["Manufacture ID"].AllowDBNull = true;
                    tblManufactureTableHK_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(9))
                {
                    Adpt_ManufactureTableHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.ManufactureTable_DeleteHistoryTableAdapter();

                    tblManufactureTableHK_DeleteHistory = Adpt_ManufactureTableHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblManufactureTableHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblManufactureTableHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_HKDataSetTableAdapters.ManufactureResultGroupTableAdapter Adt_ManufactureResultGroupHK = null;
            DataTable tblManufactureResultGroupHK = null;
            ScriptData_HKDataSetTableAdapters.ManufactureResultGroup_HistoryTableAdapter Adt_ManufactureResultGroupHK_History = null;
            DataTable tblManufactureResultGroupHK_History = null;
            ScriptData_HKDataSetTableAdapters.ManufactureResultGroup_DeleteHistoryTableAdapter Adpt_ManufactureResultGroupHK_DeleteHistory = null;
            DataTable tblManufactureResultGroupHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(10) || arDeleteTabIndex.Contains(10))
            {
                Adt_ManufactureResultGroupHK = new ScriptData_HKDataSetTableAdapters.ManufactureResultGroupTableAdapter();

                tblManufactureResultGroupHK = Adt_ManufactureResultGroupHK.GetData();
                tblManufactureResultGroupHK.Columns["IndexKey"].AllowDBNull = true;
                tblManufactureResultGroupHK.Columns["Group ID"].AllowDBNull = true;
                tblManufactureResultGroupHK.Columns["Regdate"].AllowDBNull = true;


                if (arModifyTabIndex.Contains(10))
                {
                    Adt_ManufactureResultGroupHK_History = new ScriptData_HKDataSetTableAdapters.ManufactureResultGroup_HistoryTableAdapter();

                    tblManufactureResultGroupHK_History = Adt_ManufactureResultGroupHK_History.GetData();

                    tblManufactureResultGroupHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblManufactureResultGroupHK_History.Columns["Group ID"].AllowDBNull = true;
                    tblManufactureResultGroupHK_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(10))
                {
                    Adpt_ManufactureResultGroupHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.ManufactureResultGroup_DeleteHistoryTableAdapter();

                    tblManufactureResultGroupHK_DeleteHistory = Adpt_ManufactureResultGroupHK_DeleteHistory.GetData();
                    for (int nTemp = 0; nTemp < tblManufactureResultGroupHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblManufactureResultGroupHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_HKDataSetTableAdapters.ManufactureVillageTableAdapter Adt_ManufactureVillageHK = null;
            DataTable tblManufactureVillageHK = null;
            ScriptData_HKDataSetTableAdapters.ManufactureVillage_HistoryTableAdapter Adt_ManufactureVillageHK_History = null;
            DataTable tblManufactureVillageHK_History = null;
            ScriptData_HKDataSetTableAdapters.ManufactureVillage_DeleteHistoryTableAdapter Adpt_ManufactureVillageHK_DeleteHistory = null;
            DataTable tblManufactureVillageHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(11) || arDeleteTabIndex.Contains(11))
            {
                Adt_ManufactureVillageHK = new ScriptData_HKDataSetTableAdapters.ManufactureVillageTableAdapter();

                tblManufactureVillageHK = Adt_ManufactureVillageHK.GetData();

                tblManufactureVillageHK.Columns["IndexKey"].AllowDBNull = true;
                tblManufactureVillageHK.Columns["Manufacture ID"].AllowDBNull = true;
                tblManufactureVillageHK.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(11))
                {
                    Adt_ManufactureVillageHK_History = new ScriptData_HKDataSetTableAdapters.ManufactureVillage_HistoryTableAdapter();

                    tblManufactureVillageHK_History = Adt_ManufactureVillageHK_History.GetData();

                    tblManufactureVillageHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblManufactureVillageHK_History.Columns["Manufacture ID"].AllowDBNull = true;
                    tblManufactureVillageHK_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(11))
                {
                    Adpt_ManufactureVillageHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.ManufactureVillage_DeleteHistoryTableAdapter();

                    tblManufactureVillageHK_DeleteHistory = Adpt_ManufactureVillageHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblManufactureVillageHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblManufactureVillageHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_HKDataSetTableAdapters.AttribEnchantItemTableAdapter Adt_AttribEnchantItemHK = null;
            DataTable tblAttribEnchantItemHK = null;
            ScriptData_HKDataSetTableAdapters.AttribEnchantItem_HistoryTableAdapter Adt_AttribEnchantItemHK_History = null;
            DataTable tblAttribEnchantItemHK_History = null;
            ScriptData_HKDataSetTableAdapters.AttribEnchantItem_DeleteHistoryTableAdapter Adpt_AttribEnchantItemHK_DeleteHistory = null;
            DataTable tblAttribEnchantItemHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(12) || arDeleteTabIndex.Contains(12))
            {
                Adt_AttribEnchantItemHK = new ScriptData_HKDataSetTableAdapters.AttribEnchantItemTableAdapter();

                tblAttribEnchantItemHK = Adt_AttribEnchantItemHK.GetData();

                tblAttribEnchantItemHK.Columns["IndexKey"].AllowDBNull = true;
                tblAttribEnchantItemHK.Columns["ExtraDamageType"].AllowDBNull = true;
                tblAttribEnchantItemHK.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(12))
                {
                    Adt_AttribEnchantItemHK_History = new ScriptData_HKDataSetTableAdapters.AttribEnchantItem_HistoryTableAdapter();

                    tblAttribEnchantItemHK_History = Adt_AttribEnchantItemHK_History.GetData();

                    tblAttribEnchantItemHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblAttribEnchantItemHK_History.Columns["ExtraDamageType"].AllowDBNull = true;
                    tblAttribEnchantItemHK_History.Columns["Regdate"].AllowDBNull = true;
                }

                if (arDeleteTabIndex.Contains(12))
                {
                    Adpt_AttribEnchantItemHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.AttribEnchantItem_DeleteHistoryTableAdapter();

                    tblAttribEnchantItemHK_DeleteHistory = Adpt_AttribEnchantItemHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblAttribEnchantItemHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblAttribEnchantItemHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_HKDataSetTableAdapters.AttribEnchantRequireTableAdapter Adt_AttribEnchantRequireHK = null;
            DataTable tblAttribEnchantRequireHK = null;
            ScriptData_HKDataSetTableAdapters.AttribEnchantRequire_HistoryTableAdapter Adt_AttribEnchantRequireHK_History = null;
            DataTable tblAttribEnchantRequireHK_History = null;
            ScriptData_HKDataSetTableAdapters.AttribEnchantRequire_DeleteHistoryTableAdapter Adpt_AttribEnchantRequireHK_DeleteHistory = null;
            DataTable tblAttribEnchantRequireHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(13) || arDeleteTabIndex.Contains(13))
            {
                Adt_AttribEnchantRequireHK = new ScriptData_HKDataSetTableAdapters.AttribEnchantRequireTableAdapter();

                tblAttribEnchantRequireHK = Adt_AttribEnchantRequireHK.GetData();
                tblAttribEnchantRequireHK.Columns["IndexKey"].AllowDBNull = true;
                tblAttribEnchantRequireHK.Columns["Enchant Type"].AllowDBNull = true;
                tblAttribEnchantRequireHK.Columns["Regdate"].AllowDBNull = true;


                if (arModifyTabIndex.Contains(13))
                {
                    Adt_AttribEnchantRequireHK_History = new ScriptData_HKDataSetTableAdapters.AttribEnchantRequire_HistoryTableAdapter();

                    tblAttribEnchantRequireHK_History = Adt_AttribEnchantRequireHK_History.GetData();

                    tblAttribEnchantRequireHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblAttribEnchantRequireHK_History.Columns["Enchant Type"].AllowDBNull = true;
                    tblAttribEnchantRequireHK_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(13))
                {
                    Adpt_AttribEnchantRequireHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.AttribEnchantRequire_DeleteHistoryTableAdapter();

                    tblAttribEnchantRequireHK_DeleteHistory = Adpt_AttribEnchantRequireHK_DeleteHistory.GetData();
                    for (int nTemp = 0; nTemp < tblAttribEnchantRequireHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblAttribEnchantRequireHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }


            ScriptData_HKDataSetTableAdapters.NpcExtraAbilityTableAdapter Adt_NpcExtraAbilityHK = null;
            DataTable tblNpcExtraAbilityHK = null;
            ScriptData_HKDataSetTableAdapters.NpcExtraAbility_HistoryTableAdapter Adt_NpcExtraAbilityHK_History = null;
            DataTable tblNpcExtraAbilityHK_History = null;
            ScriptData_HKDataSetTableAdapters.NpcExtraAbility_DeleteHistoryTableAdapter Adpt_NpcExtraAbilityHK_DeleteHistory = null;
            DataTable tblNpcExtraAbilityHK_DeleteHistory = null;
            if (arModifyTabIndex.Contains(14) || arDeleteTabIndex.Contains(14))
            {
                Adt_NpcExtraAbilityHK = new ScriptData_HKDataSetTableAdapters.NpcExtraAbilityTableAdapter();

                tblNpcExtraAbilityHK = Adt_NpcExtraAbilityHK.GetData();

                tblNpcExtraAbilityHK.Columns["IndexKey"].AllowDBNull = true;
                tblNpcExtraAbilityHK.Columns["NPC_ABILITY_ID"].AllowDBNull = true;
                tblNpcExtraAbilityHK.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(14))
                {
                    Adt_NpcExtraAbilityHK_History = new ScriptData_HKDataSetTableAdapters.NpcExtraAbility_HistoryTableAdapter();

                    tblNpcExtraAbilityHK_History = Adt_NpcExtraAbilityHK_History.GetData();

                    tblNpcExtraAbilityHK_History.Columns["IndexKey"].AllowDBNull = true;
                    tblNpcExtraAbilityHK_History.Columns["NPC_ABILITY_ID"].AllowDBNull = true;
                    tblNpcExtraAbilityHK_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(14))
                {
                    Adpt_NpcExtraAbilityHK_DeleteHistory = new ScriptData_HKDataSetTableAdapters.NpcExtraAbility_DeleteHistoryTableAdapter();

                    tblNpcExtraAbilityHK_DeleteHistory = Adpt_NpcExtraAbilityHK_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblNpcExtraAbilityHK_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblNpcExtraAbilityHK_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }


            ///////////////////////////////////////////////////////////////////////////
            //일본버전
            ///////////////////////////////////////////////////////////////////////////

            ScriptData_JPDataSetTableAdapters.ItemTableAdapter Adt_ItemJP = null;
            DataTable tblItemJP = null;
            ScriptData_JPDataSetTableAdapters.Item_HistoryTableAdapter Adt_ItemJP_History = null;
            DataTable tblItemJP_History = null;
            ScriptData_JPDataSetTableAdapters.Item_DeleteHistoryTableAdapter Adpt_ItemJP_DeleteHistory = null;
            DataTable tblItemJP_DeleteHistory = null;


            if (arModifyTabIndex.Contains(0) || arDeleteTabIndex.Contains(0))
            {
                Adt_ItemJP = new ScriptData_JPDataSetTableAdapters.ItemTableAdapter();
                tblItemJP = Adt_ItemJP.GetData();
                tblItemJP.Columns["IndexKey"].AllowDBNull = true;
                tblItemJP.Columns["ID"].AllowDBNull = true;
                tblItemJP.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(0))
                {
                    Adt_ItemJP_History = new ScriptData_JPDataSetTableAdapters.Item_HistoryTableAdapter();
                    tblItemJP_History = Adt_ItemJP_History.GetData();
                    tblItemJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblItemJP_History.Columns["ID"].AllowDBNull = true;
                    tblItemJP_History.Columns["Regdate"].AllowDBNull = true;

                }
                if (arDeleteTabIndex.Contains(0))
                {
                    Adpt_ItemJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.Item_DeleteHistoryTableAdapter();
                    tblItemJP_DeleteHistory = Adpt_ItemJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblItemJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblItemJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_JPDataSetTableAdapters.SpecialAbilityTableAdapter Adt_SpecialAbilityJP = null;
            ScriptData_JPDataSetTableAdapters.SpecialAbility_HistoryTableAdapter Adt_SpecialAbilityJP_History = null;
            ScriptData_JPDataSetTableAdapters.SpecialAbility_DeleteHistoryTableAdapter Adpt_SpecialAbilityJP_DeleteHistory = null;
            DataTable tblSpecialAbilityJP = null;
            DataTable tblSpecialAbilityJP_History = null;
            DataTable tblSpecialAbilityJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(1) || arDeleteTabIndex.Contains(1))
            {
                Adt_SpecialAbilityJP = new ScriptData_JPDataSetTableAdapters.SpecialAbilityTableAdapter();

                tblSpecialAbilityJP = Adt_SpecialAbilityJP.GetData();

                tblSpecialAbilityJP.Columns["IndexKey"].AllowDBNull = true;
                tblSpecialAbilityJP.Columns["ID"].AllowDBNull = true;
                tblSpecialAbilityJP.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(1))
                {
                    Adt_SpecialAbilityJP_History = new ScriptData_JPDataSetTableAdapters.SpecialAbility_HistoryTableAdapter();
                    tblSpecialAbilityJP_History = Adt_SpecialAbilityJP_History.GetData();

                    tblSpecialAbilityJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSpecialAbilityJP_History.Columns["ID"].AllowDBNull = true;
                    tblSpecialAbilityJP_History.Columns["Regdate"].AllowDBNull = true;

                }
                if (arDeleteTabIndex.Contains(1))
                {
                    Adpt_SpecialAbilityJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.SpecialAbility_DeleteHistoryTableAdapter();
                    tblSpecialAbilityJP_DeleteHistory = Adpt_SpecialAbilityJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSpecialAbilityJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSpecialAbilityJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_JPDataSetTableAdapters.SocketItemTableAdapter Adt_SocketItemJP = null;
            DataTable tblSocketItemJP = null;
            ScriptData_JPDataSetTableAdapters.SocketItem_HistoryTableAdapter Adt_SocketItemJP_History = null;
            DataTable tblSocketItemJP_History = null;
            ScriptData_JPDataSetTableAdapters.SocketItem_DeleteHistoryTableAdapter Adpt_SocketItemJP_DeleteHistory = null;
            DataTable tblSocketItemJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(2) || arDeleteTabIndex.Contains(2))
            {
                Adt_SocketItemJP = new ScriptData_JPDataSetTableAdapters.SocketItemTableAdapter();

                tblSocketItemJP = Adt_SocketItemJP.GetData();
                tblSocketItemJP.Columns["IndexKey"].AllowDBNull = true;
                tblSocketItemJP.Columns["ID"].AllowDBNull = true;
                tblSocketItemJP.Columns["Regdate"].AllowDBNull = true;


                if (arModifyTabIndex.Contains(2))
                {
                    Adt_SocketItemJP_History = new ScriptData_JPDataSetTableAdapters.SocketItem_HistoryTableAdapter();
                    tblSocketItemJP_History = Adt_SocketItemJP_History.GetData();
                    tblSocketItemJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSocketItemJP_History.Columns["ID"].AllowDBNull = true;
                    tblSocketItemJP_History.Columns["Regdate"].AllowDBNull = true;

                }
                if (arDeleteTabIndex.Contains(2))
                {
                    Adpt_SocketItemJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.SocketItem_DeleteHistoryTableAdapter();

                    tblSocketItemJP_DeleteHistory = Adpt_SocketItemJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSocketItemJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSocketItemJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_JPDataSetTableAdapters.SocketRandomTableAdapter Adt_SocketRandomJP = null;
            DataTable tblSocketRandomJP = null;
            ScriptData_JPDataSetTableAdapters.SocketRandom_HistoryTableAdapter Adt_SocketRandomJP_History = null;
            DataTable tblSocketRandomJP_History = null;
            ScriptData_JPDataSetTableAdapters.SocketRandom_DeleteHistoryTableAdapter Adpt_SocketRandomJP_DeleteHistory = null;
            DataTable tblSocketRandomJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(3) || arDeleteTabIndex.Contains(3))
            {
                Adt_SocketRandomJP = new ScriptData_JPDataSetTableAdapters.SocketRandomTableAdapter();
                tblSocketRandomJP = Adt_SocketRandomJP.GetData();

                tblSocketRandomJP.Columns["IndexKey"].AllowDBNull = true;
                tblSocketRandomJP.Columns["SocketDataType"].AllowDBNull = true;
                tblSocketRandomJP.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(3))
                {
                    Adt_SocketRandomJP_History = new ScriptData_JPDataSetTableAdapters.SocketRandom_HistoryTableAdapter();

                    tblSocketRandomJP_History = Adt_SocketRandomJP_History.GetData();

                    tblSocketRandomJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSocketRandomJP_History.Columns["SocketDataType"].AllowDBNull = true;
                    tblSocketRandomJP_History.Columns["Regdate"].AllowDBNull = true;

                }

                if (arDeleteTabIndex.Contains(3))
                {
                    Adpt_SocketRandomJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.SocketRandom_DeleteHistoryTableAdapter();

                    tblSocketRandomJP_DeleteHistory = Adpt_SocketRandomJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSocketRandomJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSocketRandomJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }

            }


            ScriptData_JPDataSetTableAdapters.SocketGroupTableAdapter Adt_SocketGroupJP = null;
            DataTable tblSocketGroupJP = null;
            ScriptData_JPDataSetTableAdapters.SocketGroup_HistoryTableAdapter Adt_SocketGroupJP_History = null;
            DataTable tblSocketGroupJP_History = null;
            ScriptData_JPDataSetTableAdapters.SocketGroup_DeleteHistoryTableAdapter Adpt_SocketGroupJP_DeleteHistory = null;
            DataTable tblSocketGroupJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(4) || arDeleteTabIndex.Contains(4))
            {
                Adt_SocketGroupJP = new ScriptData_JPDataSetTableAdapters.SocketGroupTableAdapter();

                tblSocketGroupJP = Adt_SocketGroupJP.GetData();

                tblSocketGroupJP.Columns["IndexKey"].AllowDBNull = true;
                tblSocketGroupJP.Columns["GroupID"].AllowDBNull = true;
                tblSocketGroupJP.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(4))
                {
                    Adt_SocketGroupJP_History = new ScriptData_JPDataSetTableAdapters.SocketGroup_HistoryTableAdapter();
                    tblSocketGroupJP_History = Adt_SocketGroupJP_History.GetData();

                    tblSocketGroupJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSocketGroupJP_History.Columns["GroupID"].AllowDBNull = true;
                    tblSocketGroupJP_History.Columns["Regdate"].AllowDBNull = true;

                }
                if (arDeleteTabIndex.Contains(4))
                {
                    Adpt_SocketGroupJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.SocketGroup_DeleteHistoryTableAdapter();

                    tblSocketGroupJP_DeleteHistory = Adpt_SocketGroupJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSocketGroupJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSocketGroupJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_JPDataSetTableAdapters.SetItemTableAdapter Adt_SetItemJP = null;
            DataTable tblSetItemJP = null;
            ScriptData_JPDataSetTableAdapters.SetItem_HistoryTableAdapter Adt_SetItemJP_History = null;
            DataTable tblSetItemJP_History = null;
            ScriptData_JPDataSetTableAdapters.SetItem_DeleteHistoryTableAdapter Adpt_SetItemJP_DeleteHistory = null;
            DataTable tblSetItemJP_DeleteHistory = null;

            if (arModifyTabIndex.Contains(5) || arDeleteTabIndex.Contains(5))
            {
                Adt_SetItemJP = new ScriptData_JPDataSetTableAdapters.SetItemTableAdapter();
                tblSetItemJP = Adt_SetItemJP.GetData();
                tblSetItemJP.Columns["IndexKey"].AllowDBNull = true;
                tblSetItemJP.Columns["SetID"].AllowDBNull = true;
                tblSetItemJP.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(5))
                {
                    Adt_SetItemJP_History = new ScriptData_JPDataSetTableAdapters.SetItem_HistoryTableAdapter();
                    tblSetItemJP_History = Adt_SetItemJP_History.GetData();

                    tblSetItemJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblSetItemJP_History.Columns["SetID"].AllowDBNull = true;
                    tblSetItemJP_History.Columns["Regdate"].AllowDBNull = true;
                }

                if (arDeleteTabIndex.Contains(5))
                {
                    Adpt_SetItemJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.SetItem_DeleteHistoryTableAdapter();
                    tblSetItemJP_DeleteHistory = Adpt_SetItemJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblSetItemJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblSetItemJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_JPDataSetTableAdapters.RandomBoxTableTableAdapter Adt_RandomBoxTableJP = null;
            DataTable tblRandomBoxTableJP = null;
            ScriptData_JPDataSetTableAdapters.RandomBoxTable_HistoryTableAdapter Adt_RandomBoxTableJP_History = null;
            DataTable tblRandomBoxTableJP_History = null;
            ScriptData_JPDataSetTableAdapters.RandomBoxTable_DeleteHistoryTableAdapter Adpt_RandomBoxTableJP_DeleteHistory = null;
            DataTable tblRandomBoxTableJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(6) || arDeleteTabIndex.Contains(6))
            {
                Adt_RandomBoxTableJP = new ScriptData_JPDataSetTableAdapters.RandomBoxTableTableAdapter();

                tblRandomBoxTableJP = Adt_RandomBoxTableJP.GetData();
                tblRandomBoxTableJP.Columns["IndexKey"].AllowDBNull = true;
                tblRandomBoxTableJP.Columns["BoxID"].AllowDBNull = true;
                tblRandomBoxTableJP.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(6))
                {
                    Adt_RandomBoxTableJP_History = new ScriptData_JPDataSetTableAdapters.RandomBoxTable_HistoryTableAdapter();
                    tblRandomBoxTableJP_History = Adt_RandomBoxTableJP_History.GetData();

                    tblRandomBoxTableJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblRandomBoxTableJP_History.Columns["BoxID"].AllowDBNull = true;
                    tblRandomBoxTableJP_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(6))
                {
                    Adpt_RandomBoxTableJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.RandomBoxTable_DeleteHistoryTableAdapter();

                    tblRandomBoxTableJP_DeleteHistory = Adpt_RandomBoxTableJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblRandomBoxTableJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblRandomBoxTableJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }


            ScriptData_JPDataSetTableAdapters.RandomItemGroupTableAdapter Adt_RandomItemGroupJP = null;
            DataTable tblRandomItemGroupJP = null;
            ScriptData_JPDataSetTableAdapters.RandomItemGroup_HistoryTableAdapter Adt_RandomItemGroupJP_History = null;
            DataTable tblRandomItemGroupJP_History = null;
            ScriptData_JPDataSetTableAdapters.RandomItemGroup_DeleteHistoryTableAdapter Adpt_RandomItemGroupJP_DeleteHistory = null;
            DataTable tblRandomItemGroupJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(7) || arDeleteTabIndex.Contains(7))
            {
                Adt_RandomItemGroupJP = new ScriptData_JPDataSetTableAdapters.RandomItemGroupTableAdapter();

                tblRandomItemGroupJP = Adt_RandomItemGroupJP.GetData();

                tblRandomItemGroupJP.Columns["IndexKey"].AllowDBNull = true;
                tblRandomItemGroupJP.Columns["Group ID"].AllowDBNull = true;
                tblRandomItemGroupJP.Columns["Regdate"].AllowDBNull = true;


                if (arModifyTabIndex.Contains(7))
                {
                    Adt_RandomItemGroupJP_History = new ScriptData_JPDataSetTableAdapters.RandomItemGroup_HistoryTableAdapter();

                    tblRandomItemGroupJP_History = Adt_RandomItemGroupJP_History.GetData();

                    tblRandomItemGroupJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblRandomItemGroupJP_History.Columns["Group ID"].AllowDBNull = true;
                    tblRandomItemGroupJP_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(7))
                {
                    Adpt_RandomItemGroupJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.RandomItemGroup_DeleteHistoryTableAdapter();

                    tblRandomItemGroupJP_DeleteHistory = Adpt_RandomItemGroupJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblRandomItemGroupJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblRandomItemGroupJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_JPDataSetTableAdapters.ExchangeTableTableAdapter Adt_ExchangeTableJP = null;
            DataTable tblExchangeTableJP = null;
            ScriptData_JPDataSetTableAdapters.ExchangeTable_HistoryTableAdapter Adt_ExchangeTableJP_History = null;
            DataTable tblExchangeTableJP_History = null;
            ScriptData_JPDataSetTableAdapters.ExchangeTable_DeleteHistoryTableAdapter Adpt_ExchangeTableJP_DeleteHistory = null;
            DataTable tblExchangeTableJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(8) || arDeleteTabIndex.Contains(8))
            {
                Adt_ExchangeTableJP = new ScriptData_JPDataSetTableAdapters.ExchangeTableTableAdapter();

                tblExchangeTableJP = Adt_ExchangeTableJP.GetData();
                tblExchangeTableJP.Columns["IndexKey"].AllowDBNull = true;
                tblExchangeTableJP.Columns["House_ID"].AllowDBNull = true;
                tblExchangeTableJP.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(8))
                {
                    Adt_ExchangeTableJP_History = new ScriptData_JPDataSetTableAdapters.ExchangeTable_HistoryTableAdapter();

                    tblExchangeTableJP_History = Adt_ExchangeTableJP_History.GetData();
                    tblExchangeTableJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblExchangeTableJP_History.Columns["House_ID"].AllowDBNull = true;
                    tblExchangeTableJP_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(8))
                {
                    Adpt_ExchangeTableJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.ExchangeTable_DeleteHistoryTableAdapter();

                    tblExchangeTableJP_DeleteHistory = Adpt_ExchangeTableJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblExchangeTableJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblExchangeTableJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_JPDataSetTableAdapters.ManufactureTableTableAdapter Adt_ManufactureTableJP = null;
            DataTable tblManufactureTableJP = null;
            ScriptData_JPDataSetTableAdapters.ManufactureTable_HistoryTableAdapter Adt_ManufactureTableJP_History = null;
            DataTable tblManufactureTableJP_History = null;
            ScriptData_JPDataSetTableAdapters.ManufactureTable_DeleteHistoryTableAdapter Adpt_ManufactureTableJP_DeleteHistory = null;
            DataTable tblManufactureTableJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(9) || arDeleteTabIndex.Contains(9))
            {
                Adt_ManufactureTableJP = new ScriptData_JPDataSetTableAdapters.ManufactureTableTableAdapter();

                tblManufactureTableJP = Adt_ManufactureTableJP.GetData();
                tblManufactureTableJP.Columns["IndexKey"].AllowDBNull = true;
                tblManufactureTableJP.Columns["Manufacture ID"].AllowDBNull = true;
                tblManufactureTableJP.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(9))
                {
                    Adt_ManufactureTableJP_History = new ScriptData_JPDataSetTableAdapters.ManufactureTable_HistoryTableAdapter();

                    tblManufactureTableJP_History = Adt_ManufactureTableJP_History.GetData();

                    tblManufactureTableJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblManufactureTableJP_History.Columns["Manufacture ID"].AllowDBNull = true;
                    tblManufactureTableJP_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(9))
                {
                    Adpt_ManufactureTableJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.ManufactureTable_DeleteHistoryTableAdapter();

                    tblManufactureTableJP_DeleteHistory = Adpt_ManufactureTableJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblManufactureTableJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblManufactureTableJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_JPDataSetTableAdapters.ManufactureResultGroupTableAdapter Adt_ManufactureResultGroupJP = null;
            DataTable tblManufactureResultGroupJP = null;
            ScriptData_JPDataSetTableAdapters.ManufactureResultGroup_HistoryTableAdapter Adt_ManufactureResultGroupJP_History = null;
            DataTable tblManufactureResultGroupJP_History = null;
            ScriptData_JPDataSetTableAdapters.ManufactureResultGroup_DeleteHistoryTableAdapter Adpt_ManufactureResultGroupJP_DeleteHistory = null;
            DataTable tblManufactureResultGroupJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(10) || arDeleteTabIndex.Contains(10))
            {
                Adt_ManufactureResultGroupJP = new ScriptData_JPDataSetTableAdapters.ManufactureResultGroupTableAdapter();

                tblManufactureResultGroupJP = Adt_ManufactureResultGroupJP.GetData();
                tblManufactureResultGroupJP.Columns["IndexKey"].AllowDBNull = true;
                tblManufactureResultGroupJP.Columns["Group ID"].AllowDBNull = true;
                tblManufactureResultGroupJP.Columns["Regdate"].AllowDBNull = true;


                if (arModifyTabIndex.Contains(10))
                {
                    Adt_ManufactureResultGroupJP_History = new ScriptData_JPDataSetTableAdapters.ManufactureResultGroup_HistoryTableAdapter();

                    tblManufactureResultGroupJP_History = Adt_ManufactureResultGroupJP_History.GetData();

                    tblManufactureResultGroupJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblManufactureResultGroupJP_History.Columns["Group ID"].AllowDBNull = true;
                    tblManufactureResultGroupJP_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(10))
                {
                    Adpt_ManufactureResultGroupJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.ManufactureResultGroup_DeleteHistoryTableAdapter();

                    tblManufactureResultGroupJP_DeleteHistory = Adpt_ManufactureResultGroupJP_DeleteHistory.GetData();
                    for (int nTemp = 0; nTemp < tblManufactureResultGroupJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblManufactureResultGroupJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_JPDataSetTableAdapters.ManufactureVillageTableAdapter Adt_ManufactureVillageJP = null;
            DataTable tblManufactureVillageJP = null;
            ScriptData_JPDataSetTableAdapters.ManufactureVillage_HistoryTableAdapter Adt_ManufactureVillageJP_History = null;
            DataTable tblManufactureVillageJP_History = null;
            ScriptData_JPDataSetTableAdapters.ManufactureVillage_DeleteHistoryTableAdapter Adpt_ManufactureVillageJP_DeleteHistory = null;
            DataTable tblManufactureVillageJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(11) || arDeleteTabIndex.Contains(11))
            {
                Adt_ManufactureVillageJP = new ScriptData_JPDataSetTableAdapters.ManufactureVillageTableAdapter();

                tblManufactureVillageJP = Adt_ManufactureVillageJP.GetData();

                tblManufactureVillageJP.Columns["IndexKey"].AllowDBNull = true;
                tblManufactureVillageJP.Columns["Manufacture ID"].AllowDBNull = true;
                tblManufactureVillageJP.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(11))
                {
                    Adt_ManufactureVillageJP_History = new ScriptData_JPDataSetTableAdapters.ManufactureVillage_HistoryTableAdapter();

                    tblManufactureVillageJP_History = Adt_ManufactureVillageJP_History.GetData();

                    tblManufactureVillageJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblManufactureVillageJP_History.Columns["Manufacture ID"].AllowDBNull = true;
                    tblManufactureVillageJP_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(11))
                {
                    Adpt_ManufactureVillageJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.ManufactureVillage_DeleteHistoryTableAdapter();

                    tblManufactureVillageJP_DeleteHistory = Adpt_ManufactureVillageJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblManufactureVillageJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblManufactureVillageJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_JPDataSetTableAdapters.AttribEnchantItemTableAdapter Adt_AttribEnchantItemJP = null;
            DataTable tblAttribEnchantItemJP = null;
            ScriptData_JPDataSetTableAdapters.AttribEnchantItem_HistoryTableAdapter Adt_AttribEnchantItemJP_History = null;
            DataTable tblAttribEnchantItemJP_History = null;
            ScriptData_JPDataSetTableAdapters.AttribEnchantItem_DeleteHistoryTableAdapter Adpt_AttribEnchantItemJP_DeleteHistory = null;
            DataTable tblAttribEnchantItemJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(12) || arDeleteTabIndex.Contains(12))
            {
                Adt_AttribEnchantItemJP = new ScriptData_JPDataSetTableAdapters.AttribEnchantItemTableAdapter();

                tblAttribEnchantItemJP = Adt_AttribEnchantItemJP.GetData();

                tblAttribEnchantItemJP.Columns["IndexKey"].AllowDBNull = true;
                tblAttribEnchantItemJP.Columns["ExtraDamageType"].AllowDBNull = true;
                tblAttribEnchantItemJP.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(12))
                {
                    Adt_AttribEnchantItemJP_History = new ScriptData_JPDataSetTableAdapters.AttribEnchantItem_HistoryTableAdapter();

                    tblAttribEnchantItemJP_History = Adt_AttribEnchantItemJP_History.GetData();

                    tblAttribEnchantItemJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblAttribEnchantItemJP_History.Columns["ExtraDamageType"].AllowDBNull = true;
                    tblAttribEnchantItemJP_History.Columns["Regdate"].AllowDBNull = true;
                }

                if (arDeleteTabIndex.Contains(12))
                {
                    Adpt_AttribEnchantItemJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.AttribEnchantItem_DeleteHistoryTableAdapter();

                    tblAttribEnchantItemJP_DeleteHistory = Adpt_AttribEnchantItemJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblAttribEnchantItemJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblAttribEnchantItemJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }

            ScriptData_JPDataSetTableAdapters.AttribEnchantRequireTableAdapter Adt_AttribEnchantRequireJP = null;
            DataTable tblAttribEnchantRequireJP = null;
            ScriptData_JPDataSetTableAdapters.AttribEnchantRequire_HistoryTableAdapter Adt_AttribEnchantRequireJP_History = null;
            DataTable tblAttribEnchantRequireJP_History = null;
            ScriptData_JPDataSetTableAdapters.AttribEnchantRequire_DeleteHistoryTableAdapter Adpt_AttribEnchantRequireJP_DeleteHistory = null;
            DataTable tblAttribEnchantRequireJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(13) || arDeleteTabIndex.Contains(13))
            {
                Adt_AttribEnchantRequireJP = new ScriptData_JPDataSetTableAdapters.AttribEnchantRequireTableAdapter();

                tblAttribEnchantRequireJP = Adt_AttribEnchantRequireJP.GetData();
                tblAttribEnchantRequireJP.Columns["IndexKey"].AllowDBNull = true;
                tblAttribEnchantRequireJP.Columns["Enchant Type"].AllowDBNull = true;
                tblAttribEnchantRequireJP.Columns["Regdate"].AllowDBNull = true;


                if (arModifyTabIndex.Contains(13))
                {
                    Adt_AttribEnchantRequireJP_History = new ScriptData_JPDataSetTableAdapters.AttribEnchantRequire_HistoryTableAdapter();

                    tblAttribEnchantRequireJP_History = Adt_AttribEnchantRequireJP_History.GetData();

                    tblAttribEnchantRequireJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblAttribEnchantRequireJP_History.Columns["Enchant Type"].AllowDBNull = true;
                    tblAttribEnchantRequireJP_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(13))
                {
                    Adpt_AttribEnchantRequireJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.AttribEnchantRequire_DeleteHistoryTableAdapter();

                    tblAttribEnchantRequireJP_DeleteHistory = Adpt_AttribEnchantRequireJP_DeleteHistory.GetData();
                    for (int nTemp = 0; nTemp < tblAttribEnchantRequireJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblAttribEnchantRequireJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }


            ScriptData_JPDataSetTableAdapters.NpcExtraAbilityTableAdapter Adt_NpcExtraAbilityJP = null;
            DataTable tblNpcExtraAbilityJP = null;
            ScriptData_JPDataSetTableAdapters.NpcExtraAbility_HistoryTableAdapter Adt_NpcExtraAbilityJP_History = null;
            DataTable tblNpcExtraAbilityJP_History = null;
            ScriptData_JPDataSetTableAdapters.NpcExtraAbility_DeleteHistoryTableAdapter Adpt_NpcExtraAbilityJP_DeleteHistory = null;
            DataTable tblNpcExtraAbilityJP_DeleteHistory = null;
            if (arModifyTabIndex.Contains(14) || arDeleteTabIndex.Contains(14))
            {
                Adt_NpcExtraAbilityJP = new ScriptData_JPDataSetTableAdapters.NpcExtraAbilityTableAdapter();

                tblNpcExtraAbilityJP = Adt_NpcExtraAbilityJP.GetData();

                tblNpcExtraAbilityJP.Columns["IndexKey"].AllowDBNull = true;
                tblNpcExtraAbilityJP.Columns["NPC_ABILITY_ID"].AllowDBNull = true;
                tblNpcExtraAbilityJP.Columns["Regdate"].AllowDBNull = true;

                if (arModifyTabIndex.Contains(14))
                {
                    Adt_NpcExtraAbilityJP_History = new ScriptData_JPDataSetTableAdapters.NpcExtraAbility_HistoryTableAdapter();

                    tblNpcExtraAbilityJP_History = Adt_NpcExtraAbilityJP_History.GetData();

                    tblNpcExtraAbilityJP_History.Columns["IndexKey"].AllowDBNull = true;
                    tblNpcExtraAbilityJP_History.Columns["NPC_ABILITY_ID"].AllowDBNull = true;
                    tblNpcExtraAbilityJP_History.Columns["Regdate"].AllowDBNull = true;
                }
                if (arDeleteTabIndex.Contains(14))
                {
                    Adpt_NpcExtraAbilityJP_DeleteHistory = new ScriptData_JPDataSetTableAdapters.NpcExtraAbility_DeleteHistoryTableAdapter();

                    tblNpcExtraAbilityJP_DeleteHistory = Adpt_NpcExtraAbilityJP_DeleteHistory.GetData();

                    for (int nTemp = 0; nTemp < tblNpcExtraAbilityJP_DeleteHistory.Columns.Count; nTemp++)
                    {
                        tblNpcExtraAbilityJP_DeleteHistory.Columns[nTemp].AllowDBNull = true;
                    }
                }
            }



#endif //__COUNTRY_KR__


            //History 추가
            IPHostEntry host = Dns.GetHostEntry(Dns.GetHostName());
            string strMyIP = host.AddressList[0].ToString();
            DataRow Row_History = null;
            DataRow Row = null;
            //09. 06. 01 김정협 수정 붉은색 모두 검은색 글씨로
            ColorRefresh(false);

            //09. 07. 08 김정협 중국일 경우를 대비해 전처리문에서 빼고 단 한번만 
            //실행하면 되므로 포문에서 뺌(수정할경우임. 추가된 경우는 한국에서만 돌아감)
            {
                //Adpt_String.Update(tblScriptString);
                //09. 06. 19 김정협 Trans
                DataRow[] drArray = new DataRow[tblTrans.Rows.Count];
                tblTrans.Rows.CopyTo(drArray, 0);
                Adpt_Trans.Update(drArray);


                /*drArray = new DataRow[tblTrans_History.Rows.Count];
                tblTrans_History.Rows.CopyTo(drArray, 0);
                Adpt_Trans_History.Update(drArray);*/


                //09. 06. 19 김정협 Release
                drArray = new DataRow[tblRelease.Rows.Count];
                tblRelease.Rows.CopyTo(drArray, 0);
                Adpt_Release.Update(drArray);

            }


            for (int i = 0; i < m_ModifyIDList.Count; i++)
            {
                switch (((sTableValue)m_ModifyIDList[i]).nTabIndex)
                {
                    case 0:
                        {                           

                            tblItem_History.Rows.Add();

                            Row_History = tblItem_History.Rows[tblItem_History.Rows.Count - 1];

                            //09. 06. 23 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            /*for (int nRow = 0; nRow < tblItem.Rows.Count; nRow++)
                            {
                                if(tblItem.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblItem.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblItem.Rows[nRow];
                                    break;
                                }                                
                            }*/
                                                        
                            //09. 07. 07 김정협 바이너리 서치로 알고리즘 교체
                            int nLeft = 0;
                            int nRight = tblItem.Rows.Count - 1;
                            while (nLeft <= nRight)
                            {
                                int nMid = (nLeft + nRight) / 2;
                                while(tblItem.Rows[nMid].RowState == DataRowState.Deleted)
                                {
                                    nMid--;
                                }
                                int nTableIndex = Convert.ToInt32(tblItem.Rows[nMid]["IndexKey"].ToString());
                                int nIndex = ((sTableValue)m_ModifyIDList[i]).nIndexKey;
                                if (nTableIndex == nIndex)
                                {
                                    Row = tblItem.Rows[nMid];
                                    break;
                                }
                                if (nTableIndex < nIndex)
                                {
                                    nLeft = nMid + 1;
                                }
                                if (nTableIndex > nIndex)
                                {
                                    nRight = nMid - 1;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblItem.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];


                            Adpt_Item_History.Update(new DataRow[] { Row_History });
                            Adpt.Update(new DataRow[] { Row });


                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨
#if __COUNTRY_KR__

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            
                            tblItemTW_History.Rows.Add();
                            DataRow RowTW_History = tblItemTW_History.Rows[tblItemTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            
                            //09. 07. 07 김정협 바이너리 서치로 알고리즘 교체
                            nLeft = 0;
                            nRight = tblItemTW.Rows.Count - 1;
                            while (nLeft <= nRight)
                            {
                                int nMid = (nLeft + nRight) / 2;
                                while (tblItemTW.Rows[nMid].RowState == DataRowState.Deleted)
                                {
                                    nMid--;
                                }
                                int nTableIndex = Convert.ToInt32(tblItemTW.Rows[nMid]["IndexKey"].ToString());
                                int nIndex = Convert.ToInt32(Row["IndexKey"].ToString());
                                if (nTableIndex == nIndex)
                                {
                                    nRowIndex = nMid;
                                    break;
                                }
                                if (nTableIndex < nIndex)
                                {
                                    nLeft = nMid + 1;
                                }
                                if (nTableIndex > nIndex)
                                {
                                    nRight = nMid - 1;
                                }
                            }


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            int nBefore = Convert.ToInt32(Row["IndexKey"].ToString());
                            DataTable dtTemp = null;
                            if (nRowIndex == -1)
                            {                                
                              
                                dtTemp = new DataTable();
                                Adpt.Fill(dtTemp);
                                Row = dtTemp.Rows[dtTemp.Rows.Count - 1];

                                for (int nTemp = 0; nTemp < tblItemTW.Columns.Count; nTemp++)
                                {
                                    tblItemTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// = tblItemTW.Rows[tblItemTW.Rows.Count - 1];
                                tblItemTW.Rows.Add();                                
                                RowTW = tblItemTW.Rows[tblItemTW.Rows.Count - 1];
                                

                                for (int twColumn = 0; twColumn < tblItemTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblItemTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }

                                ///////////////////////////////////////////////////////////////////
                                //스트링 시작
                                ///////////////////////////////////////////////////////////////////
                                                                                                
                                tblTrans.Rows.Add();
                                DataRow RowTrans = tblTrans.Rows[tblTrans.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowTrans["CountryCode"] = "TW";
                                RowTrans["DB"] = "ScriptData_TW";
                                RowTrans["TableName"] = "Item";
                                RowTrans["Column"] = "Name";
                                RowTrans["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString()); 
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowTrans["String"] = tblItemTW.Rows[tblItemTW.Rows.Count - 1]["Name"];
                                RowTrans["Create Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                RowTrans["Last Update Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                               

                                tblTrans.Rows.Add();
                                RowTrans = tblTrans.Rows[tblTrans.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowTrans["CountryCode"] = "TW";
                                RowTrans["DB"] = "ScriptData_TW";
                                RowTrans["TableName"] = "Item";
                                RowTrans["Column"] = "Description";
                                RowTrans["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString()); 
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowTrans["String"] = tblItemTW.Rows[tblItemTW.Rows.Count - 1]["Description"];
                                RowTrans["Create Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                RowTrans["Last Update Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                

                                tblTrans.Rows.Add();
                                RowTrans = tblTrans.Rows[tblTrans.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowTrans["CountryCode"] = "TW";
                                RowTrans["DB"] = "ScriptData_TW";
                                RowTrans["TableName"] = "Item";
                                RowTrans["Column"] = "Description In Shop";
                                RowTrans["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString()); 
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowTrans["String"] = tblItemTW.Rows[tblItemTW.Rows.Count - 1]["Description In Shop"];
                                RowTrans["Create Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                RowTrans["Last Update Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                

                                ///////////////////////////////////////////////////////////////////
                                //스트링 끝
                                ///////////////////////////////////////////////////////////////////

                                //09. 06. 19 김정협 Release 추가
                                tblRelease.Rows.Add();
                                DataRow RowRelease = tblRelease.Rows[tblRelease.Rows.Count - 1];

                                RowRelease = tblRelease.Rows[tblRelease.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowRelease["CountryCode"] = "TW";
                                RowRelease["DB"] = "ScriptData_TW";
                                RowRelease["TableName"] = "Item";
                                RowRelease["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString()); 
                                RowRelease["Name"] = tblItemTW.Rows[tblItemTW.Rows.Count - 1]["Name"];
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowRelease["State"] = true;
                                RowRelease["Create Date"] = DateTime.Now;
                                RowRelease["Last Update Date"] = DateTime.Now;
                                

                                for (int twColumn_His = 0; twColumn_His < tblItemTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_ItemTW.Update(RowTW);
                                Adt_ItemTW_History.Update(RowTW_History);

                                //Adpt_String.Update(tblScriptString);
                                //09. 06. 19 김정협 Trans
                                DataRow[] drArray = new DataRow[tblTrans.Rows.Count];
                                tblTrans.Rows.CopyTo(drArray, 0);
                                Adpt_Trans.Update(drArray);


                                /*drArray = new DataRow[tblTrans_History.Rows.Count];
                                tblTrans_History.Rows.CopyTo(drArray, 0);
                                Adpt_Trans_History.Update(drArray);*/


                                //09. 06. 19 김정협 Release
                                drArray = new DataRow[tblRelease.Rows.Count];
                                tblRelease.Rows.CopyTo(drArray, 0);
                                Adpt_Release.Update(drArray);
                                                                

                                /*drArray = new DataRow[tblRelease_History.Rows.Count];
                                tblRelease_History.Rows.CopyTo(drArray, 0);
                                Adpt_Release_History.Update(drArray);*/

                                int nCurrent = (int)Adt_ItemTW.GetMaxIndexRow();
                                if (nBefore != nCurrent)
                                {
                                    Adpt_Trans.UpdateIndexKey(nCurrent, nBefore,"Item");
                                    Adpt_Release.UpdateIndexKey(nCurrent, nBefore, "Item");
                                }
                                
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////
                                                      

                            tblItemHK_History.Rows.Add();
                            DataRow RowHK_History = tblItemHK_History.Rows[tblItemHK_History.Rows.Count - 1];
                            
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            
                            if (nRowIndex == -1)
                            {
                                //대만버전에서 이미 실행함
                                /*
                                DataTable dtTemp = new DataTable();
                                Adpt.Fill(dtTemp);
                                Row = dtTemp.Rows[dtTemp.Rows.Count - 1];*/

                                for (int nTemp = 0; nTemp < tblItemHK.Columns.Count; nTemp++)
                                {
                                    tblItemHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// = tblItemHK.Rows[tblItemHK.Rows.Count - 1];
                                tblItemHK.Rows.Add();
                                RowHK = tblItemHK.Rows[tblItemHK.Rows.Count - 1];


                                for (int HKColumn = 0; HKColumn < tblItemHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblItemHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }

                                ///////////////////////////////////////////////////////////////////
                                //스트링 시작
                                ///////////////////////////////////////////////////////////////////

                                tblTrans.Rows.Add();
                                DataRow RowTrans = tblTrans.Rows[tblTrans.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowTrans["CountryCode"] = "HK";
                                RowTrans["DB"] = "ScriptData_HK";
                                RowTrans["TableName"] = "Item";
                                RowTrans["Column"] = "Name";
                                RowTrans["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString());
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowTrans["String"] = tblItemHK.Rows[tblItemHK.Rows.Count - 1]["Name"];
                                RowTrans["Create Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                RowTrans["Last Update Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());


                                tblTrans.Rows.Add();
                                RowTrans = tblTrans.Rows[tblTrans.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowTrans["CountryCode"] = "HK";
                                RowTrans["DB"] = "ScriptData_HK";
                                RowTrans["TableName"] = "Item";
                                RowTrans["Column"] = "Description";
                                RowTrans["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString());
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowTrans["String"] = tblItemHK.Rows[tblItemHK.Rows.Count - 1]["Description"];
                                RowTrans["Create Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                RowTrans["Last Update Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());


                                tblTrans.Rows.Add();
                                RowTrans = tblTrans.Rows[tblTrans.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowTrans["CountryCode"] = "HK";
                                RowTrans["DB"] = "ScriptData_HK";
                                RowTrans["TableName"] = "Item";
                                RowTrans["Column"] = "Description In Shop";
                                RowTrans["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString());
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowTrans["String"] = tblItemHK.Rows[tblItemHK.Rows.Count - 1]["Description In Shop"];
                                RowTrans["Create Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                RowTrans["Last Update Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());


                                ///////////////////////////////////////////////////////////////////
                                //스트링 끝
                                ///////////////////////////////////////////////////////////////////

                                //09. 06. 19 김정협 Release 추가
                                tblRelease.Rows.Add();
                                DataRow RowRelease = tblRelease.Rows[tblRelease.Rows.Count - 1];

                                RowRelease = tblRelease.Rows[tblRelease.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowRelease["CountryCode"] = "HK";
                                RowRelease["DB"] = "ScriptData_HK";
                                RowRelease["TableName"] = "Item";
                                RowRelease["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString());
                                RowRelease["Name"] = tblItemHK.Rows[tblItemHK.Rows.Count - 1]["Name"];
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowRelease["State"] = true;
                                RowRelease["Create Date"] = DateTime.Now;
                                RowRelease["Last Update Date"] = DateTime.Now;


                                for (int HKColumn_His = 0; HKColumn_His < tblItemHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_ItemHK.Update(RowHK);
                                Adt_ItemHK_History.Update(RowHK_History);

                                //Adpt_String.Update(tblScriptString);
                                //09. 06. 19 김정협 Trans
                                DataRow[] drArray = new DataRow[tblTrans.Rows.Count];
                                tblTrans.Rows.CopyTo(drArray, 0);
                                Adpt_Trans.Update(drArray);


                                /*drArray = new DataRow[tblTrans_History.Rows.Count];
                                tblTrans_History.Rows.CopyTo(drArray, 0);
                                Adpt_Trans_History.Update(drArray);*/


                                //09. 06. 19 김정협 Release
                                drArray = new DataRow[tblRelease.Rows.Count];
                                tblRelease.Rows.CopyTo(drArray, 0);
                                Adpt_Release.Update(drArray);


                                /*drArray = new DataRow[tblRelease_History.Rows.Count];
                                tblRelease_History.Rows.CopyTo(drArray, 0);
                                Adpt_Release_History.Update(drArray);*/

                                //대만버전에서 이미실행함
                                /*
                                int nCurrent = (int)Adt_ItemHK.GetMaxIndexRow();
                                if (nBefore != nCurrent)
                                {
                                    Adpt_Trans.UpdateIndexKey(nCurrent, nBefore, "Item");
                                    Adpt_Release.UpdateIndexKey(nCurrent, nBefore, "Item");
                                }*/

                            }


                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////


                            tblItemJP_History.Rows.Add();
                            DataRow RowJP_History = tblItemJP_History.Rows[tblItemJP_History.Rows.Count - 1];

                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도

                            if (nRowIndex == -1)
                            {
                                //대만버전에서 이미 실행함
                                /*
                                DataTable dtTemp = new DataTable();
                                Adpt.Fill(dtTemp);
                                Row = dtTemp.Rows[dtTemp.Rows.Count - 1];*/

                                for (int nTemp = 0; nTemp < tblItemJP.Columns.Count; nTemp++)
                                {
                                    tblItemJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// = tblItemJP.Rows[tblItemJP.Rows.Count - 1];
                                tblItemJP.Rows.Add();
                                RowJP = tblItemJP.Rows[tblItemJP.Rows.Count - 1];


                                for (int JPColumn = 0; JPColumn < tblItemJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblItemJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }

                                ///////////////////////////////////////////////////////////////////
                                //스트링 시작
                                ///////////////////////////////////////////////////////////////////

                                tblTrans.Rows.Add();
                                DataRow RowTrans = tblTrans.Rows[tblTrans.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowTrans["CountryCode"] = "JP";
                                RowTrans["DB"] = "ScriptData_JP";
                                RowTrans["TableName"] = "Item";
                                RowTrans["Column"] = "Name";
                                RowTrans["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString());
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowTrans["String"] = tblItemJP.Rows[tblItemJP.Rows.Count - 1]["Name"];
                                RowTrans["Create Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                RowTrans["Last Update Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());


                                tblTrans.Rows.Add();
                                RowTrans = tblTrans.Rows[tblTrans.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowTrans["CountryCode"] = "JP";
                                RowTrans["DB"] = "ScriptData_JP";
                                RowTrans["TableName"] = "Item";
                                RowTrans["Column"] = "Description";
                                RowTrans["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString());
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowTrans["String"] = tblItemJP.Rows[tblItemJP.Rows.Count - 1]["Description"];
                                RowTrans["Create Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                RowTrans["Last Update Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());


                                tblTrans.Rows.Add();
                                RowTrans = tblTrans.Rows[tblTrans.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowTrans["CountryCode"] = "JP";
                                RowTrans["DB"] = "ScriptData_JP";
                                RowTrans["TableName"] = "Item";
                                RowTrans["Column"] = "Description In Shop";
                                RowTrans["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString());
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowTrans["String"] = tblItemJP.Rows[tblItemJP.Rows.Count - 1]["Description In Shop"];
                                RowTrans["Create Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                RowTrans["Last Update Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());


                                ///////////////////////////////////////////////////////////////////
                                //스트링 끝
                                ///////////////////////////////////////////////////////////////////

                                //09. 06. 19 김정협 Release 추가
                                tblRelease.Rows.Add();
                                DataRow RowRelease = tblRelease.Rows[tblRelease.Rows.Count - 1];

                                RowRelease = tblRelease.Rows[tblRelease.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowRelease["CountryCode"] = "JP";
                                RowRelease["DB"] = "ScriptData_JP";
                                RowRelease["TableName"] = "Item";
                                RowRelease["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString());
                                RowRelease["Name"] = tblItemJP.Rows[tblItemJP.Rows.Count - 1]["Name"];
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowRelease["State"] = true;
                                RowRelease["Create Date"] = DateTime.Now;
                                RowRelease["Last Update Date"] = DateTime.Now;


                                for (int JPColumn_His = 0; JPColumn_His < tblItemJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_ItemJP.Update(RowJP);
                                Adt_ItemJP_History.Update(RowJP_History);

                                //Adpt_String.Update(tblScriptString);
                                //09. 06. 19 김정협 Trans
                                DataRow[] drArray = new DataRow[tblTrans.Rows.Count];
                                tblTrans.Rows.CopyTo(drArray, 0);
                                Adpt_Trans.Update(drArray);


                                /*drArray = new DataRow[tblTrans_History.Rows.Count];
                                tblTrans_History.Rows.CopyTo(drArray, 0);
                                Adpt_Trans_History.Update(drArray);*/


                                //09. 06. 19 김정협 Release
                                drArray = new DataRow[tblRelease.Rows.Count];
                                tblRelease.Rows.CopyTo(drArray, 0);
                                Adpt_Release.Update(drArray);


                                /*drArray = new DataRow[tblRelease_History.Rows.Count];
                                tblRelease_History.Rows.CopyTo(drArray, 0);
                                Adpt_Release_History.Update(drArray);*/

                                
                            }
                           
#endif //__COUNTRY_KR__
                        }
                        break;
                    case 1:
                        {
                            

                            tblSpecialAbility_History.Rows.Add();

                            Row_History = tblSpecialAbility_History.Rows[tblSpecialAbility_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey값을 이용. tblItem은 IndexKey값이 로우와 같으므로 
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblSpecialAbility.Rows.Count; nRow++)
                            {
                                if (tblSpecialAbility.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblSpecialAbility.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblSpecialAbility.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblSpecialAbility.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];

                            //SpecialAbility
                            Adpt_SpecialAbility.Update(new DataRow[] { Row });
                            Adpt_SpecialAbility_History.Update(new DataRow[] { Row_History });

                                                        

                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨
#if __COUNTRY_KR__      

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            // tblSpecialAbilityTW.Rows.Add();
                            tblSpecialAbilityTW_History.Rows.Add();
                            DataRow RowTW_History = tblSpecialAbilityTW_History.Rows[tblSpecialAbilityTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow <  tblSpecialAbilityTW.Rows.Count; twRow++)
                            {
                                if ( tblSpecialAbilityTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                             //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {

                                for (int nTemp = 0; nTemp <  tblSpecialAbilityTW.Columns.Count; nTemp++)
                                {
                                     tblSpecialAbilityTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblSpecialAbilityTW.Rows[ tblSpecialAbilityTW.Rows.Count - 1];
                                 tblSpecialAbilityTW.Rows.Add();
                                RowTW =  tblSpecialAbilityTW.Rows[ tblSpecialAbilityTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn <  tblSpecialAbilityTW.Columns.Count; twColumn++)
                                {
                                    /*if ( tblSpecialAbilityTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }

                                

                                for (int twColumn_His = 0; twColumn_His <  tblSpecialAbilityTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_SpecialAbilityTW.Update(RowTW);
                                Adt_SpecialAbilityTW_History.Update(RowTW_History);

                            }


                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            tblSpecialAbilityHK_History.Rows.Add();
                            DataRow RowHK_History = tblSpecialAbilityHK_History.Rows[tblSpecialAbilityHK_History.Rows.Count - 1];

                            
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {

                                for (int nTemp = 0; nTemp < tblSpecialAbilityHK.Columns.Count; nTemp++)
                                {
                                    tblSpecialAbilityHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblSpecialAbilityHK.Rows[ tblSpecialAbilityHK.Rows.Count - 1];
                                tblSpecialAbilityHK.Rows.Add();
                                RowHK = tblSpecialAbilityHK.Rows[tblSpecialAbilityHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblSpecialAbilityHK.Columns.Count; HKColumn++)
                                {
                                    /*if ( tblSpecialAbilityHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblSpecialAbilityHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_SpecialAbilityHK.Update(RowHK);
                                Adt_SpecialAbilityHK_History.Update(RowHK_History);

                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            tblSpecialAbilityJP_History.Rows.Add();
                            DataRow RowJP_History = tblSpecialAbilityJP_History.Rows[tblSpecialAbilityJP_History.Rows.Count - 1];


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {

                                for (int nTemp = 0; nTemp < tblSpecialAbilityJP.Columns.Count; nTemp++)
                                {
                                    tblSpecialAbilityJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblSpecialAbilityJP.Rows[ tblSpecialAbilityJP.Rows.Count - 1];
                                tblSpecialAbilityJP.Rows.Add();
                                RowJP = tblSpecialAbilityJP.Rows[tblSpecialAbilityJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblSpecialAbilityJP.Columns.Count; JPColumn++)
                                {
                                    /*if ( tblSpecialAbilityJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblSpecialAbilityJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_SpecialAbilityJP.Update(RowJP);
                                Adt_SpecialAbilityJP_History.Update(RowJP_History);

                            }


#endif //__COUNTRY_KR__

                        }
                        break;
                    case 2:
                        {
                            
                            tblSocketItem_History.Rows.Add();

                            Row_History = tblSocketItem_History.Rows[tblSocketItem_History.Rows.Count - 1];
                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblSocketItem.Rows.Count; nRow++)
                            {
                                if (tblSocketItem.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblSocketItem.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblSocketItem.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblSocketItem.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];

                            //SocketItem
                            Adpt_SocketItem_History.Update(new DataRow[] { Row_History });
                            Adpt_SocketItem.Update(new DataRow[] { Row });


                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨
#if __COUNTRY_KR__

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            // tblSocketItemTW.Rows.Add();
                            tblSocketItemTW_History.Rows.Add();
                            DataRow RowTW_History = tblSocketItemTW_History.Rows[tblSocketItemTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblSocketItemTW.Rows.Count; twRow++)
                            {
                                if (tblSocketItemTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblSocketItemTW.Columns.Count; nTemp++)
                                {
                                    tblSocketItemTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblSocketItemTW.Rows[ tblSocketItemTW.Rows.Count - 1];
                                tblSocketItemTW.Rows.Add();
                                RowTW = tblSocketItemTW.Rows[tblSocketItemTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblSocketItemTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblSocketItemTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }



                                for (int twColumn_His = 0; twColumn_His < tblSocketItemTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_SocketItemTW.Update(RowTW);
                                Adt_SocketItemTW_History.Update(RowTW_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblSocketItemHK.Rows.Add();
                            tblSocketItemHK_History.Rows.Add();
                            DataRow RowHK_History = tblSocketItemHK_History.Rows[tblSocketItemHK_History.Rows.Count - 1];
                                                        
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblSocketItemHK.Columns.Count; nTemp++)
                                {
                                    tblSocketItemHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblSocketItemHK.Rows[ tblSocketItemHK.Rows.Count - 1];
                                tblSocketItemHK.Rows.Add();
                                RowHK = tblSocketItemHK.Rows[tblSocketItemHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblSocketItemHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblSocketItemHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblSocketItemHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_SocketItemHK.Update(RowHK);
                                Adt_SocketItemHK_History.Update(RowHK_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblSocketItemJP.Rows.Add();
                            tblSocketItemJP_History.Rows.Add();
                            DataRow RowJP_History = tblSocketItemJP_History.Rows[tblSocketItemJP_History.Rows.Count - 1];

                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblSocketItemJP.Columns.Count; nTemp++)
                                {
                                    tblSocketItemJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblSocketItemJP.Rows[ tblSocketItemJP.Rows.Count - 1];
                                tblSocketItemJP.Rows.Add();
                                RowJP = tblSocketItemJP.Rows[tblSocketItemJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblSocketItemJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblSocketItemJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblSocketItemJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_SocketItemJP.Update(RowJP);
                                Adt_SocketItemJP_History.Update(RowJP_History);
                            }

#endif //__COUNTRY_KR__

                        }
                        break;
                    case 3:
                        {
                            

                            tblSocketRandom_History.Rows.Add();

                            Row_History = tblSocketRandom_History.Rows[tblSocketRandom_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblSocketRandom.Rows.Count; nRow++)
                            {
                                if (tblSocketRandom.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblSocketRandom.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblSocketRandom.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblSocketRandom.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];

                            //SocketRandom
                            Adpt_SocketRandom.Update(new DataRow[] { Row });
                            Adpt_SocketRandom_History.Update(new DataRow[] { Row_History });



                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨

#if __COUNTRY_KR__

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblSocketRandomTW.Rows.Add();
                            tblSocketRandomTW_History.Rows.Add();
                            DataRow RowTW_History = tblSocketRandomTW_History.Rows[tblSocketRandomTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblSocketRandomTW.Rows.Count; twRow++)
                            {
                                if (tblSocketRandomTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblSocketRandomTW.Columns.Count; nTemp++)
                                {
                                    tblSocketRandomTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblSocketRandomTW.Rows[ tblSocketRandomTW.Rows.Count - 1];
                                tblSocketRandomTW.Rows.Add();
                                RowTW = tblSocketRandomTW.Rows[tblSocketRandomTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblSocketRandomTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblSocketRandomTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }



                                for (int twColumn_His = 0; twColumn_His < tblSocketRandomTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_SocketRandomTW.Update(RowTW);
                                Adt_SocketRandomTW_History.Update(RowTW_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblSocketRandomHK.Rows.Add();
                            tblSocketRandomHK_History.Rows.Add();
                            DataRow RowHK_History = tblSocketRandomHK_History.Rows[tblSocketRandomHK_History.Rows.Count - 1];

                            
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblSocketRandomHK.Columns.Count; nTemp++)
                                {
                                    tblSocketRandomHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblSocketRandomHK.Rows[ tblSocketRandomHK.Rows.Count - 1];
                                tblSocketRandomHK.Rows.Add();
                                RowHK = tblSocketRandomHK.Rows[tblSocketRandomHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblSocketRandomHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblSocketRandomHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblSocketRandomHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_SocketRandomHK.Update(RowHK);
                                Adt_SocketRandomHK_History.Update(RowHK_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblSocketRandomJP.Rows.Add();
                            tblSocketRandomJP_History.Rows.Add();
                            DataRow RowJP_History = tblSocketRandomJP_History.Rows[tblSocketRandomJP_History.Rows.Count - 1];


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblSocketRandomJP.Columns.Count; nTemp++)
                                {
                                    tblSocketRandomJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblSocketRandomJP.Rows[ tblSocketRandomJP.Rows.Count - 1];
                                tblSocketRandomJP.Rows.Add();
                                RowJP = tblSocketRandomJP.Rows[tblSocketRandomJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblSocketRandomJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblSocketRandomJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblSocketRandomJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_SocketRandomJP.Update(RowJP);
                                Adt_SocketRandomJP_History.Update(RowJP_History);
                            }
#endif //__COUNTRY_KR__

                        }
                        break;
                    case 4:
                        {
                                                       

                            tblSocketGroup_History.Rows.Add();
                            Row_History = tblSocketGroup_History.Rows[tblSocketGroup_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblSocketGroup.Rows.Count; nRow++)
                            {
                                if (tblSocketGroup.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblSocketGroup.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblSocketGroup.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblSocketGroup.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];

                            //SocketGroup
                            Adpt_SocketGroup.Update(new DataRow[] { Row });
                            Adpt_SocketGroup_History.Update(new DataRow[] { Row_History });

                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨

#if __COUNTRY_KR__

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblSocketGroupTW.Rows.Add();
                            tblSocketGroupTW_History.Rows.Add();
                            DataRow RowTW_History = tblSocketGroupTW_History.Rows[tblSocketGroupTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblSocketGroupTW.Rows.Count; twRow++)
                            {
                                if (tblSocketGroupTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblSocketGroupTW.Columns.Count; nTemp++)
                                {
                                    tblSocketGroupTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblSocketGroupTW.Rows[ tblSocketGroupTW.Rows.Count - 1];
                                tblSocketGroupTW.Rows.Add();
                                RowTW = tblSocketGroupTW.Rows[tblSocketGroupTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblSocketGroupTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblSocketGroupTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }



                                for (int twColumn_His = 0; twColumn_His < tblSocketGroupTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_SocketGroupTW.Update(RowTW);
                                Adt_SocketGroupTW_History.Update(RowTW_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblSocketGroupHK.Rows.Add();
                            tblSocketGroupHK_History.Rows.Add();
                            DataRow RowHK_History = tblSocketGroupHK_History.Rows[tblSocketGroupHK_History.Rows.Count - 1];

                            
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblSocketGroupHK.Columns.Count; nTemp++)
                                {
                                    tblSocketGroupHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblSocketGroupHK.Rows[ tblSocketGroupHK.Rows.Count - 1];
                                tblSocketGroupHK.Rows.Add();
                                RowHK = tblSocketGroupHK.Rows[tblSocketGroupHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblSocketGroupHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblSocketGroupHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblSocketGroupHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_SocketGroupHK.Update(RowHK);
                                Adt_SocketGroupHK_History.Update(RowHK_History);
                            }


                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblSocketGroupJP.Rows.Add();
                            tblSocketGroupJP_History.Rows.Add();
                            DataRow RowJP_History = tblSocketGroupJP_History.Rows[tblSocketGroupJP_History.Rows.Count - 1];


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblSocketGroupJP.Columns.Count; nTemp++)
                                {
                                    tblSocketGroupJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblSocketGroupJP.Rows[ tblSocketGroupJP.Rows.Count - 1];
                                tblSocketGroupJP.Rows.Add();
                                RowJP = tblSocketGroupJP.Rows[tblSocketGroupJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblSocketGroupJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblSocketGroupJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblSocketGroupJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_SocketGroupJP.Update(RowJP);
                                Adt_SocketGroupJP_History.Update(RowJP_History);
                            }

#endif //__COUNTRY_KR__
                        }
                        break;
                    case 5:
                        {
                            
                            tblSetItem_History.Rows.Add();
                            Row_History = tblSetItem_History.Rows[tblSetItem_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey값을 이용. tblItem은 IndexKey값이 로우와 같으므로 
                            //Row = tblSetItem.Rows[((sTableValue)m_ModifyIDList[i]).nIndexKey];

                            //09. 06. 23 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblSetItem.Rows.Count; nRow++)
                            {
                                if (tblSetItem.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblSetItem.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblSetItem.Rows[nRow];
                                    break;
                                }
                            }                            

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblSetItem.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];
                                                        

                            //SetItem
                            Adpt_SetItem.Update(new DataRow[] { Row });
                            Adpt_SetItem_History.Update(new DataRow[] { Row_History });

                                                       

                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨
#if __COUNTRY_KR__
                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            
                            //tblSetItemTW.Rows.Add();
                            tblSetItemTW_History.Rows.Add();
                            DataRow RowTW_History = tblSetItemTW_History.Rows[tblSetItemTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblSetItemTW.Rows.Count; twRow++)
                            {
                                if (tblSetItemTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }

                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            DataTable dtTemp = null;
                            int nBefore = Convert.ToInt32(Row["IndexKey"].ToString());
                            if (nRowIndex == -1)
                            {
                                dtTemp = new DataTable();
                                Adpt_SetItem.Fill(dtTemp);
                                Row = dtTemp.Rows[dtTemp.Rows.Count - 1];

                                for (int nTemp = 0; nTemp < tblSetItemTW.Columns.Count; nTemp++)
                                {
                                    tblSetItemTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// = tblSetItemTW.Rows[tblSetItemTW.Rows.Count - 1];
                                tblSetItemTW.Rows.Add();
                                RowTW = tblSetItemTW.Rows[tblSetItemTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblSetItemTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblSetItemTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }

                                ///////////////////////////////////////////////////////////////////
                                //스트링 시작
                                ///////////////////////////////////////////////////////////////////


                                //int nIndexCount = CurrentMaxStringIndex();
                                //nIndexCount++;

                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임                                
                                // m_dgvData["Index_Name", m_dgvData.RowCount - 1].Style.ForeColor = Color.Red;


                                tblTrans.Rows.Add();
                                DataRow RowTrans = tblTrans.Rows[tblTrans.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowTrans["CountryCode"] = "TW";
                                RowTrans["DB"] = "ScriptData_TW";
                                RowTrans["TableName"] = "SetItem";
                                RowTrans["Column"] = "SetName";
                                RowTrans["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString()); 
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowTrans["String"] = tblSetItemTW.Rows[tblSetItemTW.Rows.Count - 1]["SetName"];
                                RowTrans["Create Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                RowTrans["Last Update Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());



                                ///////////////////////////////////////////////////////////////////
                                //스트링 끝
                                ///////////////////////////////////////////////////////////////////


                                for (int twColumn_His = 0; twColumn_His < tblSetItemTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_SetItemTW.Update(RowTW);
                                Adt_SetItemTW_History.Update(RowTW_History);


                                //Adpt_String.Update(tblScriptString);
                                //09. 06. 19 김정협 Trans
                                DataRow[] drArray = new DataRow[tblTrans.Rows.Count];
                                tblTrans.Rows.CopyTo(drArray, 0);
                                Adpt_Trans.Update(drArray);


                                /*drArray = new DataRow[tblTrans_History.Rows.Count];
                                tblTrans_History.Rows.CopyTo(drArray, 0);
                                Adpt_Trans_History.Update(drArray);*/



                                int nCurrent = (int)Adt_SetItemTW.GetMaxIndexRow();
                                if (nBefore != nCurrent)
                                {
                                    Adpt_Trans.UpdateIndexKey(nCurrent, nBefore,"SetItem");
                                    //Adpt_Release.UpdateIndexKey(nCurrent, nBefore);
                                }
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            //tblSetItemHK.Rows.Add();
                            tblSetItemHK_History.Rows.Add();
                            DataRow RowHK_History = tblSetItemHK_History.Rows[tblSetItemHK_History.Rows.Count - 1];

                            

                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            
                            if (nRowIndex == -1)
                            {                                

                                for (int nTemp = 0; nTemp < tblSetItemHK.Columns.Count; nTemp++)
                                {
                                    tblSetItemHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// = tblSetItemHK.Rows[tblSetItemHK.Rows.Count - 1];
                                tblSetItemHK.Rows.Add();
                                RowHK = tblSetItemHK.Rows[tblSetItemHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblSetItemHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblSetItemHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }

                                ///////////////////////////////////////////////////////////////////
                                //스트링 시작
                                ///////////////////////////////////////////////////////////////////


                                //int nIndexCount = CurrentMaxStringIndex();
                                //nIndexCount++;

                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임                                
                                // m_dgvData["Index_Name", m_dgvData.RowCount - 1].Style.ForeColor = Color.Red;


                                tblTrans.Rows.Add();
                                DataRow RowTrans = tblTrans.Rows[tblTrans.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowTrans["CountryCode"] = "HK";
                                RowTrans["DB"] = "ScriptData_HK";
                                RowTrans["TableName"] = "SetItem";
                                RowTrans["Column"] = "SetName";
                                RowTrans["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString());
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowTrans["String"] = tblSetItemHK.Rows[tblSetItemHK.Rows.Count - 1]["SetName"];
                                RowTrans["Create Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                RowTrans["Last Update Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());



                                ///////////////////////////////////////////////////////////////////
                                //스트링 끝
                                ///////////////////////////////////////////////////////////////////


                                for (int HKColumn_His = 0; HKColumn_His < tblSetItemHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_SetItemHK.Update(RowHK);
                                Adt_SetItemHK_History.Update(RowHK_History);


                                //Adpt_String.Update(tblScriptString);
                                //09. 06. 19 김정협 Trans
                                DataRow[] drArray = new DataRow[tblTrans.Rows.Count];
                                tblTrans.Rows.CopyTo(drArray, 0);
                                Adpt_Trans.Update(drArray);


                                /*drArray = new DataRow[tblTrans_History.Rows.Count];
                                tblTrans_History.Rows.CopyTo(drArray, 0);
                                Adpt_Trans_History.Update(drArray);*/

                            }


                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            //tblSetItemJP.Rows.Add();
                            tblSetItemJP_History.Rows.Add();
                            DataRow RowJP_History = tblSetItemJP_History.Rows[tblSetItemJP_History.Rows.Count - 1];



                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도

                            if (nRowIndex == -1)
                            {

                                for (int nTemp = 0; nTemp < tblSetItemJP.Columns.Count; nTemp++)
                                {
                                    tblSetItemJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// = tblSetItemJP.Rows[tblSetItemJP.Rows.Count - 1];
                                tblSetItemJP.Rows.Add();
                                RowJP = tblSetItemJP.Rows[tblSetItemJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblSetItemJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblSetItemJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }

                                ///////////////////////////////////////////////////////////////////
                                //스트링 시작
                                ///////////////////////////////////////////////////////////////////


                                //int nIndexCount = CurrentMaxStringIndex();
                                //nIndexCount++;

                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임                                
                                // m_dgvData["Index_Name", m_dgvData.RowCount - 1].Style.ForeColor = Color.Red;


                                tblTrans.Rows.Add();
                                DataRow RowTrans = tblTrans.Rows[tblTrans.Rows.Count - 1];
                                //Row["TransIDX"] = nIndexCount;
                                RowTrans["CountryCode"] = "JP";
                                RowTrans["DB"] = "ScriptData_JP";
                                RowTrans["TableName"] = "SetItem";
                                RowTrans["Column"] = "SetName";
                                RowTrans["Index"] = Convert.ToInt32(dtTemp.Rows[dtTemp.Rows.Count - 1]["IndexKey"].ToString());
                                //09. 06. 01 김정협 수정 : 0으로함  m_dgvData.RowCount - 1]이였지만 자동정렬이므로 추가하면 바로 첫행임
                                RowTrans["String"] = tblSetItemJP.Rows[tblSetItemJP.Rows.Count - 1]["SetName"];
                                RowTrans["Create Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());
                                RowTrans["Last Update Date"] = Convert.ToDateTime(dtTemp.Rows[dtTemp.Rows.Count - 1]["Regdate"].ToString());



                                ///////////////////////////////////////////////////////////////////
                                //스트링 끝
                                ///////////////////////////////////////////////////////////////////


                                for (int JPColumn_His = 0; JPColumn_His < tblSetItemJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_SetItemJP.Update(RowJP);
                                Adt_SetItemJP_History.Update(RowJP_History);


                                //Adpt_String.Update(tblScriptString);
                                //09. 06. 19 김정협 Trans
                                DataRow[] drArray = new DataRow[tblTrans.Rows.Count];
                                tblTrans.Rows.CopyTo(drArray, 0);
                                Adpt_Trans.Update(drArray);


                                /*drArray = new DataRow[tblTrans_History.Rows.Count];
                                tblTrans_History.Rows.CopyTo(drArray, 0);
                                Adpt_Trans_History.Update(drArray);*/

                            }
                            
#endif //__COUNTRY_KR__
                        }
                        break;
                    case 6:
                        {
                            
                            tblRandomBoxTable_History.Rows.Add();
                            Row_History = tblRandomBoxTable_History.Rows[tblRandomBoxTable_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblRandomBoxTable.Rows.Count; nRow++)
                            {
                                if (tblRandomBoxTable.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblRandomBoxTable.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblRandomBoxTable.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblRandomBoxTable.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];

                            //RandomBoxTable
                            Adpt_RandomBoxTable.Update(new DataRow[] { Row });
                            Adpt_RandomBoxTable_History.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨
#if __COUNTRY_KR__

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblRandomBoxTableTW.Rows.Add();
                            tblRandomBoxTableTW_History.Rows.Add();
                            DataRow RowTW_History = tblRandomBoxTableTW_History.Rows[tblRandomBoxTableTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblRandomBoxTableTW.Rows.Count; twRow++)
                            {
                                if (tblRandomBoxTableTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblRandomBoxTableTW.Columns.Count; nTemp++)
                                {
                                    tblRandomBoxTableTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblRandomBoxTableTW.Rows[ tblRandomBoxTableTW.Rows.Count - 1];
                                tblRandomBoxTableTW.Rows.Add();
                                RowTW = tblRandomBoxTableTW.Rows[tblRandomBoxTableTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblRandomBoxTableTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblRandomBoxTableTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }



                                for (int twColumn_His = 0; twColumn_His < tblRandomBoxTableTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_RandomBoxTableTW.Update(RowTW);
                                Adt_RandomBoxTableTW_History.Update(RowTW_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////
                            // tblRandomBoxTableHK.Rows.Add();
                            tblRandomBoxTableHK_History.Rows.Add();
                            DataRow RowHK_History = tblRandomBoxTableHK_History.Rows[tblRandomBoxTableHK_History.Rows.Count - 1];

                            
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblRandomBoxTableHK.Columns.Count; nTemp++)
                                {
                                    tblRandomBoxTableHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblRandomBoxTableHK.Rows[ tblRandomBoxTableHK.Rows.Count - 1];
                                tblRandomBoxTableHK.Rows.Add();
                                RowHK = tblRandomBoxTableHK.Rows[tblRandomBoxTableHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblRandomBoxTableHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblRandomBoxTableHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblRandomBoxTableHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_RandomBoxTableHK.Update(RowHK);
                                Adt_RandomBoxTableHK_History.Update(RowHK_History);
                            }


                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////
                            // tblRandomBoxTableJP.Rows.Add();
                            tblRandomBoxTableJP_History.Rows.Add();
                            DataRow RowJP_History = tblRandomBoxTableJP_History.Rows[tblRandomBoxTableJP_History.Rows.Count - 1];


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblRandomBoxTableJP.Columns.Count; nTemp++)
                                {
                                    tblRandomBoxTableJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblRandomBoxTableJP.Rows[ tblRandomBoxTableJP.Rows.Count - 1];
                                tblRandomBoxTableJP.Rows.Add();
                                RowJP = tblRandomBoxTableJP.Rows[tblRandomBoxTableJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblRandomBoxTableJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblRandomBoxTableJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblRandomBoxTableJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_RandomBoxTableJP.Update(RowJP);
                                Adt_RandomBoxTableJP_History.Update(RowJP_History);
                            }

#endif //__COUNTRY_KR__
                        }
                        break;
                    case 7:
                        {
                            

                            tblRandomItemGroup_History.Rows.Add();
                            Row_History = tblRandomItemGroup_History.Rows[tblRandomItemGroup_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblRandomItemGroup.Rows.Count; nRow++)
                            {
                                if (tblRandomItemGroup.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblRandomItemGroup.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblRandomItemGroup.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblRandomItemGroup.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];

                            //RandomItemGroup
                            Adpt_RandomItemGroup.Update(new DataRow[] { Row });
                            Adpt_RandomItemGroup_History.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨
#if __COUNTRY_KR__

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            // tblRandomItemGroupTW.Rows.Add();
                            tblRandomItemGroupTW_History.Rows.Add();
                            DataRow RowTW_History = tblRandomItemGroupTW_History.Rows[tblRandomItemGroupTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblRandomItemGroupTW.Rows.Count; twRow++)
                            {
                                if (tblRandomItemGroupTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblRandomItemGroupTW.Columns.Count; nTemp++)
                                {
                                    tblRandomItemGroupTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblRandomItemGroupTW.Rows[ tblRandomItemGroupTW.Rows.Count - 1];
                                tblRandomItemGroupTW.Rows.Add();
                                RowTW = tblRandomItemGroupTW.Rows[tblRandomItemGroupTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblRandomItemGroupTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblRandomItemGroupTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }



                                for (int twColumn_His = 0; twColumn_His < tblRandomItemGroupTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_RandomItemGroupTW.Update(RowTW);
                                Adt_RandomItemGroupTW_History.Update(RowTW_History);
                            }
                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////
                            // tblRandomItemGroupHK.Rows.Add();
                            tblRandomItemGroupHK_History.Rows.Add();
                            DataRow RowHK_History = tblRandomItemGroupHK_History.Rows[tblRandomItemGroupHK_History.Rows.Count - 1];

                            
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblRandomItemGroupHK.Columns.Count; nTemp++)
                                {
                                    tblRandomItemGroupHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblRandomItemGroupHK.Rows[ tblRandomItemGroupHK.Rows.Count - 1];
                                tblRandomItemGroupHK.Rows.Add();
                                RowHK = tblRandomItemGroupHK.Rows[tblRandomItemGroupHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblRandomItemGroupHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblRandomItemGroupHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblRandomItemGroupHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_RandomItemGroupHK.Update(RowHK);
                                Adt_RandomItemGroupHK_History.Update(RowHK_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////
                            // tblRandomItemGroupJP.Rows.Add();
                            tblRandomItemGroupJP_History.Rows.Add();
                            DataRow RowJP_History = tblRandomItemGroupJP_History.Rows[tblRandomItemGroupJP_History.Rows.Count - 1];


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblRandomItemGroupJP.Columns.Count; nTemp++)
                                {
                                    tblRandomItemGroupJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblRandomItemGroupJP.Rows[ tblRandomItemGroupJP.Rows.Count - 1];
                                tblRandomItemGroupJP.Rows.Add();
                                RowJP = tblRandomItemGroupJP.Rows[tblRandomItemGroupJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblRandomItemGroupJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblRandomItemGroupJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblRandomItemGroupJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_RandomItemGroupJP.Update(RowJP);
                                Adt_RandomItemGroupJP_History.Update(RowJP_History);
                            }
#endif //__COUNTRY_KR__
                        }
                        break;
                    case 8:
                        {
                            

                            tblExchangeTable_History.Rows.Add();
                            Row_History = tblExchangeTable_History.Rows[tblExchangeTable_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblExchangeTable.Rows.Count; nRow++)
                            {
                                if (tblExchangeTable.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblExchangeTable.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblExchangeTable.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblExchangeTable.Columns.Count - 2; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];

                            //ExchangeTable
                            Adpt_ExchangeTable.Update(new DataRow[] { Row });
                            Adpt_ExchangeTable_History.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨

#if __COUNTRY_KR__
                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                                                        
                            // tblExchangeTableTW.Rows.Add();
                            tblExchangeTableTW_History.Rows.Add();
                            DataRow RowTW_History = tblExchangeTableTW_History.Rows[tblExchangeTableTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblExchangeTableTW.Rows.Count; twRow++)
                            {
                                if (tblExchangeTableTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblExchangeTableTW.Columns.Count; nTemp++)
                                {
                                    tblExchangeTableTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblExchangeTableTW.Rows[ tblExchangeTableTW.Rows.Count - 1];
                                tblExchangeTableTW.Rows.Add();
                                RowTW = tblExchangeTableTW.Rows[tblExchangeTableTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblExchangeTableTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblExchangeTableTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }



                                for (int twColumn_His = 0; twColumn_His < tblExchangeTableTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_ExchangeTableTW.Update(RowTW);
                                Adt_ExchangeTableTW_History.Update(RowTW_History);
                            }
                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblExchangeTableHK.Rows.Add();
                            tblExchangeTableHK_History.Rows.Add();
                            DataRow RowHK_History = tblExchangeTableHK_History.Rows[tblExchangeTableHK_History.Rows.Count - 1];

                            
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblExchangeTableHK.Columns.Count; nTemp++)
                                {
                                    tblExchangeTableHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblExchangeTableHK.Rows[ tblExchangeTableHK.Rows.Count - 1];
                                tblExchangeTableHK.Rows.Add();
                                RowHK = tblExchangeTableHK.Rows[tblExchangeTableHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblExchangeTableHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblExchangeTableHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblExchangeTableHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_ExchangeTableHK.Update(RowHK);
                                Adt_ExchangeTableHK_History.Update(RowHK_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblExchangeTableJP.Rows.Add();
                            tblExchangeTableJP_History.Rows.Add();
                            DataRow RowJP_History = tblExchangeTableJP_History.Rows[tblExchangeTableJP_History.Rows.Count - 1];


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblExchangeTableJP.Columns.Count; nTemp++)
                                {
                                    tblExchangeTableJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblExchangeTableJP.Rows[ tblExchangeTableJP.Rows.Count - 1];
                                tblExchangeTableJP.Rows.Add();
                                RowJP = tblExchangeTableJP.Rows[tblExchangeTableJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblExchangeTableJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblExchangeTableJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblExchangeTableJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_ExchangeTableJP.Update(RowJP);
                                Adt_ExchangeTableJP_History.Update(RowJP_History);
                            }

#endif //__COUNTRY_KR__
                        }
                        break;
                    case 9:
                        {
                            
                            tblManufactureTable_History.Rows.Add();
                            Row_History = tblManufactureTable_History.Rows[tblManufactureTable_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblManufactureTable.Rows.Count; nRow++)
                            {
                                if (tblManufactureTable.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblManufactureTable.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblManufactureTable.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblManufactureTable.Columns.Count - 2; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];

                            //ManufactureTable 
                            Adpt_ManufactureTable.Update(new DataRow[] { Row });
                            Adpt_ManufactureTable_History.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨

#if __COUNTRY_KR__

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                                                                                    
                            // tblManufactureTableTW.Rows.Add();
                            tblManufactureTableTW_History.Rows.Add();
                            DataRow RowTW_History = tblManufactureTableTW_History.Rows[tblManufactureTableTW_History.Rows.Count - 1];
                            
                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblManufactureTableTW.Rows.Count; twRow++)
                            {
                                if (tblManufactureTableTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblManufactureTableTW.Columns.Count; nTemp++)
                                {
                                    tblManufactureTableTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblManufactureTableTW.Rows[ tblManufactureTableTW.Rows.Count - 1];
                                tblManufactureTableTW.Rows.Add();
                                RowTW = tblManufactureTableTW.Rows[tblManufactureTableTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblManufactureTableTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblManufactureTableTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }



                                for (int twColumn_His = 0; twColumn_His < tblManufactureTableTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_ManufactureTableTW.Update(RowTW);
                                Adt_ManufactureTableTW_History.Update(RowTW_History);
                            }
                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblManufactureTableHK.Rows.Add();
                            tblManufactureTableHK_History.Rows.Add();
                            DataRow RowHK_History = tblManufactureTableHK_History.Rows[tblManufactureTableHK_History.Rows.Count - 1];

                            
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblManufactureTableHK.Columns.Count; nTemp++)
                                {
                                    tblManufactureTableHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblManufactureTableHK.Rows[ tblManufactureTableHK.Rows.Count - 1];
                                tblManufactureTableHK.Rows.Add();
                                RowHK = tblManufactureTableHK.Rows[tblManufactureTableHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblManufactureTableHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblManufactureTableHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblManufactureTableHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_ManufactureTableHK.Update(RowHK);
                                Adt_ManufactureTableHK_History.Update(RowHK_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblManufactureTableJP.Rows.Add();
                            tblManufactureTableJP_History.Rows.Add();
                            DataRow RowJP_History = tblManufactureTableJP_History.Rows[tblManufactureTableJP_History.Rows.Count - 1];


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblManufactureTableJP.Columns.Count; nTemp++)
                                {
                                    tblManufactureTableJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblManufactureTableJP.Rows[ tblManufactureTableJP.Rows.Count - 1];
                                tblManufactureTableJP.Rows.Add();
                                RowJP = tblManufactureTableJP.Rows[tblManufactureTableJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblManufactureTableJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblManufactureTableJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblManufactureTableJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_ManufactureTableJP.Update(RowJP);
                                Adt_ManufactureTableJP_History.Update(RowJP_History);
                            }
#endif //__COUNTRY_KR__
                        }
                        break;
                    case 10:
                        {
                            
                            tblManufactureResultGroup_History.Rows.Add();
                            Row_History = tblManufactureResultGroup_History.Rows[tblManufactureResultGroup_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblManufactureResultGroup.Rows.Count; nRow++)
                            {
                                if (tblManufactureResultGroup.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblManufactureResultGroup.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblManufactureResultGroup.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblManufactureResultGroup.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];

                            //ManufactureResultGroup 
                            Adpt_ManufactureResultGroup.Update(new DataRow[] { Row });
                            Adpt_ManufactureResultGroup_History.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨
#if __COUNTRY_KR__
                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            
                            // tblManufactureResultGroupTW.Rows.Add();

                            tblManufactureResultGroupTW_History.Rows.Add();
                            DataRow RowTW_History = tblManufactureResultGroupTW_History.Rows[tblManufactureResultGroupTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblManufactureResultGroupTW.Rows.Count; twRow++)
                            {
                                if (tblManufactureResultGroupTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblManufactureResultGroupTW.Columns.Count; nTemp++)
                                {
                                    tblManufactureResultGroupTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblManufactureResultGroupTW.Rows[ tblManufactureResultGroupTW.Rows.Count - 1];
                                tblManufactureResultGroupTW.Rows.Add();
                                RowTW = tblManufactureResultGroupTW.Rows[tblManufactureResultGroupTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblManufactureResultGroupTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblManufactureResultGroupTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }



                                for (int twColumn_His = 0; twColumn_His < tblManufactureResultGroupTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_ManufactureResultGroupTW.Update(RowTW);
                                Adt_ManufactureResultGroupTW_History.Update(RowTW_History);
                            }
                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            tblManufactureResultGroupHK_History.Rows.Add();
                            DataRow RowHK_History = tblManufactureResultGroupHK_History.Rows[tblManufactureResultGroupHK_History.Rows.Count - 1];

                            
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblManufactureResultGroupHK.Columns.Count; nTemp++)
                                {
                                    tblManufactureResultGroupHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblManufactureResultGroupHK.Rows[ tblManufactureResultGroupHK.Rows.Count - 1];
                                tblManufactureResultGroupHK.Rows.Add();
                                RowHK = tblManufactureResultGroupHK.Rows[tblManufactureResultGroupHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblManufactureResultGroupHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblManufactureResultGroupHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblManufactureResultGroupHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_ManufactureResultGroupHK.Update(RowHK);
                                Adt_ManufactureResultGroupHK_History.Update(RowHK_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            tblManufactureResultGroupJP_History.Rows.Add();
                            DataRow RowJP_History = tblManufactureResultGroupJP_History.Rows[tblManufactureResultGroupJP_History.Rows.Count - 1];


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblManufactureResultGroupJP.Columns.Count; nTemp++)
                                {
                                    tblManufactureResultGroupJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblManufactureResultGroupJP.Rows[ tblManufactureResultGroupJP.Rows.Count - 1];
                                tblManufactureResultGroupJP.Rows.Add();
                                RowJP = tblManufactureResultGroupJP.Rows[tblManufactureResultGroupJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblManufactureResultGroupJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblManufactureResultGroupJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblManufactureResultGroupJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_ManufactureResultGroupJP.Update(RowJP);
                                Adt_ManufactureResultGroupJP_History.Update(RowJP_History);
                            }

#endif //__COUNTRY_KR__
                        }
                        break;
                    case 11:
                        {
                            
                            tblManufactureVillage_History.Rows.Add();
                            Row_History = tblManufactureVillage_History.Rows[tblManufactureVillage_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblManufactureVillage.Rows.Count; nRow++)
                            {
                                if (tblManufactureVillage.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblManufactureVillage.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblManufactureVillage.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            //09. 07. 09 김정협 사용자가 원하는 정렬을 해주기 위하여 숨김 인덱스 하나 추가
                            for (int Column = 0; Column < tblManufactureVillage.Columns.Count - 2; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];

                            //ManufactureVillage 
                            Adpt_ManufactureVillage.Update(new DataRow[] { Row });
                            Adpt_ManufactureVillage_History.Update(new DataRow[] { Row_History });



                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨

#if __COUNTRY_KR__
                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                                                        
                            // tblManufactureVillageTW.Rows.Add();
                            tblManufactureVillageTW_History.Rows.Add();
                            DataRow RowTW_History = tblManufactureVillageTW_History.Rows[tblManufactureVillageTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblManufactureVillageTW.Rows.Count; twRow++)
                            {
                                if (tblManufactureVillageTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblManufactureVillageTW.Columns.Count; nTemp++)
                                {
                                    tblManufactureVillageTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblManufactureVillageTW.Rows[ tblManufactureVillageTW.Rows.Count - 1];
                                tblManufactureVillageTW.Rows.Add();
                                RowTW = tblManufactureVillageTW.Rows[tblManufactureVillageTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblManufactureVillageTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblManufactureVillageTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }



                                for (int twColumn_His = 0; twColumn_His < tblManufactureVillageTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_ManufactureVillageTW.Update(RowTW);
                                Adt_ManufactureVillageTW_History.Update(RowTW_History);
                            }
                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////
                            // tblManufactureVillageHK.Rows.Add();
                            tblManufactureVillageHK_History.Rows.Add();
                            DataRow RowHK_History = tblManufactureVillageHK_History.Rows[tblManufactureVillageHK_History.Rows.Count - 1];

                            
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblManufactureVillageHK.Columns.Count; nTemp++)
                                {
                                    tblManufactureVillageHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblManufactureVillageHK.Rows[ tblManufactureVillageHK.Rows.Count - 1];
                                tblManufactureVillageHK.Rows.Add();
                                RowHK = tblManufactureVillageHK.Rows[tblManufactureVillageHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblManufactureVillageHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblManufactureVillageHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblManufactureVillageHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_ManufactureVillageHK.Update(RowHK);
                                Adt_ManufactureVillageHK_History.Update(RowHK_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////
                            // tblManufactureVillageJP.Rows.Add();
                            tblManufactureVillageJP_History.Rows.Add();
                            DataRow RowJP_History = tblManufactureVillageJP_History.Rows[tblManufactureVillageJP_History.Rows.Count - 1];


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblManufactureVillageJP.Columns.Count; nTemp++)
                                {
                                    tblManufactureVillageJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblManufactureVillageJP.Rows[ tblManufactureVillageJP.Rows.Count - 1];
                                tblManufactureVillageJP.Rows.Add();
                                RowJP = tblManufactureVillageJP.Rows[tblManufactureVillageJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblManufactureVillageJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblManufactureVillageJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblManufactureVillageJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_ManufactureVillageJP.Update(RowJP);
                                Adt_ManufactureVillageJP_History.Update(RowJP_History);
                            }
#endif //__COUNTRY_KR__
                        }
                        break;

                    case 12:
                        {
                            
                            tblAttribEnchantItem_History.Rows.Add();
                            Row_History = tblAttribEnchantItem_History.Rows[tblAttribEnchantItem_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblAttribEnchantItem.Rows.Count; nRow++)
                            {
                                if (tblAttribEnchantItem.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblAttribEnchantItem.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblAttribEnchantItem.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblAttribEnchantItem.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];

                            //AttribEnchantItem 
                            Adpt_AttribEnchantItem.Update(new DataRow[] { Row });
                            Adpt_AttribEnchantItem_History.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨
#if __COUNTRY_KR__

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblAttribEnchantItemTW.Rows.Add();
                            tblAttribEnchantItemTW_History.Rows.Add();
                            DataRow RowTW_History = tblAttribEnchantItemTW_History.Rows[tblAttribEnchantItemTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblAttribEnchantItemTW.Rows.Count; twRow++)
                            {
                                if (tblAttribEnchantItemTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblAttribEnchantItemTW.Columns.Count; nTemp++)
                                {
                                    tblAttribEnchantItemTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblAttribEnchantItemTW.Rows[ tblAttribEnchantItemTW.Rows.Count - 1];
                                tblAttribEnchantItemTW.Rows.Add();
                                RowTW = tblAttribEnchantItemTW.Rows[tblAttribEnchantItemTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblAttribEnchantItemTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblAttribEnchantItemTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }



                                for (int twColumn_His = 0; twColumn_His < tblAttribEnchantItemTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_AttribEnchantItemTW.Update(RowTW);
                                Adt_AttribEnchantItemTW_History.Update(RowTW_History);
                            }
                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblAttribEnchantItemHK.Rows.Add();
                            tblAttribEnchantItemHK_History.Rows.Add();
                            DataRow RowHK_History = tblAttribEnchantItemHK_History.Rows[tblAttribEnchantItemHK_History.Rows.Count - 1];

                            
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblAttribEnchantItemHK.Columns.Count; nTemp++)
                                {
                                    tblAttribEnchantItemHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblAttribEnchantItemHK.Rows[ tblAttribEnchantItemHK.Rows.Count - 1];
                                tblAttribEnchantItemHK.Rows.Add();
                                RowHK = tblAttribEnchantItemHK.Rows[tblAttribEnchantItemHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblAttribEnchantItemHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblAttribEnchantItemHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblAttribEnchantItemHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_AttribEnchantItemHK.Update(RowHK);
                                Adt_AttribEnchantItemHK_History.Update(RowHK_History);
                            }


                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblAttribEnchantItemJP.Rows.Add();
                            tblAttribEnchantItemJP_History.Rows.Add();
                            DataRow RowJP_History = tblAttribEnchantItemJP_History.Rows[tblAttribEnchantItemJP_History.Rows.Count - 1];


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblAttribEnchantItemJP.Columns.Count; nTemp++)
                                {
                                    tblAttribEnchantItemJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblAttribEnchantItemJP.Rows[ tblAttribEnchantItemJP.Rows.Count - 1];
                                tblAttribEnchantItemJP.Rows.Add();
                                RowJP = tblAttribEnchantItemJP.Rows[tblAttribEnchantItemJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblAttribEnchantItemJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblAttribEnchantItemJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblAttribEnchantItemJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_AttribEnchantItemJP.Update(RowJP);
                                Adt_AttribEnchantItemJP_History.Update(RowJP_History);
                            }

#endif //__COUNTRY_KR__
                        }
                        break;

                    case 13:
                        {
                            
                            tblAttribEnchantRequire_History.Rows.Add();
                            Row_History = tblAttribEnchantRequire_History.Rows[tblAttribEnchantRequire_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblAttribEnchantRequire.Rows.Count; nRow++)
                            {
                                if (tblAttribEnchantRequire.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblAttribEnchantRequire.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblAttribEnchantRequire.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblAttribEnchantRequire.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];

                            //AttribEnchantRequire 
                            Adpt_AttribEnchantRequire.Update(new DataRow[] { Row });
                            Adpt_AttribEnchantRequire_History.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨
#if __COUNTRY_KR__

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            
                            // tblAttribEnchantRequireTW.Rows.Add();
                            tblAttribEnchantRequireTW_History.Rows.Add();
                            DataRow RowTW_History = tblAttribEnchantRequireTW_History.Rows[tblAttribEnchantRequireTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblAttribEnchantRequireTW.Rows.Count; twRow++)
                            {
                                if (tblAttribEnchantRequireTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblAttribEnchantRequireTW.Columns.Count; nTemp++)
                                {
                                    tblAttribEnchantRequireTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblAttribEnchantRequireTW.Rows[ tblAttribEnchantRequireTW.Rows.Count - 1];
                                tblAttribEnchantRequireTW.Rows.Add();
                                RowTW = tblAttribEnchantRequireTW.Rows[tblAttribEnchantRequireTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblAttribEnchantRequireTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblAttribEnchantRequireTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }



                                for (int twColumn_His = 0; twColumn_His < tblAttribEnchantRequireTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_AttribEnchantRequireTW.Update(RowTW);
                                Adt_AttribEnchantRequireTW_History.Update(RowTW_History);
                            }
                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblAttribEnchantRequireHK.Rows.Add();
                            tblAttribEnchantRequireHK_History.Rows.Add();
                            DataRow RowHK_History = tblAttribEnchantRequireHK_History.Rows[tblAttribEnchantRequireHK_History.Rows.Count - 1];

                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblAttribEnchantRequireHK.Columns.Count; nTemp++)
                                {
                                    tblAttribEnchantRequireHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblAttribEnchantRequireHK.Rows[ tblAttribEnchantRequireHK.Rows.Count - 1];
                                tblAttribEnchantRequireHK.Rows.Add();
                                RowHK = tblAttribEnchantRequireHK.Rows[tblAttribEnchantRequireHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblAttribEnchantRequireHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblAttribEnchantRequireHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblAttribEnchantRequireHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_AttribEnchantRequireHK.Update(RowHK);
                                Adt_AttribEnchantRequireHK_History.Update(RowHK_History);
                            }


                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            // tblAttribEnchantRequireJP.Rows.Add();
                            tblAttribEnchantRequireJP_History.Rows.Add();
                            DataRow RowJP_History = tblAttribEnchantRequireJP_History.Rows[tblAttribEnchantRequireJP_History.Rows.Count - 1];

                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblAttribEnchantRequireJP.Columns.Count; nTemp++)
                                {
                                    tblAttribEnchantRequireJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblAttribEnchantRequireJP.Rows[ tblAttribEnchantRequireJP.Rows.Count - 1];
                                tblAttribEnchantRequireJP.Rows.Add();
                                RowJP = tblAttribEnchantRequireJP.Rows[tblAttribEnchantRequireJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblAttribEnchantRequireJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblAttribEnchantRequireJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblAttribEnchantRequireJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_AttribEnchantRequireJP.Update(RowJP);
                                Adt_AttribEnchantRequireJP_History.Update(RowJP_History);
                            }

#endif //__COUNTRY_KR__
                        }
                        break;

                    case 14:
                        {
                            
                            tblNpcExtraAbility_History.Rows.Add();
                            Row_History = tblNpcExtraAbility_History.Rows[tblNpcExtraAbility_History.Rows.Count - 1];

                            //09. 06. 01 김정협 수정 : ((sTableValue)m_ModifyIDList[i]).nRowIndex 대신
                            // IndexKey전부 검색 중간 삭제시 인덱스 어긋나기 때문
                            for (int nRow = 0; nRow < tblNpcExtraAbility.Rows.Count; nRow++)
                            {
                                if (tblNpcExtraAbility.Rows[nRow].RowState == DataRowState.Deleted)
                                {
                                    continue;
                                }
                                if (tblNpcExtraAbility.Rows[nRow]["IndexKey"].ToString() == ((sTableValue)m_ModifyIDList[i]).nIndexKey.ToString())
                                {
                                    Row = tblNpcExtraAbility.Rows[nRow];
                                    break;
                                }
                            }

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblNpcExtraAbility.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];


                            Adpt_NpcExtraAbility.Update(new DataRow[] { Row });
                            Adpt_NpcExtraAbility_History.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //국가별 #define처리 해 줄 것
                            // 이부분은 한국일경우만 실행하게 함. 한국에서 추가하면 모두 추가됨
#if __COUNTRY_KR__
                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            // tblNpcExtraAbilityTW.Rows.Add();
                            tblNpcExtraAbilityTW_History.Rows.Add();
                            DataRow RowTW_History = tblNpcExtraAbilityTW_History.Rows[tblNpcExtraAbilityTW_History.Rows.Count - 1];

                            int nRowIndex = -1;
                            for (int twRow = 0; twRow < tblNpcExtraAbilityTW.Rows.Count; twRow++)
                            {
                                if (tblNpcExtraAbilityTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    nRowIndex = twRow;
                                    break;
                                }
                            }
                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblNpcExtraAbilityTW.Columns.Count; nTemp++)
                                {
                                    tblNpcExtraAbilityTW.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowTW = null;// =  tblNpcExtraAbilityTW.Rows[ tblNpcExtraAbilityTW.Rows.Count - 1];
                                tblNpcExtraAbilityTW.Rows.Add();
                                RowTW = tblNpcExtraAbilityTW.Rows[tblNpcExtraAbilityTW.Rows.Count - 1];

                                for (int twColumn = 0; twColumn < tblNpcExtraAbilityTW.Columns.Count; twColumn++)
                                {
                                    /*if (tblNpcExtraAbilityTW.Columns[twColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowTW[twColumn] = Row[twColumn];
                                }



                                for (int twColumn_His = 0; twColumn_His < tblNpcExtraAbilityTW_History.Columns.Count; twColumn_His++)
                                {
                                    RowTW_History[twColumn_His] = Row_History[twColumn_His];
                                }

                                Adt_NpcExtraAbilityTW.Update(RowTW);
                                Adt_NpcExtraAbilityTW_History.Update(RowTW_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////
                            tblNpcExtraAbilityHK_History.Rows.Add();
                            DataRow RowHK_History = tblNpcExtraAbilityHK_History.Rows[tblNpcExtraAbilityHK_History.Rows.Count - 1];


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblNpcExtraAbilityHK.Columns.Count; nTemp++)
                                {
                                    tblNpcExtraAbilityHK.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowHK = null;// =  tblNpcExtraAbilityHK.Rows[ tblNpcExtraAbilityHK.Rows.Count - 1];
                                tblNpcExtraAbilityHK.Rows.Add();
                                RowHK = tblNpcExtraAbilityHK.Rows[tblNpcExtraAbilityHK.Rows.Count - 1];

                                for (int HKColumn = 0; HKColumn < tblNpcExtraAbilityHK.Columns.Count; HKColumn++)
                                {
                                    /*if (tblNpcExtraAbilityHK.Columns[HKColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowHK[HKColumn] = Row[HKColumn];
                                }



                                for (int HKColumn_His = 0; HKColumn_His < tblNpcExtraAbilityHK_History.Columns.Count; HKColumn_His++)
                                {
                                    RowHK_History[HKColumn_His] = Row_History[HKColumn_His];
                                }

                                Adt_NpcExtraAbilityHK.Update(RowHK);
                                Adt_NpcExtraAbilityHK_History.Update(RowHK_History);
                            }

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////
                            tblNpcExtraAbilityJP_History.Rows.Add();
                            DataRow RowJP_History = tblNpcExtraAbilityJP_History.Rows[tblNpcExtraAbilityJP_History.Rows.Count - 1];


                            //새로 항목이 추가된 경우에만 다른 나라 테이블에도
                            if (nRowIndex == -1)
                            {
                                for (int nTemp = 0; nTemp < tblNpcExtraAbilityJP.Columns.Count; nTemp++)
                                {
                                    tblNpcExtraAbilityJP.Columns[nTemp].AllowDBNull = true;
                                }
                                DataRow RowJP = null;// =  tblNpcExtraAbilityJP.Rows[ tblNpcExtraAbilityJP.Rows.Count - 1];
                                tblNpcExtraAbilityJP.Rows.Add();
                                RowJP = tblNpcExtraAbilityJP.Rows[tblNpcExtraAbilityJP.Rows.Count - 1];

                                for (int JPColumn = 0; JPColumn < tblNpcExtraAbilityJP.Columns.Count; JPColumn++)
                                {
                                    /*if (tblNpcExtraAbilityJP.Columns[JPColumn].ColumnName == "IndexKey")
                                    {
                                        continue;
                                    }*/
                                    RowJP[JPColumn] = Row[JPColumn];
                                }



                                for (int JPColumn_His = 0; JPColumn_His < tblNpcExtraAbilityJP_History.Columns.Count; JPColumn_His++)
                                {
                                    RowJP_History[JPColumn_His] = Row_History[JPColumn_His];
                                }

                                Adt_NpcExtraAbilityJP.Update(RowJP);
                                Adt_NpcExtraAbilityJP_History.Update(RowJP_History);
                            }
                            
#endif //__COUNTRY_KR__
                        }
                        break;
                }

            }

#if __COUNTRY_KR__
            for (int i = 0; i < m_DeleteRowList.Count; i++)
            {
                switch (((sDeleteRow)m_DeleteRowList[i]).nTabIndex)
                {
                    case 0:
                        {

                            tblItem_DeleteHistory.Rows.Add();

                            Row_History = tblItem_DeleteHistory.Rows[tblItem_DeleteHistory.Rows.Count - 1];
                                                        
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblItem.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;

                            Adpt.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_Item_DeleteHistory.Update(new DataRow[] { Row_History });

                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //           

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;                                                       

                            tblItemTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblItemTW_DeleteHistory.Rows[tblItemTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblItemTW.Rows.Count; twRow++)
                            {
                                if (tblItemTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblItemTW.Rows[twRow];
                                    break;
                                }
                            }

                            for(int twColumn = 0; twColumn < tblItemTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ItemTW_DeleteHistory.Update(drTW_DeleteHistory);

                            int nDeleteIndex = Convert.ToInt32(drTW["IndexKey"].ToString());

                            drTW.Delete();
                            Adt_ItemTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblItemHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblItemHK_DeleteHistory.Rows[tblItemHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblItemHK.Rows.Count; HKRow++)
                            {
                                if (tblItemHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblItemHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblItemHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ItemHK_DeleteHistory.Update(drHK_DeleteHistory);

                            //대만버전에서 이미 값을 받았음.
                            //int nDeleteIndex = Convert.ToInt32(drHK["IndexKey"].ToString());

                            drHK.Delete();
                            Adt_ItemHK.Update(drHK);

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblItemJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblItemJP_DeleteHistory.Rows[tblItemJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblItemJP.Rows.Count; JPRow++)
                            {
                                if (tblItemJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblItemJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblItemJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ItemJP_DeleteHistory.Update(drJP_DeleteHistory);

                            //대만버전에서 이미 값을 받았음.
                            //int nDeleteIndex = Convert.ToInt32(drJP["IndexKey"].ToString());

                            drJP.Delete();
                            Adt_ItemJP.Update(drJP);



                            Adpt_Trans.DeleteIndexRow(nDeleteIndex, "Item");
                            Adpt_Release.DeleteIndexRow(nDeleteIndex, "Item");

                        }
                        break;
                    case 1:
                        {
                            tblSpecialAbility_DeleteHistory.Rows.Add();
                            Row_History = tblSpecialAbility_DeleteHistory.Rows[tblSpecialAbility_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblSpecialAbility.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;
                             
                            Adpt_SpecialAbility.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_SpecialAbility_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //
                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;
                                                        
                            tblSpecialAbilityTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblSpecialAbilityTW_DeleteHistory.Rows[tblSpecialAbilityTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblSpecialAbilityTW.Rows.Count; twRow++)
                            {
                                if (tblSpecialAbilityTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblSpecialAbilityTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblSpecialAbilityTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SpecialAbilityTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_SpecialAbilityTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblSpecialAbilityHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblSpecialAbilityHK_DeleteHistory.Rows[tblSpecialAbilityHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblSpecialAbilityHK.Rows.Count; HKRow++)
                            {
                                if (tblSpecialAbilityHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblSpecialAbilityHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblSpecialAbilityHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SpecialAbilityHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_SpecialAbilityHK.Update(drHK);


                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblSpecialAbilityJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblSpecialAbilityJP_DeleteHistory.Rows[tblSpecialAbilityJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblSpecialAbilityJP.Rows.Count; JPRow++)
                            {
                                if (tblSpecialAbilityJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblSpecialAbilityJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblSpecialAbilityJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SpecialAbilityJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_SpecialAbilityJP.Update(drJP);

                            
                        }
                        break;
                    case 2:
                        {
                            tblSocketItem_DeleteHistory.Rows.Add();
                            Row_History = tblSocketItem_DeleteHistory.Rows[tblSocketItem_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblSocketItem.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;


                            Adpt_SocketItem.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_SocketItem_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //
                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;
                                                       

                            tblSocketItemTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblSocketItemTW_DeleteHistory.Rows[tblSocketItemTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblSocketItemTW.Rows.Count; twRow++)
                            {
                                if (tblSocketItemTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblSocketItemTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblSocketItemTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SocketItemTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_SocketItemTW.Update(drTW);
                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////
                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;


                            tblSocketItemHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblSocketItemHK_DeleteHistory.Rows[tblSocketItemHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblSocketItemHK.Rows.Count; HKRow++)
                            {
                                if (tblSocketItemHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblSocketItemHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblSocketItemHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SocketItemHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_SocketItemHK.Update(drHK);

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////
                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;


                            tblSocketItemJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblSocketItemJP_DeleteHistory.Rows[tblSocketItemJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblSocketItemJP.Rows.Count; JPRow++)
                            {
                                if (tblSocketItemJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblSocketItemJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblSocketItemJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SocketItemJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_SocketItemJP.Update(drJP);
                        }
                        break;
                    case 3:
                        {
                            tblSocketRandom_DeleteHistory.Rows.Add();
                            Row_History = tblSocketRandom_DeleteHistory.Rows[tblSocketRandom_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblSocketRandom.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;


                            Adpt_SocketRandom.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_SocketRandom_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //


                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;

                            

                            tblSocketRandomTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblSocketRandomTW_DeleteHistory.Rows[tblSocketRandomTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblSocketRandomTW.Rows.Count; twRow++)
                            {
                                if (tblSocketRandomTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblSocketRandomTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblSocketRandomTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SocketRandomTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_SocketRandomTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////
                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;



                            tblSocketRandomHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblSocketRandomHK_DeleteHistory.Rows[tblSocketRandomHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblSocketRandomHK.Rows.Count; HKRow++)
                            {
                                if (tblSocketRandomHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblSocketRandomHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblSocketRandomHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SocketRandomHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_SocketRandomHK.Update(drHK);


                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////
                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;



                            tblSocketRandomJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblSocketRandomJP_DeleteHistory.Rows[tblSocketRandomJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblSocketRandomJP.Rows.Count; JPRow++)
                            {
                                if (tblSocketRandomJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblSocketRandomJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblSocketRandomJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SocketRandomJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_SocketRandomJP.Update(drJP);

                        }
                        break;
                    case 4:
                        {
                            tblSocketGroup_DeleteHistory.Rows.Add();
                            Row_History = tblSocketGroup_DeleteHistory.Rows[tblSocketGroup_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblSocketGroup.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;

                            Adpt_SocketGroup.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_SocketGroup_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            
                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;
                            
                            tblSocketGroupTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblSocketGroupTW_DeleteHistory.Rows[tblSocketGroupTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblSocketGroupTW.Rows.Count; twRow++)
                            {
                                if (tblSocketGroupTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblSocketGroupTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblSocketGroupTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SocketGroupTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_SocketGroupTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblSocketGroupHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblSocketGroupHK_DeleteHistory.Rows[tblSocketGroupHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblSocketGroupHK.Rows.Count; HKRow++)
                            {
                                if (tblSocketGroupHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblSocketGroupHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblSocketGroupHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SocketGroupHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_SocketGroupHK.Update(drHK);

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblSocketGroupJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblSocketGroupJP_DeleteHistory.Rows[tblSocketGroupJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblSocketGroupJP.Rows.Count; JPRow++)
                            {
                                if (tblSocketGroupJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblSocketGroupJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblSocketGroupJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SocketGroupJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_SocketGroupJP.Update(drJP);

                        }
                        break;
                    case 5:
                        {
                            tblSetItem_DeleteHistory.Rows.Add();
                            Row_History = tblSetItem_DeleteHistory.Rows[tblSetItem_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblSetItem.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            Row_History["Regdate"] = Row["Regdate"];
                            //데이터
                            
                            Adpt_SetItem.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_SetItem_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;
                              
                            tblSetItemTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblSetItemTW_DeleteHistory.Rows[tblSetItemTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblSetItemTW.Rows.Count; twRow++)
                            {
                                if (tblSetItemTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblSetItemTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblSetItemTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SetItemTW_DeleteHistory.Update(drTW_DeleteHistory);

                            int nDeleteIndex = Convert.ToInt32(drTW["IndexKey"].ToString());

                            drTW.Delete();
                            Adt_SetItemTW.Update(drTW);

                            //Adpt_Trans.DeleteIndexRow(nDeleteIndex, "SetItem");
                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblSetItemHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblSetItemHK_DeleteHistory.Rows[tblSetItemHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblSetItemHK.Rows.Count; HKRow++)
                            {
                                if (tblSetItemHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblSetItemHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblSetItemHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SetItemHK_DeleteHistory.Update(drHK_DeleteHistory);
                                                       

                            drHK.Delete();
                            Adt_SetItemHK.Update(drHK);

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblSetItemJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblSetItemJP_DeleteHistory.Rows[tblSetItemJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblSetItemJP.Rows.Count; JPRow++)
                            {
                                if (tblSetItemJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblSetItemJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblSetItemJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_SetItemJP_DeleteHistory.Update(drJP_DeleteHistory);


                            drJP.Delete();
                            Adt_SetItemJP.Update(drJP);



                            Adpt_Trans.DeleteIndexRow(nDeleteIndex, "SetItem");
                            
                        }
                        break;
                    case 6:
                        {
                            tblRandomBoxTable_DeleteHistory.Rows.Add();
                            Row_History = tblRandomBoxTable_DeleteHistory.Rows[tblRandomBoxTable_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblRandomBoxTable.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;
                                                                                    

                            Adpt_RandomBoxTable.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_RandomBoxTable_DeleteHistory.Update(new DataRow[] { Row_History });

                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            
                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;

                            tblRandomBoxTableTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblRandomBoxTableTW_DeleteHistory.Rows[tblRandomBoxTableTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblRandomBoxTableTW.Rows.Count; twRow++)
                            {
                                if (tblRandomBoxTableTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblRandomBoxTableTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblRandomBoxTableTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_RandomBoxTableTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_RandomBoxTableTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblRandomBoxTableHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblRandomBoxTableHK_DeleteHistory.Rows[tblRandomBoxTableHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblRandomBoxTableHK.Rows.Count; HKRow++)
                            {
                                if (tblRandomBoxTableHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblRandomBoxTableHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblRandomBoxTableHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_RandomBoxTableHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_RandomBoxTableHK.Update(drHK);


                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblRandomBoxTableJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblRandomBoxTableJP_DeleteHistory.Rows[tblRandomBoxTableJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblRandomBoxTableJP.Rows.Count; JPRow++)
                            {
                                if (tblRandomBoxTableJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblRandomBoxTableJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblRandomBoxTableJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_RandomBoxTableJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_RandomBoxTableJP.Update(drJP);
                        }
                        break;
                    case 7:
                        {
                            tblRandomItemGroup_DeleteHistory.Rows.Add();
                            Row_History = tblRandomItemGroup_DeleteHistory.Rows[tblRandomItemGroup_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblRandomItemGroup.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;

                            Adpt_RandomItemGroup.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_RandomItemGroup_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //
                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;

                            tblRandomItemGroupTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblRandomItemGroupTW_DeleteHistory.Rows[tblRandomItemGroupTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblRandomItemGroupTW.Rows.Count; twRow++)
                            {
                                if (tblRandomItemGroupTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblRandomItemGroupTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblRandomItemGroupTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_RandomItemGroupTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_RandomItemGroupTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblRandomItemGroupHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblRandomItemGroupHK_DeleteHistory.Rows[tblRandomItemGroupHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblRandomItemGroupHK.Rows.Count; HKRow++)
                            {
                                if (tblRandomItemGroupHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblRandomItemGroupHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblRandomItemGroupHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_RandomItemGroupHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_RandomItemGroupHK.Update(drHK);


                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblRandomItemGroupJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblRandomItemGroupJP_DeleteHistory.Rows[tblRandomItemGroupJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblRandomItemGroupJP.Rows.Count; JPRow++)
                            {
                                if (tblRandomItemGroupJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblRandomItemGroupJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblRandomItemGroupJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_RandomItemGroupJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_RandomItemGroupJP.Update(drJP);

                        }
                        break;
                    case 8:
                        {
                            tblExchangeTable_DeleteHistory.Rows.Add();
                            Row_History = tblExchangeTable_DeleteHistory.Rows[tblExchangeTable_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblExchangeTable.Columns.Count - 2; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;

                            Adpt_ExchangeTable.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_ExchangeTable_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //
                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;

                            tblExchangeTableTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblExchangeTableTW_DeleteHistory.Rows[tblExchangeTableTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblExchangeTableTW.Rows.Count; twRow++)
                            {
                                if (tblExchangeTableTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblExchangeTableTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblExchangeTableTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ExchangeTableTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_ExchangeTableTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblExchangeTableHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblExchangeTableHK_DeleteHistory.Rows[tblExchangeTableHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblExchangeTableHK.Rows.Count; HKRow++)
                            {
                                if (tblExchangeTableHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblExchangeTableHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblExchangeTableHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ExchangeTableHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_ExchangeTableHK.Update(drHK);

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblExchangeTableJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblExchangeTableJP_DeleteHistory.Rows[tblExchangeTableJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblExchangeTableJP.Rows.Count; JPRow++)
                            {
                                if (tblExchangeTableJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblExchangeTableJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblExchangeTableJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ExchangeTableJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_ExchangeTableJP.Update(drJP);
                        }
                        break;
                    case 9:
                        {
                            tblManufactureTable_DeleteHistory.Rows.Add();
                            Row_History = tblManufactureTable_DeleteHistory.Rows[tblManufactureTable_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblManufactureTable.Columns.Count - 2; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;

                            Adpt_ManufactureTable.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_ManufactureTable_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //
                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;

                            tblManufactureTableTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblManufactureTableTW_DeleteHistory.Rows[tblManufactureTableTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblManufactureTableTW.Rows.Count; twRow++)
                            {
                                if (tblManufactureTableTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblManufactureTableTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblManufactureTableTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ManufactureTableTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_ManufactureTableTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblManufactureTableHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblManufactureTableHK_DeleteHistory.Rows[tblManufactureTableHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblManufactureTableHK.Rows.Count; HKRow++)
                            {
                                if (tblManufactureTableHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblManufactureTableHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblManufactureTableHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ManufactureTableHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_ManufactureTableHK.Update(drHK);

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblManufactureTableJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblManufactureTableJP_DeleteHistory.Rows[tblManufactureTableJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblManufactureTableJP.Rows.Count; JPRow++)
                            {
                                if (tblManufactureTableJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblManufactureTableJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblManufactureTableJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ManufactureTableJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_ManufactureTableJP.Update(drJP);
                        }
                        break;
                    case 10:
                        {
                            tblManufactureResultGroup_DeleteHistory.Rows.Add();
                            Row_History = tblManufactureResultGroup_DeleteHistory.Rows[tblManufactureResultGroup_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblManufactureResultGroup.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;


                            Adpt_ManufactureResultGroup.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_ManufactureResultGroup_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;

                            tblManufactureResultGroupTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblManufactureResultGroupTW_DeleteHistory.Rows[tblManufactureResultGroupTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblManufactureResultGroupTW.Rows.Count; twRow++)
                            {
                                if (tblManufactureResultGroupTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblManufactureResultGroupTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblManufactureResultGroupTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ManufactureResultGroupTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_ManufactureResultGroupTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblManufactureResultGroupHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblManufactureResultGroupHK_DeleteHistory.Rows[tblManufactureResultGroupHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblManufactureResultGroupHK.Rows.Count; HKRow++)
                            {
                                if (tblManufactureResultGroupHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblManufactureResultGroupHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblManufactureResultGroupHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ManufactureResultGroupHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_ManufactureResultGroupHK.Update(drHK);

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblManufactureResultGroupJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblManufactureResultGroupJP_DeleteHistory.Rows[tblManufactureResultGroupJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblManufactureResultGroupJP.Rows.Count; JPRow++)
                            {
                                if (tblManufactureResultGroupJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblManufactureResultGroupJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblManufactureResultGroupJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ManufactureResultGroupJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_ManufactureResultGroupJP.Update(drJP);
                        }
                        break;
                    case 11:
                        {
                            tblManufactureVillage_DeleteHistory.Rows.Add();
                            Row_History = tblManufactureVillage_DeleteHistory.Rows[tblManufactureVillage_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            //09. 07. 09 김정협 사용자가 원하는 정렬을 해주기 위하여 숨김 인덱스 하나 추가
                            for (int Column = 0; Column < tblManufactureVillage.Columns.Count - 2; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;

                            Adpt_ManufactureVillage.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_ManufactureVillage_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////
                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;
                            
                            tblManufactureVillageTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblManufactureVillageTW_DeleteHistory.Rows[tblManufactureVillageTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblManufactureVillageTW.Rows.Count; twRow++)
                            {
                                if (tblManufactureVillageTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblManufactureVillageTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblManufactureVillageTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ManufactureVillageTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_ManufactureVillageTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////
                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblManufactureVillageHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblManufactureVillageHK_DeleteHistory.Rows[tblManufactureVillageHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblManufactureVillageHK.Rows.Count; HKRow++)
                            {
                                if (tblManufactureVillageHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblManufactureVillageHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblManufactureVillageHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ManufactureVillageHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_ManufactureVillageHK.Update(drHK);


                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////
                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblManufactureVillageJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblManufactureVillageJP_DeleteHistory.Rows[tblManufactureVillageJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblManufactureVillageJP.Rows.Count; JPRow++)
                            {
                                if (tblManufactureVillageJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblManufactureVillageJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblManufactureVillageJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_ManufactureVillageJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_ManufactureVillageJP.Update(drJP);
                        }
                        break;
                    case 12:
                        {
                            tblAttribEnchantItem_DeleteHistory.Rows.Add();
                            Row_History = tblAttribEnchantItem_DeleteHistory.Rows[tblAttribEnchantItem_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblAttribEnchantItem.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;

                            Adpt_AttribEnchantItem.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_AttribEnchantItem_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;

                            tblAttribEnchantItemTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblAttribEnchantItemTW_DeleteHistory.Rows[tblAttribEnchantItemTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblAttribEnchantItemTW.Rows.Count; twRow++)
                            {
                                if (tblAttribEnchantItemTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblAttribEnchantItemTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblAttribEnchantItemTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_AttribEnchantItemTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_AttribEnchantItemTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblAttribEnchantItemHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblAttribEnchantItemHK_DeleteHistory.Rows[tblAttribEnchantItemHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblAttribEnchantItemHK.Rows.Count; HKRow++)
                            {
                                if (tblAttribEnchantItemHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblAttribEnchantItemHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblAttribEnchantItemHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_AttribEnchantItemHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_AttribEnchantItemHK.Update(drHK);

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblAttribEnchantItemJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblAttribEnchantItemJP_DeleteHistory.Rows[tblAttribEnchantItemJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblAttribEnchantItemJP.Rows.Count; JPRow++)
                            {
                                if (tblAttribEnchantItemJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblAttribEnchantItemJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblAttribEnchantItemJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_AttribEnchantItemJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_AttribEnchantItemJP.Update(drJP);
                        }
                        break;
                    case 13:
                        {
                            tblAttribEnchantRequire_DeleteHistory.Rows.Add();
                            Row_History = tblAttribEnchantRequire_DeleteHistory.Rows[tblAttribEnchantRequire_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblAttribEnchantRequire.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;


                            Adpt_AttribEnchantRequire.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_AttribEnchantRequire_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;

                            tblAttribEnchantRequireTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblAttribEnchantRequireTW_DeleteHistory.Rows[tblAttribEnchantRequireTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblAttribEnchantRequireTW.Rows.Count; twRow++)
                            {
                                if (tblAttribEnchantRequireTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblAttribEnchantRequireTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblAttribEnchantRequireTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_AttribEnchantRequireTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_AttribEnchantRequireTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblAttribEnchantRequireHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblAttribEnchantRequireHK_DeleteHistory.Rows[tblAttribEnchantRequireHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblAttribEnchantRequireHK.Rows.Count; HKRow++)
                            {
                                if (tblAttribEnchantRequireHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblAttribEnchantRequireHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblAttribEnchantRequireHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_AttribEnchantRequireHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_AttribEnchantRequireHK.Update(drHK);

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblAttribEnchantRequireJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblAttribEnchantRequireJP_DeleteHistory.Rows[tblAttribEnchantRequireJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblAttribEnchantRequireJP.Rows.Count; JPRow++)
                            {
                                if (tblAttribEnchantRequireJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblAttribEnchantRequireJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblAttribEnchantRequireJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_AttribEnchantRequireJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_AttribEnchantRequireJP.Update(drJP);
                        }
                        break;
                    case 14:
                        {
                            tblNpcExtraAbility_DeleteHistory.Rows.Add();
                            Row_History = tblNpcExtraAbility_DeleteHistory.Rows[tblNpcExtraAbility_DeleteHistory.Rows.Count - 1];
                            Row = ((sDeleteRow)m_DeleteRowList[i]).drOriginalRow;

                            //09. 06. 22 히스토리 입력부분 간소화
                            for (int Column = 0; Column < tblNpcExtraAbility.Columns.Count - 1; Column++)
                            {
                                Row_History[Column] = Row[Column];
                            }
                            Row_History["UserID"] = m_strID;
                            Row_History["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            Row_History["Regdate"] = DateTime.Now;

                            Adpt_NpcExtraAbility.Update(new DataRow[] { ((sDeleteRow)m_DeleteRowList[i]).drRow });
                            Adpt_NpcExtraAbility_DeleteHistory.Update(new DataRow[] { Row_History });


                            //09. 06. 19 김정협
                            //외국쪽 지우는 것
                            //

                            ///////////////////////////////////////////////////////////////////////////
                            //대만버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drTW = null;

                            DataRow drTW_DeleteHistory = null;

                            tblNpcExtraAbilityTW_DeleteHistory.Rows.Add();
                            drTW_DeleteHistory = tblNpcExtraAbilityTW_DeleteHistory.Rows[tblNpcExtraAbilityTW_DeleteHistory.Rows.Count - 1];

                            for (int twRow = 0; twRow < tblNpcExtraAbilityTW.Rows.Count; twRow++)
                            {
                                if (tblNpcExtraAbilityTW.Rows[twRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drTW = tblNpcExtraAbilityTW.Rows[twRow];
                                    break;
                                }
                            }

                            for (int twColumn = 0; twColumn < tblNpcExtraAbilityTW.Columns.Count - 1; twColumn++)
                            {
                                drTW_DeleteHistory[twColumn] = drTW[twColumn];
                            }
                            drTW_DeleteHistory["UserID"] = m_strID;
                            drTW_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drTW_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_NpcExtraAbilityTW_DeleteHistory.Update(drTW_DeleteHistory);

                            drTW.Delete();
                            Adt_NpcExtraAbilityTW.Update(drTW);

                            ///////////////////////////////////////////////////////////////////////////
                            //홍콩버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drHK = null;

                            DataRow drHK_DeleteHistory = null;

                            tblNpcExtraAbilityHK_DeleteHistory.Rows.Add();
                            drHK_DeleteHistory = tblNpcExtraAbilityHK_DeleteHistory.Rows[tblNpcExtraAbilityHK_DeleteHistory.Rows.Count - 1];

                            for (int HKRow = 0; HKRow < tblNpcExtraAbilityHK.Rows.Count; HKRow++)
                            {
                                if (tblNpcExtraAbilityHK.Rows[HKRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drHK = tblNpcExtraAbilityHK.Rows[HKRow];
                                    break;
                                }
                            }

                            for (int HKColumn = 0; HKColumn < tblNpcExtraAbilityHK.Columns.Count - 1; HKColumn++)
                            {
                                drHK_DeleteHistory[HKColumn] = drHK[HKColumn];
                            }
                            drHK_DeleteHistory["UserID"] = m_strID;
                            drHK_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drHK_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_NpcExtraAbilityHK_DeleteHistory.Update(drHK_DeleteHistory);

                            drHK.Delete();
                            Adt_NpcExtraAbilityHK.Update(drHK);

                            ///////////////////////////////////////////////////////////////////////////
                            //일본버전
                            ///////////////////////////////////////////////////////////////////////////

                            DataRow drJP = null;

                            DataRow drJP_DeleteHistory = null;

                            tblNpcExtraAbilityJP_DeleteHistory.Rows.Add();
                            drJP_DeleteHistory = tblNpcExtraAbilityJP_DeleteHistory.Rows[tblNpcExtraAbilityJP_DeleteHistory.Rows.Count - 1];

                            for (int JPRow = 0; JPRow < tblNpcExtraAbilityJP.Rows.Count; JPRow++)
                            {
                                if (tblNpcExtraAbilityJP.Rows[JPRow]["IndexKey"].ToString() == Row["IndexKey"].ToString())
                                {
                                    drJP = tblNpcExtraAbilityJP.Rows[JPRow];
                                    break;
                                }
                            }

                            for (int JPColumn = 0; JPColumn < tblNpcExtraAbilityJP.Columns.Count - 1; JPColumn++)
                            {
                                drJP_DeleteHistory[JPColumn] = drJP[JPColumn];
                            }
                            drJP_DeleteHistory["UserID"] = m_strID;
                            drJP_DeleteHistory["UserIP"] = strMyIP;
                            //09. 06. 22 김정협 DeleteBHistory에서 시간을 현재 지우는 시간으로
                            drJP_DeleteHistory["Regdate"] = DateTime.Now;

                            Adpt_NpcExtraAbilityJP_DeleteHistory.Update(drJP_DeleteHistory);

                            drJP.Delete();
                            Adt_NpcExtraAbilityJP.Update(drJP);
                        }
                        break;
                }
            }
#endif //__COUNTRY_KR__
            
            Adpt_ColorTable.Update(tblColor);
            Adpt_BorderTable.Update(tblBorder);

            tblColor.Clear();
            Adpt_ColorTable.Fill(tblColor);
            tblBorder.Clear();
            Adpt_BorderTable.Fill(tblBorder);

            if (m_bCopy)
            {
                Adpt_ExchangeTable.Update(tblExchangeTable);
                Adpt_ManufactureTable.Update(tblManufactureTable);
                Adpt_ManufactureVillage.Update(tblManufactureVillage);
                m_bCopy = false;
            }
            

            tblItem.Clear();
            Adpt.Fill(tblItem);

            tblSpecialAbility.Clear();
            Adpt_SpecialAbility.Fill(tblSpecialAbility);

            tblSocketItem.Clear();
            Adpt_SocketItem.Fill(tblSocketItem);

            tblSocketRandom.Clear();
            Adpt_SocketRandom.Fill(tblSocketRandom);

            tblSocketGroup.Clear();
            Adpt_SocketGroup.Fill(tblSocketGroup);

            tblSetItem.Clear();
            Adpt_SetItem.Fill(tblSetItem);

            tblRandomBoxTable.Clear();
            Adpt_RandomBoxTable.Fill(tblRandomBoxTable);


            tblRandomItemGroup.Clear();
            Adpt_RandomItemGroup.Fill(tblRandomItemGroup);

            tblExchangeTable.Clear();
            Adpt_ExchangeTable.Fill(tblExchangeTable);

            tblManufactureTable.Clear();
            Adpt_ManufactureTable.Fill(tblManufactureTable);

            tblManufactureResultGroup.Clear();
            Adpt_ManufactureResultGroup.Fill(tblManufactureResultGroup);

            tblManufactureVillage.Clear();
            Adpt_ManufactureVillage.Fill(tblManufactureVillage);

            tblAttribEnchantItem.Clear();
            Adpt_AttribEnchantItem.Fill(tblAttribEnchantItem);

            tblAttribEnchantRequire.Clear();
            Adpt_AttribEnchantRequire.Fill(tblAttribEnchantRequire);

            tblNpcExtraAbility.Clear();
            Adpt_NpcExtraAbility.Fill(tblNpcExtraAbility);

            SetCellBackgroundColorForDB(-1);
                                    
            m_ModifyIDList.Clear();
            m_ChangeCellList.Clear();
            m_DeleteRowList.Clear();
            m_UndoStack.Clear();
            m_RedoStack.Clear();
            m_bSaveEnd = true;



            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
            for (int nRowHeader = 0; nRowHeader < dataGridView1.RowCount; nRowHeader++)
            {
                dataGridView1.Rows[nRowHeader].HeaderCell.Value = dataGridView1["ID", nRowHeader].Value.ToString() + "     " + dataGridView1["Name", nRowHeader].Value.ToString();
            }

            tabControl1.SelectedIndex = 1;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
            for (int nRowHeader = 0; nRowHeader < dataGridView2.RowCount; nRowHeader++)
            {
                dataGridView2.Rows[nRowHeader].HeaderCell.Value = dataGridView2["ID", nRowHeader].Value.ToString() + "     " + dataGridView2["TYPE_", nRowHeader].Value.ToString();
            }

            tabControl1.SelectedIndex = 2;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
            for (int nRowHeader = 0; nRowHeader < dataGridView3.RowCount; nRowHeader++)
            {
                dataGridView3.Rows[nRowHeader].HeaderCell.Value = dataGridView3["ID", nRowHeader].Value.ToString() + "     " + dataGridView3["Description", nRowHeader].Value.ToString();
            }

            //소켓 랜덤 패스
            tabControl1.SelectedIndex = 3;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView4.RowCount; nRowHeader++)
            {
                dataGridView4.Rows[nRowHeader].HeaderCell.Value = "    ";
            }
            //소켓 그룹 패스
            tabControl1.SelectedIndex = 4;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView5.RowCount; nRowHeader++)
            {
                dataGridView5.Rows[nRowHeader].HeaderCell.Value = "    ";
            }


            tabControl1.SelectedIndex = 5;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
            for (int nRowHeader = 0; nRowHeader < dataGridView6.RowCount; nRowHeader++)
            {
                dataGridView6.Rows[nRowHeader].HeaderCell.Value = dataGridView6["SetID", nRowHeader].Value.ToString() + "     " + dataGridView6["SetName", nRowHeader].Value.ToString();
            }

            tabControl1.SelectedIndex = 6;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView7.RowCount; nRowHeader++)
            {
                dataGridView7.Rows[nRowHeader].HeaderCell.Value = dataGridView7["BoxID", nRowHeader].Value.ToString() + "     " + dataGridView7["BoxName", nRowHeader].Value.ToString();
            }

            //랜덤 그룹패스
            tabControl1.SelectedIndex = 7;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView8.RowCount; nRowHeader++)
            {
                dataGridView8.Rows[nRowHeader].HeaderCell.Value = "    ";
            }
            //익스체인지 패스
            tabControl1.SelectedIndex = 8;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView9.RowCount; nRowHeader++)
            {
                dataGridView9.Rows[nRowHeader].HeaderCell.Value = "    ";
            }

            tabControl1.SelectedIndex = 9;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView10.RowCount; nRowHeader++)
            {
                dataGridView10.Rows[nRowHeader].HeaderCell.Value = dataGridView10["Manufacture ID", nRowHeader].Value.ToString() + "     " + dataGridView10["Manufacture Name", nRowHeader].Value.ToString();
            }

            //메뉴팩쳐 리절트 패스
            tabControl1.SelectedIndex = 10;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView11.RowCount; nRowHeader++)
            {
                dataGridView11.Rows[nRowHeader].HeaderCell.Value = "    ";
            }
            //메뉴팩쳐 빌리지 패스
            tabControl1.SelectedIndex = 11;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView12.RowCount; nRowHeader++)
            {
                dataGridView12.Rows[nRowHeader].HeaderCell.Value = "    ";
            }

            tabControl1.SelectedIndex = 12;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView13.RowCount; nRowHeader++)
            {
                dataGridView13.Rows[nRowHeader].HeaderCell.Value = dataGridView13["ExtraDamageType", nRowHeader].Value.ToString() + "     " + dataGridView13["ExtraDamageType_", nRowHeader].Value.ToString();
            }
            //어트리뷰트 리콰이어 패스
            tabControl1.SelectedIndex = 13;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView14.RowCount; nRowHeader++)
            {
                dataGridView14.Rows[nRowHeader].HeaderCell.Value = "    ";
            }

            tabControl1.SelectedIndex = 14;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
            for (int nRowHeader = 0; nRowHeader < dataGridView15.RowCount; nRowHeader++)
            {
                dataGridView15.Rows[nRowHeader].HeaderCell.Value = dataGridView15["NPC_ABILITY_ID", nRowHeader].Value.ToString() + "     " + dataGridView15["NPC_ABILITY_ID_C", nRowHeader].Value.ToString();
            }
                        

            //09. 07. 01 김정협 현재 위치 기억
            tabControl1.SelectedIndex = nCurrentPosTabIndex;
            switch (nCurrentPosTabIndex)
            {
                case 0:
                    dataGridView1.CurrentCell = dataGridView1[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 1:
                    dataGridView2.CurrentCell = dataGridView2[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 2:
                    dataGridView3.CurrentCell = dataGridView3[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 3:
                    dataGridView4.CurrentCell = dataGridView4[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 4:
                    dataGridView5.CurrentCell = dataGridView5[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 5:
                    dataGridView6.CurrentCell = dataGridView6[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 6:
                    dataGridView7.CurrentCell = dataGridView7[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 7:
                    dataGridView8.CurrentCell = dataGridView8[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 8:
                    dataGridView9.CurrentCell = dataGridView9[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 9:
                    dataGridView10.CurrentCell = dataGridView10[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 10:
                    dataGridView11.CurrentCell = dataGridView11[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 11:
                    dataGridView12.CurrentCell = dataGridView12[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 12:
                    dataGridView13.CurrentCell = dataGridView13[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 13:
                    dataGridView14.CurrentCell = dataGridView14[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;
                case 14:
                    dataGridView15.CurrentCell = dataGridView15[nCurrentPosColumnIndex, nCurrentPosRowIndex];
                    break;

            }

        }


        public void SetCellBackgroundColorForDB(int nSelect)
        {            
            //09. 06. 03 김정협 추가 : 셀배경색 DB에서 로딩함
            for (int i = 0; i < tblColor.Rows.Count; i++)
            {
                if (tblColor.Rows[i].RowState == DataRowState.Deleted)
                {
                    continue;
                }

                DataRow drTemp = tblColor.Rows[i];
                int nColumn = Convert.ToInt32(drTemp["Column"].ToString());
                int nARGB = Convert.ToInt32(drTemp["Color"].ToString());

                if (nARGB == 0)
                {
                    tblColor.Rows[i].Delete();
                    continue;
                }

                int nRow = -1;

                if (drTemp["TableName"].ToString() == "Item" && (nSelect == 0 || nSelect == -1))
                {
                    /*for (int j = 0; j < dataGridView1.RowCount; j++)
                    {
                        if (dataGridView1["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView1["IndexKey", j].RowIndex;
                            break;
                        }
                    }*/

                    int nLeft = 0;
                    int nRight = dataGridView1.RowCount - 1;

                    while (nLeft <= nRight)
                    {
                        int nMid = (nLeft + nRight) / 2;

                        int nDgv = Convert.ToInt32(dataGridView1["ID", nMid].Value.ToString());
                        int nColorID = Convert.ToInt32(drTemp["IndexNum"].ToString());
                        if (nDgv == nColorID)
                        {
                            nRow = dataGridView1["ID", nMid].RowIndex;
                            break;
                        }
                        if (nDgv < nColorID)
                        {
                            nLeft = nMid + 1;
                        }
                        if (nDgv > nColorID)
                        {
                            nRight = nMid - 1;
                        }
                    }


                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 0;
                        dataGridView1[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }

                    //dataGridView1.RefreshEdit();
                    //dataGridView1.Refresh();

                }
                else if (drTemp["TableName"].ToString() == "SpecialAbility" && (nSelect == 1 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView2.RowCount; j++)
                    {
                        if (dataGridView2["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView2["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 1;
                        dataGridView2[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }

                    //dataGridView2.RefreshEdit();
                    // dataGridView2.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "SocketItem" && (nSelect == 2 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView3.RowCount; j++)
                    {
                        if (dataGridView3["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView3["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 2;
                        dataGridView3[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }

                    // dataGridView3.RefreshEdit();
                    // dataGridView3.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "SocketRandom" && (nSelect == 3 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView4.RowCount; j++)
                    {
                        if (dataGridView4["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView4["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 3;
                        dataGridView4[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }
                    // dataGridView4.RefreshEdit();
                    // dataGridView4.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "SocketGroup" && (nSelect == 4 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView5.RowCount; j++)
                    {
                        if (dataGridView5["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView5["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 4;
                        dataGridView5[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }

                    //dataGridView5.RefreshEdit();
                    //dataGridView5.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "SetItem" && (nSelect == 5 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView6.RowCount; j++)
                    {
                        if (dataGridView6["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView6["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 5;
                        dataGridView6[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }

                    // dataGridView6.RefreshEdit();
                    //dataGridView6.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "RandomBoxTable" && (nSelect == 6 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView7.RowCount; j++)
                    {
                        if (dataGridView7["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView7["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 6;
                        dataGridView7[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }

                    //dataGridView7.RefreshEdit();
                    // dataGridView7.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "RandomItemGroup" && (nSelect == 7 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView8.RowCount; j++)
                    {
                        if (dataGridView8["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView8["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 7;
                        dataGridView8[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }

                    // dataGridView8.RefreshEdit();
                    //  dataGridView8.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "ExchangeTable" && (nSelect == 8 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView9.RowCount; j++)
                    {
                        if (dataGridView9["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView9["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 8;
                        dataGridView9[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }

                    //dataGridView9.RefreshEdit();
                    // dataGridView9.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "ManufactureTable" && (nSelect == 9 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView10.RowCount; j++)
                    {
                        if (dataGridView10["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView10["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 9;
                        dataGridView10[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }

                    // dataGridView10.RefreshEdit();
                    // dataGridView10.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "ManufactureResultGroup" && (nSelect == 10 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView11.RowCount; j++)
                    {
                        if (dataGridView11["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView11["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 10;
                        dataGridView11[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }

                    // dataGridView11.RefreshEdit();
                    // dataGridView11.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "ManufactureVillage" && (nSelect == 11 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView12.RowCount; j++)
                    {
                        if (dataGridView12["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView12["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 11;
                        dataGridView12[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }
                    //  dataGridView12.RefreshEdit();
                    // dataGridView12.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "AttribEnchantItem" && (nSelect == 12 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView13.RowCount; j++)
                    {
                        if (dataGridView13["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView13["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 12;
                        dataGridView13[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }

                    //dataGridView13.RefreshEdit();
                    // dataGridView13.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "AttribEnchantRequire" && (nSelect == 13 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView14.RowCount; j++)
                    {
                        if (dataGridView14["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView14["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 13;
                        dataGridView14[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }

                    // dataGridView14.RefreshEdit();
                    // dataGridView14.Refresh();
                }
                else if (drTemp["TableName"].ToString() == "NpcExtraAbility" && (nSelect == 14 || nSelect == -1))
                {
                    for (int j = 0; j < dataGridView15.RowCount; j++)
                    {
                        if (dataGridView15["IndexKey", j].Value.ToString() == drTemp["IndexNum"].ToString())
                        {
                            nRow = dataGridView15["IndexKey", j].RowIndex;
                            break;
                        }
                    }
                    if (nRow != -1)
                    {
                        tabControl1.SelectedIndex = 14;
                        dataGridView15[nColumn, nRow].Style.BackColor = Color.FromArgb(nARGB);
                    }
                    else
                    {
                        tblColor.Rows[i].Delete();
                        //Adpt_ColorTable.Update(tblColor);
                    }
                    // dataGridView15.RefreshEdit();
                    // dataGridView15.Refresh();
                }
            }
            if (nSelect == -1)
            {
                tabControl1.SelectedIndex = 0;
            }

            
        }


        private void ItemTable_Load(object sender, EventArgs e)
        {   
            Con = new SqlConnection();
            //국가별 define 정의
#if __COUNTRY_KR__
            Con.ConnectionString = "server=116.120.238.52,3130; database=ScriptData; uid=Script_User; pwd=x2_tmzmflqxm";
            btnAdd.Enabled = true;
            btnMultiAdd.Enabled = true;
#elif __COUNTRY_TW__
            Con.ConnectionString = "server=116.120.238.52,3130; database=ScriptData_TW; uid=Script_User; pwd=x2_tmzmflqxm";
            btnAdd.Enabled = false;
            btnMultiAdd.Enabled = false;
#elif __COUNTRY_HK__
            Con.ConnectionString = "server=116.120.238.52,3130; database=ScriptData_HK; uid=Script_User; pwd=x2_tmzmflqxm";
            btnAdd.Enabled = false;
            btnMultiAdd.Enabled = false;
#elif __COUNTRY_JP__
            Con.ConnectionString = "server=116.120.238.52,3130; database=ScriptData_JP; uid=Script_User; pwd=x2_tmzmflqxm";
            btnAdd.Enabled = false;
            btnMultiAdd.Enabled = false;
#endif


            Con.Open();

            dataGridView1.ContextMenuStrip = contextMenuStrip1;
            dataGridView2.ContextMenuStrip = contextMenuStrip1;
            dataGridView3.ContextMenuStrip = contextMenuStrip1;
            dataGridView4.ContextMenuStrip = contextMenuStrip1;
            dataGridView5.ContextMenuStrip = contextMenuStrip1;
            dataGridView6.ContextMenuStrip = contextMenuStrip1;
            dataGridView7.ContextMenuStrip = contextMenuStrip1;
            dataGridView8.ContextMenuStrip = contextMenuStrip1;
            dataGridView9.ContextMenuStrip = contextMenuStrip1;
            dataGridView10.ContextMenuStrip = contextMenuStrip1;
            dataGridView11.ContextMenuStrip = contextMenuStrip1;
            dataGridView12.ContextMenuStrip = contextMenuStrip1;
            dataGridView13.ContextMenuStrip = contextMenuStrip1;
            dataGridView14.ContextMenuStrip = contextMenuStrip1;
            dataGridView15.ContextMenuStrip = contextMenuStrip1;

            
            Adpt = new SqlDataAdapter("SELECT * FROM Item", Con);
            tblItem = new DataTable("tblItem");

            SqlCommandBuilder Builder = new SqlCommandBuilder(Adpt);
            Adpt.Fill(tblItem);
            dataGridView1.DataSource = tblItem;
            dataGridView1.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView1.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView1.Columns["Regdate"].ReadOnly = true; //Reg_data수정방지

            //09. 06. 06 김정협
            dataGridView1.Columns["Item Type_"].ReadOnly = true; //수정방지
            dataGridView1.Columns["ITEMTYPE_C"].ReadOnly = true; //수정방지
            dataGridView1.Columns["Use Type_"].ReadOnly = true; //수정방지
            dataGridView1.Columns["USETYPE_C"].ReadOnly = true; //수정방지
            dataGridView1.Columns["Period Type_"].ReadOnly = true; //수정방지
            dataGridView1.Columns["PERIODTYPE_C"].ReadOnly = true; //수정방지

            dataGridView1.Columns["Price Type_"].ReadOnly = true; //수정방지
            dataGridView1.Columns["PRICETYPE_C"].ReadOnly = true; //수정방지
            dataGridView1.Columns["Use Condition_"].ReadOnly = true; //수정방지
            dataGridView1.Columns["USECONDITION_C"].ReadOnly = true; //수정방지
            dataGridView1.Columns["Unit Type_"].ReadOnly = true; //수정방지
            dataGridView1.Columns["UNITTYPE_C"].ReadOnly = true; //수정방지
            dataGridView1.Columns["Unit Class_"].ReadOnly = true; //수정방지
            dataGridView1.Columns["UNITCLASS_C"].ReadOnly = true; //수정방지
            dataGridView1.Columns["Eqip Position_"].ReadOnly = true; //수정방지
            dataGridView1.Columns["EQIPPOSITION_C"].ReadOnly = true; //수정방지
            dataGridView1.Columns["Item Grade_"].ReadOnly = true; //수정방지
            dataGridView1.Columns["ITEMGRADE_C"].ReadOnly = true; //수정방지

            dataGridView1.Columns["EnduranceDamageMin"].ReadOnly = true; //수정방지
            dataGridView1.Columns["EnduranceDamageMax"].ReadOnly = true; //수정방지
            dataGridView1.Columns["Repair ED"].ReadOnly = true; //수정방지


            dataGridView1.Columns["Item Type_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["ITEMTYPE_C"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["Use Type_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["USETYPE_C"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["Period Type_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["PERIODTYPE_C"].DefaultCellStyle.BackColor = Color.LightGray;

            dataGridView1.Columns["Price Type_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["PRICETYPE_C"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["Use Condition_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["USECONDITION_C"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["Unit Type_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["UNITTYPE_C"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["Unit Class_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["UNITCLASS_C"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["Eqip Position_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["EQIPPOSITION_C"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["Item Grade_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["ITEMGRADE_C"].DefaultCellStyle.BackColor = Color.LightGray;

            dataGridView1.Columns["EnduranceDamageMin"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["EnduranceDamageMax"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView1.Columns["Repair ED"].DefaultCellStyle.BackColor = Color.LightGray;



            for (int i = 0; i < dataGridView1.ColumnCount; i++)
            {
                dataGridView1.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 06. 01 김정협 수정 : 아이디로 오름차순 정렬
            DataGridViewColumn Column_1 = dataGridView1.Columns[1];//dataGridView1.Columns["ID"];
            ListSortDirection direction_1 = ListSortDirection.Ascending;
            dataGridView1.Sort(Column_1, direction_1);

            //History
            Adpt_Item_History = new SqlDataAdapter("SELECT * FROM Item_History", Con);
            tblItem_History = new DataTable("tblItem_History");
            SqlCommandBuilder Builder_History = new SqlCommandBuilder(Adpt_Item_History);
            Adpt_Item_History.Fill(tblItem_History);

            //Delete
            Adpt_Item_DeleteHistory = new SqlDataAdapter("SELECT * FROM Item_DeleteHistory", Con);
            tblItem_DeleteHistory = new DataTable("tblItem_DeleteHistory");
            SqlCommandBuilder Builder_Item_Delete = new SqlCommandBuilder(Adpt_Item_DeleteHistory);
            Adpt_Item_DeleteHistory.Fill(tblItem_DeleteHistory);

            //09. 06. 19 김정협 Trans/Release 로드
            //Trans
            //Adpt_String = new SqlDataAdapter("SELECT * FROM ScriptStringTable", Con);
            tblTrans = Adpt_Trans.GetData();
            tblTrans_History = Adpt_Trans_History.GetData();
            //Release
            tblRelease = Adpt_Release.GetData();
            tblRelease_History = Adpt_Release_History.GetData();
            //SqlCommandBuilder Builder_String = new SqlCommandBuilder(Adpt_String);
            

            //SpecialAbility
            Adpt_SpecialAbility = new SqlDataAdapter("SELECT * FROM SpecialAbility", Con);
            tblSpecialAbility = new DataTable("tblSpecialAbility");
            SqlCommandBuilder Builder_SpecialAbility = new SqlCommandBuilder(Adpt_SpecialAbility);
            Adpt_SpecialAbility.Fill(tblSpecialAbility);
            dataGridView2.DataSource = tblSpecialAbility;
            dataGridView2.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView2.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView2.Columns["Regdate"].ReadOnly = true; //대리키수정방지

            //09. 06. 06 김정협
            dataGridView2.Columns["TYPE_"].ReadOnly = true; //수정방지
            dataGridView2.Columns["TYPE_C"].ReadOnly = true; //수정방지            

            dataGridView2.Columns["TYPE_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView2.Columns["TYPE_C"].DefaultCellStyle.BackColor = Color.LightGray;

            for (int i = 0; i < dataGridView2.ColumnCount; i++)
            {
                dataGridView2.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 06. 01 김정협 수정 : 아이디로 오름차순 정렬
            DataGridViewColumn Column_2 = dataGridView2.Columns[1];//dataGridView1.Columns["ID"];
            ListSortDirection direction_2 = ListSortDirection.Ascending;
            dataGridView2.Sort(Column_2, direction_2);

            //SpecialAbility_History
            Adpt_SpecialAbility_History = new SqlDataAdapter("SELECT * FROM SpecialAbility_History", Con);
            tblSpecialAbility_History = new DataTable("tblSpecialAbility_History");

            SqlCommandBuilder Builder_SpecialAbility_History = new SqlCommandBuilder(Adpt_SpecialAbility_History);
            Adpt_SpecialAbility_History.Fill(tblSpecialAbility_History);
            //Delete
            Adpt_SpecialAbility_DeleteHistory = new SqlDataAdapter("SELECT * FROM SpecialAbility_DeleteHistory", Con);
            tblSpecialAbility_DeleteHistory = new DataTable("tblSpecialAbility_DeleteHistory");
            SqlCommandBuilder Builder_SpecialAbility_Delete = new SqlCommandBuilder(Adpt_SpecialAbility_DeleteHistory);
            Adpt_SpecialAbility_DeleteHistory.Fill(tblSpecialAbility_DeleteHistory);



            //SocketItem
            Adpt_SocketItem = new SqlDataAdapter("SELECT * FROM SocketItem", Con);
            tblSocketItem = new DataTable("tblSocketItem");
            SqlCommandBuilder Builder_SocketItem = new SqlCommandBuilder(Adpt_SocketItem);
            Adpt_SocketItem.Fill(tblSocketItem);
            dataGridView3.DataSource = tblSocketItem;
            dataGridView3.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView3.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView3.Columns["Regdate"].ReadOnly = true; //대리키수정방지

            //09. 06. 06 김정협
            dataGridView3.Columns["Socket Type_"].ReadOnly = true; //수정방지
            dataGridView3.Columns["Socket Type_C"].ReadOnly = true; //수정방지

            dataGridView3.Columns["ExtraDamageType_"].ReadOnly = true; //수정방지
            dataGridView3.Columns["ExtraDamageType_C"].ReadOnly = true; //수정방지

            dataGridView3.Columns["ExtraDamageResistType_"].ReadOnly = true; //수정방지
            dataGridView3.Columns["ExtraDamageResistType_C"].ReadOnly = true; //수정방지

            dataGridView3.Columns["ImmuneExtraDamageType_"].ReadOnly = true; //수정방지
            dataGridView3.Columns["ImmuneExtraDamageType_C"].ReadOnly = true; //수정방지

            dataGridView3.Columns["Socket Type_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView3.Columns["Socket Type_C"].DefaultCellStyle.BackColor = Color.LightGray;

            dataGridView3.Columns["ExtraDamageType_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView3.Columns["ExtraDamageType_C"].DefaultCellStyle.BackColor = Color.LightGray;

            dataGridView3.Columns["ExtraDamageResistType_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView3.Columns["ExtraDamageResistType_C"].DefaultCellStyle.BackColor = Color.LightGray;

            dataGridView3.Columns["ImmuneExtraDamageType_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView3.Columns["ImmuneExtraDamageType_C"].DefaultCellStyle.BackColor = Color.LightGray;


            for (int i = 0; i < dataGridView3.ColumnCount; i++)
            {
                dataGridView3.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 06. 01 김정협 수정 : 아이디로 오름차순 정렬
            DataGridViewColumn Column_3 = dataGridView3.Columns[1];//dataGridView1.Columns["ID"];
            ListSortDirection direction_3 = ListSortDirection.Ascending;
            dataGridView3.Sort(Column_3, direction_3);

            //SocketItem_History
            Adpt_SocketItem_History = new SqlDataAdapter("SELECT * FROM SocketItem_History", Con);
            tblSocketItem_History = new DataTable("tblSocketItem_History");
            SqlCommandBuilder Builder_SocketItem_History = new SqlCommandBuilder(Adpt_SocketItem_History);
            Adpt_SocketItem_History.Fill(tblSocketItem_History);

            //Delete
            Adpt_SocketItem_DeleteHistory = new SqlDataAdapter("SELECT * FROM SocketItem_DeleteHistory", Con);
            tblSocketItem_DeleteHistory = new DataTable("tblSocketItem_DeleteHistory");
            SqlCommandBuilder Builder_SocketItem_Delete = new SqlCommandBuilder(Adpt_SocketItem_DeleteHistory);
            Adpt_SocketItem_DeleteHistory.Fill(tblSocketItem_DeleteHistory);


            //SocketRandom
            Adpt_SocketRandom = new SqlDataAdapter("SELECT * FROM SocketRandom", Con);
            tblSocketRandom = new DataTable("tblSocketRandom");
            SqlCommandBuilder Builder_SocketRandom = new SqlCommandBuilder(Adpt_SocketRandom);
            Adpt_SocketRandom.Fill(tblSocketRandom);
            dataGridView4.DataSource = tblSocketRandom;
            dataGridView4.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView4.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView4.Columns["Regdate"].ReadOnly = true; //대리키수정방지

            dataGridView4.Columns["SocketDataType_"].ReadOnly = true; //수정방지

            dataGridView4.Columns["SocketDataType_"].DefaultCellStyle.BackColor = Color.LightGray;

            for (int i = 0; i < dataGridView4.ColumnCount; i++)
            {
                dataGridView4.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 06. 01 김정협 수정 : 아이디로 오름차순 정렬
            DataGridViewColumn Column_4 = dataGridView4.Columns[1];//dataGridView1.Columns["ID"];
            ListSortDirection direction_4 = ListSortDirection.Ascending;
            dataGridView4.Sort(Column_4, direction_4);

            //SocketRandom_History
            Adpt_SocketRandom_History = new SqlDataAdapter("SELECT * FROM SocketRandom_History", Con);
            tblSocketRandom_History = new DataTable("tblSocketRandom_History");
            SqlCommandBuilder Builder_SocketRandom_History = new SqlCommandBuilder(Adpt_SocketRandom_History);
            Adpt_SocketRandom_History.Fill(tblSocketRandom_History);

            //Delete
            Adpt_SocketRandom_DeleteHistory = new SqlDataAdapter("SELECT * FROM SocketRandom_DeleteHistory", Con);
            tblSocketRandom_DeleteHistory = new DataTable("tblSocketRandom_DeleteHistory");
            SqlCommandBuilder Builder_SocketRandom_Delete = new SqlCommandBuilder(Adpt_SocketRandom_DeleteHistory);
            Adpt_SocketRandom_DeleteHistory.Fill(tblSocketRandom_DeleteHistory);


            //SocketGroup 용
            Adpt_SocketGroup = new SqlDataAdapter("SELECT * FROM SocketGroup", Con);
            tblSocketGroup = new DataTable("tblSocketGroup");
            SqlCommandBuilder Builder_SocketGroup = new SqlCommandBuilder(Adpt_SocketGroup);
            Adpt_SocketGroup.Fill(tblSocketGroup);
            dataGridView5.DataSource = tblSocketGroup;
            dataGridView5.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView5.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView5.Columns["Regdate"].ReadOnly = true; //대리키수정방지

            dataGridView5.Columns["Option_Des"].ReadOnly = true; //수정방지

            dataGridView5.Columns["Option_Des"].DefaultCellStyle.BackColor = Color.LightGray;

            for (int i = 0; i < dataGridView5.ColumnCount; i++)
            {
                dataGridView5.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 06. 01 김정협 수정 : 아이디로 오름차순 정렬
            DataGridViewColumn Column_5 = dataGridView5.Columns[1];//dataGridView1.Columns["ID"];
            ListSortDirection direction_5 = ListSortDirection.Ascending;
            dataGridView5.Sort(Column_5, direction_5);

            //SocketGroup History용        
            Adpt_SocketGroup_History = new SqlDataAdapter("SELECT * FROM SocketGroup_History", Con);
            tblSocketGroup_History = new DataTable("tblSocketGroup_History");
            SqlCommandBuilder Builder_SocketGroup_History = new SqlCommandBuilder(Adpt_SocketGroup_History);
            Adpt_SocketGroup_History.Fill(tblSocketGroup_History);

            //Delete
            Adpt_SocketGroup_DeleteHistory = new SqlDataAdapter("SELECT * FROM SocketGroup_DeleteHistory", Con);
            tblSocketGroup_DeleteHistory = new DataTable("tblSocketGroup_DeleteHistory");
            SqlCommandBuilder Builder_SocketGroup_Delete = new SqlCommandBuilder(Adpt_SocketGroup_DeleteHistory);
            Adpt_SocketGroup_DeleteHistory.Fill(tblSocketGroup_DeleteHistory);


            //SetItem 용
            Adpt_SetItem = new SqlDataAdapter("SELECT * FROM SetItem", Con);
            tblSetItem = new DataTable("tblSetItem");
            SqlCommandBuilder Builder_SetItem = new SqlCommandBuilder(Adpt_SetItem);
            Adpt_SetItem.Fill(tblSetItem);
            dataGridView6.DataSource = tblSetItem;
            dataGridView6.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView6.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView6.Columns["Regdate"].ReadOnly = true; //대리키수정방지
            for (int i = 0; i < dataGridView6.ColumnCount; i++)
            {
                dataGridView6.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 06. 01 김정협 수정 : 아이디로 오름차순 정렬
            DataGridViewColumn Column_6 = dataGridView6.Columns[1];//dataGridView1.Columns["ID"];
            ListSortDirection direction_6 = ListSortDirection.Ascending;
            dataGridView6.Sort(Column_6, direction_6);

            //SetItem History용        
            Adpt_SetItem_History = new SqlDataAdapter("SELECT * FROM SetItem_History", Con);
            tblSetItem_History = new DataTable("tblSetItem_History");
            SqlCommandBuilder Builder_SetItem_History = new SqlCommandBuilder(Adpt_SetItem_History);
            Adpt_SetItem_History.Fill(tblSetItem_History);
            //Delete
            Adpt_SetItem_DeleteHistory = new SqlDataAdapter("SELECT * FROM SetItem_DeleteHistory", Con);
            tblSetItem_DeleteHistory = new DataTable("tblSetItem_DeleteHistory");
            SqlCommandBuilder Builder_SetItem_Delete = new SqlCommandBuilder(Adpt_SetItem_DeleteHistory);
            Adpt_SetItem_DeleteHistory.Fill(tblSetItem_DeleteHistory);


            //RandomBoxTable 용
            Adpt_RandomBoxTable = new SqlDataAdapter("SELECT * FROM RandomBoxTable", Con);
            tblRandomBoxTable = new DataTable("tblRandomBoxTable");
            SqlCommandBuilder Builder_RandomBoxTable = new SqlCommandBuilder(Adpt_RandomBoxTable);
            Adpt_RandomBoxTable.Fill(tblRandomBoxTable);
            dataGridView7.DataSource = tblRandomBoxTable;
            dataGridView7.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView7.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView7.Columns["Regdate"].ReadOnly = true; //대리키수정방지

            dataGridView7.Columns["BoxName"].ReadOnly = true; //수정방지
            dataGridView7.Columns["Key Name"].ReadOnly = true; //수정방지

            dataGridView7.Columns["BoxName"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView7.Columns["Key Name"].DefaultCellStyle.BackColor = Color.LightGray;


            for (int i = 1; i <= 15; i++)
            {
                string strTemp = "Unit Class_";

                if (i < 10)
                    strTemp = strTemp + "0" + i;
                else
                    strTemp = strTemp + i;

                strTemp = strTemp + "_";
                dataGridView7.Columns[strTemp].ReadOnly = true; //수정방지
                dataGridView7.Columns[strTemp].DefaultCellStyle.BackColor = Color.LightGray;
                strTemp = strTemp + "C";
                dataGridView7.Columns[strTemp].ReadOnly = true; //수정방지
                dataGridView7.Columns[strTemp].DefaultCellStyle.BackColor = Color.LightGray;

            }

            for (int i = 0; i < dataGridView7.ColumnCount; i++)
            {
                dataGridView7.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 06. 01 김정협 수정 : 아이디로 오름차순 정렬
            DataGridViewColumn Column_7 = dataGridView7.Columns[1];//dataGridView1.Columns["ID"];
            ListSortDirection direction_7 = ListSortDirection.Ascending;
            dataGridView7.Sort(Column_7, direction_7);

            //RandomBoxTable History용        
            Adpt_RandomBoxTable_History = new SqlDataAdapter("SELECT * FROM RandomBoxTable_History", Con);
            tblRandomBoxTable_History = new DataTable("tblRandomBoxTable_History");
            SqlCommandBuilder Builder_RandomBoxTable_History = new SqlCommandBuilder(Adpt_RandomBoxTable_History);
            Adpt_RandomBoxTable_History.Fill(tblRandomBoxTable_History);
            //Delete
            Adpt_RandomBoxTable_DeleteHistory = new SqlDataAdapter("SELECT * FROM RandomBoxTable_DeleteHistory", Con);
            tblRandomBoxTable_DeleteHistory = new DataTable("tblRandomBoxTable_DeleteHistory");
            SqlCommandBuilder Builder_RandomBoxTable_Delete = new SqlCommandBuilder(Adpt_RandomBoxTable_DeleteHistory);
            Adpt_RandomBoxTable_DeleteHistory.Fill(tblRandomBoxTable_DeleteHistory);


            //RandomItemGroup 용
            Adpt_RandomItemGroup = new SqlDataAdapter("SELECT * FROM RandomItemGroup", Con);
            tblRandomItemGroup = new DataTable("tblRandomItemGroup");
            SqlCommandBuilder Builder_RandomItemGroup = new SqlCommandBuilder(Adpt_RandomItemGroup);
            Adpt_RandomItemGroup.Fill(tblRandomItemGroup);
            dataGridView8.DataSource = tblRandomItemGroup;
            dataGridView8.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView8.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView8.Columns["Regdate"].ReadOnly = true; //대리키수정방지

            dataGridView8.Columns["Item Name"].ReadOnly = true; //수정방지

            dataGridView8.Columns["Item Name"].DefaultCellStyle.BackColor = Color.LightGray;
            for (int i = 0; i < dataGridView8.ColumnCount; i++)
            {
                dataGridView8.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 06. 01 김정협 수정 : 아이디로 오름차순 정렬
            DataGridViewColumn Column_8 = dataGridView8.Columns[1];//dataGridView1.Columns["ID"];
            ListSortDirection direction_8 = ListSortDirection.Ascending;
            dataGridView8.Sort(Column_8, direction_8);

            //RandomItemGroup History용        
            Adpt_RandomItemGroup_History = new SqlDataAdapter("SELECT * FROM RandomItemGroup_History", Con);
            tblRandomItemGroup_History = new DataTable("tblRandomItemGroup_History");
            SqlCommandBuilder Builder_RandomItemGroup_History = new SqlCommandBuilder(Adpt_RandomItemGroup_History);
            Adpt_RandomItemGroup_History.Fill(tblRandomItemGroup_History);

            //Delete
            Adpt_RandomItemGroup_DeleteHistory = new SqlDataAdapter("SELECT * FROM RandomItemGroup_DeleteHistory", Con);
            tblRandomItemGroup_DeleteHistory = new DataTable("tblRandomItemGroup_DeleteHistory");
            SqlCommandBuilder Builder_RandomItemGroup_Delete = new SqlCommandBuilder(Adpt_RandomItemGroup_DeleteHistory);
            Adpt_RandomItemGroup_DeleteHistory.Fill(tblRandomItemGroup_DeleteHistory);

            //ExchangeTable 용
            Adpt_ExchangeTable = new SqlDataAdapter("SELECT * FROM ExchangeTable", Con);
            tblExchangeTable = new DataTable("tblExchangeTable");
            SqlCommandBuilder Builder_ExchangeTable = new SqlCommandBuilder(Adpt_ExchangeTable);
            Adpt_ExchangeTable.Fill(tblExchangeTable);

            if (tblExchangeTable.Rows.Count < 1)
            {
                tblExchangeTable.Rows.Add();
                tblExchangeTable.Rows[0][0] = 0;
                tblExchangeTable.Rows[0][1] = 0;
                tblExchangeTable.Rows[0][2] = "HI_INVALID";
            }

            dataGridView9.DataSource = tblExchangeTable;

            dataGridView9.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView9.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView9.Columns["Regdate"].ReadOnly = true; //대리키수정방지
            
            dataGridView9.Columns["House_Enum"].ReadOnly = true; //수정방지
            dataGridView9.Columns["ExchangeType_Enum"].ReadOnly = true; //수정방지

            dataGridView9.Columns["Exchange_Des1"].ReadOnly = true; //수정방지
            dataGridView9.Columns["Exchange_Des2"].ReadOnly = true; //수정방지

            dataGridView9.Columns["Exchange_Des1"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView9.Columns["Exchange_Des2"].DefaultCellStyle.BackColor = Color.LightGray;

            dataGridView9.Columns["House_Enum"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView9.Columns["ExchangeType_Enum"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView9.Columns["HideIndex"].Visible = false;

            for (int i = 0; i < dataGridView9.ColumnCount; i++)
            {
                dataGridView9.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 07. 10 김정협 수정 : HideIndex로 정렬
            DataGridViewColumn Column_9 = dataGridView9.Columns["HideIndex"];//dataGridView1.Columns["ID"];
            ListSortDirection direction_9 = ListSortDirection.Ascending;
            dataGridView9.Sort(Column_9, direction_9);


            //ExchangeTable History용        
            Adpt_ExchangeTable_History = new SqlDataAdapter("SELECT * FROM ExchangeTable_History", Con);
            tblExchangeTable_History = new DataTable("tblExchangeTable_History");
            SqlCommandBuilder Builder_ExchangeTable_History = new SqlCommandBuilder(Adpt_ExchangeTable_History);
            Adpt_ExchangeTable_History.Fill(tblExchangeTable_History);

            //Delete
            Adpt_ExchangeTable_DeleteHistory = new SqlDataAdapter("SELECT * FROM ExchangeTable_DeleteHistory", Con);
            tblExchangeTable_DeleteHistory = new DataTable("tblExchangeTable_DeleteHistory");
            SqlCommandBuilder Builder_ExchangeTable_Delete = new SqlCommandBuilder(Adpt_ExchangeTable_DeleteHistory);
            Adpt_ExchangeTable_DeleteHistory.Fill(tblExchangeTable_DeleteHistory);

            //HouseID용
            Adpt_HouseID = new SqlDataAdapter("SELECT * FROM HOUSE_ID", Con);
            tblHouseID = new DataTable("tblHouseID");
            Adpt_HouseID.Fill(tblHouseID);
            tblHouseID.PrimaryKey = new DataColumn[] { tblHouseID.Columns["ID"] };

            //ExchangeType용
            Adpt_ExchangeType = new SqlDataAdapter("SELECT * FROM ITEM_EXCHANGE_TYPE", Con);
            tblExchangeType = new DataTable("tblExchangeType");
            Adpt_ExchangeType.Fill(tblExchangeType);
            tblExchangeType.PrimaryKey = new DataColumn[] { tblExchangeType.Columns["ID"] };


            ////ManufactureTable  용
            Adpt_ManufactureTable = new SqlDataAdapter("SELECT * FROM ManufactureTable", Con);
            tblManufactureTable = new DataTable("tblManufactureTable");
            SqlCommandBuilder Builder_ManufactureTable = new SqlCommandBuilder(Adpt_ManufactureTable);
            Adpt_ManufactureTable.Fill(tblManufactureTable);
            dataGridView10.DataSource = tblManufactureTable;
            dataGridView10.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView10.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView10.Columns["Regdate"].ReadOnly = true; //대리키수정방지

            dataGridView10.Columns["ManufactureType_"].ReadOnly = true; //수정방지
            dataGridView10.Columns["ManufactureType_C"].ReadOnly = true; //수정방지

            dataGridView10.Columns["Result Name"].ReadOnly = true; //수정방지
            dataGridView10.Columns["Material Name"].ReadOnly = true; //수정방지

            dataGridView10.Columns["ManufactureType_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView10.Columns["ManufactureType_C"].DefaultCellStyle.BackColor = Color.LightGray;

            dataGridView10.Columns["Result Name"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView10.Columns["Material Name"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView10.Columns["HideIndex"].Visible = false;

            for (int i = 0; i < dataGridView10.ColumnCount; i++)
            {
                dataGridView10.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 07. 10 김정협 수정 : HideIndex로 정렬
            DataGridViewColumn Column_10 = dataGridView10.Columns["HideIndex"];//dataGridView1.Columns["ID"];
            ListSortDirection direction_10 = ListSortDirection.Ascending;
            dataGridView10.Sort(Column_10, direction_10);
                        


            ////ManufactureTable  History용        
            Adpt_ManufactureTable_History = new SqlDataAdapter("SELECT * FROM ManufactureTable_History", Con);
            tblManufactureTable_History = new DataTable("tblManufactureTable_History");
            SqlCommandBuilder Builder_ManufactureTable_History = new SqlCommandBuilder(Adpt_ManufactureTable_History);
            Adpt_ManufactureTable_History.Fill(tblManufactureTable_History);

            //Delete
            Adpt_ManufactureTable_DeleteHistory = new SqlDataAdapter("SELECT * FROM ManufactureTable_DeleteHistory", Con);
            tblManufactureTable_DeleteHistory = new DataTable("tblManufactureTable_DeleteHistory");
            SqlCommandBuilder Builder_ManufactureTable_Delete = new SqlCommandBuilder(Adpt_ManufactureTable_DeleteHistory);
            Adpt_ManufactureTable_DeleteHistory.Fill(tblManufactureTable_DeleteHistory);


            ////ManufactureResultGroup  용
            Adpt_ManufactureResultGroup = new SqlDataAdapter("SELECT * FROM ManufactureResultGroup ", Con);
            tblManufactureResultGroup = new DataTable("tblManufactureResultGroup ");
            SqlCommandBuilder Builder_ManufactureResultGroup = new SqlCommandBuilder(Adpt_ManufactureResultGroup);
            Adpt_ManufactureResultGroup.Fill(tblManufactureResultGroup);
            dataGridView11.DataSource = tblManufactureResultGroup;
            dataGridView11.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView11.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView11.Columns["Regdate"].ReadOnly = true; //대리키수정방지

            dataGridView11.Columns["Item Name"].ReadOnly = true; //수정방지

            dataGridView11.Columns["Item Name"].DefaultCellStyle.BackColor = Color.LightGray;
            for (int i = 0; i < dataGridView11.ColumnCount; i++)
            {
                dataGridView11.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 06. 01 김정협 수정 : 아이디로 오름차순 정렬
            DataGridViewColumn Column_11 = dataGridView11.Columns[1];//dataGridView1.Columns["ID"];
            ListSortDirection direction_11 = ListSortDirection.Ascending;
            dataGridView11.Sort(Column_11, direction_11);

            ////ManufactureResultGroup  History용        
            Adpt_ManufactureResultGroup_History = new SqlDataAdapter("SELECT * FROM ManufactureResultGroup_History", Con);
            tblManufactureResultGroup_History = new DataTable("tblManufactureResultGroup_History");
            SqlCommandBuilder Builder_ManufactureResultGroup_History = new SqlCommandBuilder(Adpt_ManufactureResultGroup_History);
            Adpt_ManufactureResultGroup_History.Fill(tblManufactureResultGroup_History);

            //Delete
            Adpt_ManufactureResultGroup_DeleteHistory = new SqlDataAdapter("SELECT * FROM ManufactureResultGroup_DeleteHistory", Con);
            tblManufactureResultGroup_DeleteHistory = new DataTable("tblManufactureResultGroup_DeleteHistory");
            SqlCommandBuilder Builder_ManufactureResultGroup_Delete = new SqlCommandBuilder(Adpt_ManufactureResultGroup_DeleteHistory);
            Adpt_ManufactureResultGroup_DeleteHistory.Fill(tblManufactureResultGroup_DeleteHistory);


            ////ManufactureVillage  용
            Adpt_ManufactureVillage = new SqlDataAdapter("SELECT * FROM ManufactureVillage ", Con);
            tblManufactureVillage = new DataTable("tblManufactureVillage ");
            SqlCommandBuilder Builder_ManufactureVillage = new SqlCommandBuilder(Adpt_ManufactureVillage);
            Adpt_ManufactureVillage.Fill(tblManufactureVillage);
            dataGridView12.DataSource = tblManufactureVillage;
            dataGridView12.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView12.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView12.Columns["Regdate"].ReadOnly = true; //대리키수정방지

            dataGridView12.Columns["Manufacture Name"].ReadOnly = true; //수정방지

            dataGridView12.Columns["Village Name"].ReadOnly = true; //수정방지
            dataGridView12.Columns["Village Enum"].ReadOnly = true; //수정방지

            dataGridView12.Columns["Manufacture Name"].DefaultCellStyle.BackColor = Color.LightGray;

            dataGridView12.Columns["Village Name"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView12.Columns["Village Enum"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView12.Columns["HideIndex"].Visible = false;

            for (int i = 0; i < dataGridView12.ColumnCount; i++)
            {
                dataGridView12.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 07. 09 김정협 수정 : HideIndex로 정렬
            DataGridViewColumn Column_12 = dataGridView12.Columns["HideIndex"];//dataGridView1.Columns["ID"];
            ListSortDirection direction_12 = ListSortDirection.Ascending;
            dataGridView12.Sort(Column_12, direction_12);

            ////ManufactureVillage  History용        
            Adpt_ManufactureVillage_History = new SqlDataAdapter("SELECT * FROM ManufactureVillage_History", Con);
            tblManufactureVillage_History = new DataTable("tblManufactureVillage_History");
            SqlCommandBuilder Builder_ManufactureVillage_History = new SqlCommandBuilder(Adpt_ManufactureVillage_History);
            Adpt_ManufactureVillage_History.Fill(tblManufactureVillage_History);

            //Delete
            Adpt_ManufactureVillage_DeleteHistory = new SqlDataAdapter("SELECT * FROM ManufactureVillage_DeleteHistory", Con);
            tblManufactureVillage_DeleteHistory = new DataTable("tblManufactureVillage_DeleteHistory");
            SqlCommandBuilder Builder_ManufactureVillage_Delete = new SqlCommandBuilder(Adpt_ManufactureVillage_DeleteHistory);
            Adpt_ManufactureVillage_DeleteHistory.Fill(tblManufactureVillage_DeleteHistory);


            ////AttribEnchantItem  용
            Adpt_AttribEnchantItem = new SqlDataAdapter("SELECT * FROM AttribEnchantItem ", Con);
            tblAttribEnchantItem = new DataTable("tblAttribEnchantItem ");
            SqlCommandBuilder Builder_AttribEnchantItem = new SqlCommandBuilder(Adpt_AttribEnchantItem);
            Adpt_AttribEnchantItem.Fill(tblAttribEnchantItem);
            dataGridView13.DataSource = tblAttribEnchantItem;
            dataGridView13.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView13.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView13.Columns["Regdate"].ReadOnly = true; //대리키수정방지

            dataGridView13.Columns["ExtraDamageType_"].ReadOnly = true; //수정방지
            dataGridView13.Columns["ExtraDamageType_C"].ReadOnly = true; //수정방지

            dataGridView13.Columns["ExtraDamageType_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView13.Columns["ExtraDamageType_C"].DefaultCellStyle.BackColor = Color.LightGray;
            for (int i = 0; i < dataGridView13.ColumnCount; i++)
            {
                dataGridView13.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 06. 01 김정협 수정 : 아이디로 오름차순 정렬
            DataGridViewColumn Column_13 = dataGridView13.Columns[1];//dataGridView1.Columns["ID"];
            ListSortDirection direction_13 = ListSortDirection.Ascending;
            dataGridView13.Sort(Column_13, direction_13);

            ////AttribEnchantItem  History용        
            Adpt_AttribEnchantItem_History = new SqlDataAdapter("SELECT * FROM AttribEnchantItem_History", Con);
            tblAttribEnchantItem_History = new DataTable("tblAttribEnchantItem_History");
            SqlCommandBuilder Builder_AttribEnchantItem_History = new SqlCommandBuilder(Adpt_AttribEnchantItem_History);
            Adpt_AttribEnchantItem_History.Fill(tblAttribEnchantItem_History);

            //Delete
            Adpt_AttribEnchantItem_DeleteHistory = new SqlDataAdapter("SELECT * FROM AttribEnchantItem_DeleteHistory", Con);
            tblAttribEnchantItem_DeleteHistory = new DataTable("tblAttribEnchantItem_DeleteHistory");
            SqlCommandBuilder Builder_AttribEnchantItem_Delete = new SqlCommandBuilder(Adpt_AttribEnchantItem_DeleteHistory);
            Adpt_AttribEnchantItem_DeleteHistory.Fill(tblAttribEnchantItem_DeleteHistory);


            ////AttribEnchantRequire  용
            Adpt_AttribEnchantRequire = new SqlDataAdapter("SELECT * FROM AttribEnchantRequire ", Con);
            tblAttribEnchantRequire = new DataTable("tblAttribEnchantRequire ");
            SqlCommandBuilder Builder_AttribEnchantRequire = new SqlCommandBuilder(Adpt_AttribEnchantRequire);
            Adpt_AttribEnchantRequire.Fill(tblAttribEnchantRequire);
            dataGridView14.DataSource = tblAttribEnchantRequire;
            dataGridView14.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView14.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView14.Columns["Regdate"].ReadOnly = true; //대리키수정방지

            dataGridView14.Columns["Enchant Type_"].ReadOnly = true; //수정방지

            dataGridView14.Columns["Enchant Type_"].DefaultCellStyle.BackColor = Color.LightGray;
            for (int i = 0; i < dataGridView14.ColumnCount; i++)
            {
                dataGridView14.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 06. 01 김정협 수정 : 아이디로 오름차순 정렬
            DataGridViewColumn Column_14 = dataGridView14.Columns[1];//dataGridView1.Columns["ID"];
            ListSortDirection direction_14 = ListSortDirection.Ascending;
            dataGridView14.Sort(Column_14, direction_14);

            ////AttribEnchantRequire  History용        
            Adpt_AttribEnchantRequire_History = new SqlDataAdapter("SELECT * FROM AttribEnchantRequire_History", Con);
            tblAttribEnchantRequire_History = new DataTable("tblAttribEnchantRequire_History");
            SqlCommandBuilder Builder_AttribEnchantRequire_History = new SqlCommandBuilder(Adpt_AttribEnchantRequire_History);
            Adpt_AttribEnchantRequire_History.Fill(tblAttribEnchantRequire_History);

            //Delete
            Adpt_AttribEnchantRequire_DeleteHistory = new SqlDataAdapter("SELECT * FROM AttribEnchantRequire_DeleteHistory", Con);
            tblAttribEnchantRequire_DeleteHistory = new DataTable("tblAttribEnchantRequire_DeleteHistory");
            SqlCommandBuilder Builder_AttribEnchantRequire_Delete = new SqlCommandBuilder(Adpt_AttribEnchantRequire_DeleteHistory);
            Adpt_AttribEnchantRequire_DeleteHistory.Fill(tblAttribEnchantRequire_DeleteHistory);


            ////NpcExtraAbility  용
            Adpt_NpcExtraAbility = new SqlDataAdapter("SELECT * FROM NpcExtraAbility ", Con);
            tblNpcExtraAbility = new DataTable("tblNpcExtraAbility ");
            SqlCommandBuilder Builder_NpcExtraAbility = new SqlCommandBuilder(Adpt_NpcExtraAbility);
            Adpt_NpcExtraAbility.Fill(tblNpcExtraAbility);
            dataGridView15.DataSource = tblNpcExtraAbility;
            dataGridView15.AllowUserToAddRows = false; //제일 밑부분 직접 추가할 수 있는 Row 없앰
            dataGridView15.Columns[0].ReadOnly = true; //대리키수정방지
            dataGridView15.Columns["Regdate"].ReadOnly = true; //대리키수정방지

            dataGridView15.Columns["NPC_ABILITY_ID_"].ReadOnly = true; //수정방지
            dataGridView15.Columns["NPC_ABILITY_ID_C"].ReadOnly = true; //수정방지

            dataGridView15.Columns["NPC_ABILITY_ID_"].DefaultCellStyle.BackColor = Color.LightGray;
            dataGridView15.Columns["NPC_ABILITY_ID_C"].DefaultCellStyle.BackColor = Color.LightGray;
            for (int i = 0; i < dataGridView15.ColumnCount; i++)
            {
                dataGridView15.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
            }
            //09. 06. 01 김정협 수정 : 아이디로 오름차순 정렬
            DataGridViewColumn Column_15 = dataGridView15.Columns[1];//dataGridView1.Columns["ID"];
            ListSortDirection direction_15 = ListSortDirection.Ascending;
            dataGridView15.Sort(Column_15, direction_15);

            ////NpcExtraAbility  History용        
            Adpt_NpcExtraAbility_History = new SqlDataAdapter("SELECT * FROM NpcExtraAbility_History", Con);
            tblNpcExtraAbility_History = new DataTable("tblNpcExtraAbility_History");
            SqlCommandBuilder Builder_NpcExtraAbility_History = new SqlCommandBuilder(Adpt_NpcExtraAbility_History);
            Adpt_NpcExtraAbility_History.Fill(tblNpcExtraAbility_History);

            //Delete
            Adpt_NpcExtraAbility_DeleteHistory = new SqlDataAdapter("SELECT * FROM NpcExtraAbility_DeleteHistory", Con);
            tblNpcExtraAbility_DeleteHistory = new DataTable("tblNpcExtraAbility_DeleteHistory");
            SqlCommandBuilder Builder_NpcExtraAbility_Delete = new SqlCommandBuilder(Adpt_NpcExtraAbility_DeleteHistory);
            Adpt_NpcExtraAbility_DeleteHistory.Fill(tblNpcExtraAbility_DeleteHistory);

            //09. 06. 06 김정협
            //ITEM_TYPE용        
            Adpt_ItemType = new SqlDataAdapter("SELECT * FROM ITEM_TYPE", Con);
            tblItemType = new DataTable("tblItemType");
            Adpt_ItemType.Fill(tblItemType);
            tblItemType.PrimaryKey = new DataColumn[] { tblItemType.Columns["ID"] };

            //USE_TYPE용        
            Adpt_UseType = new SqlDataAdapter("SELECT * FROM USE_TYPE", Con);
            tblUseType = new DataTable("tblUseType");
            Adpt_UseType.Fill(tblUseType);
            tblUseType.PrimaryKey = new DataColumn[] { tblUseType.Columns["ID"] };

            //PERIODTYPE용        
            Adpt_PeriodType = new SqlDataAdapter("SELECT * FROM PERIOD_TYPE", Con);
            tblPeriodType = new DataTable("tblPeriodType");
            Adpt_PeriodType.Fill(tblPeriodType);
            tblPeriodType.PrimaryKey = new DataColumn[] { tblPeriodType.Columns["ID"] };

            //PRICETYPE용        
            Adpt_PriceType = new SqlDataAdapter("SELECT * FROM SHOP_PRICE_TYPE", Con);
            tblPriceType = new DataTable("tblPriceType");
            Adpt_PriceType.Fill(tblPriceType);
            tblPriceType.PrimaryKey = new DataColumn[] { tblPriceType.Columns["ID"] };

            //USECONDITION용        
            Adpt_UseCondition = new SqlDataAdapter("SELECT * FROM USE_CONDITION", Con);
            tblUseCondition = new DataTable("tblUseCondition");
            Adpt_UseCondition.Fill(tblUseCondition);
            tblUseCondition.PrimaryKey = new DataColumn[] { tblUseCondition.Columns["ID"] };

            //UNITTYPE용        
            Adpt_UnitType = new SqlDataAdapter("SELECT * FROM UNIT_TYPE", Con);
            tblUnitType = new DataTable("tblUnitType");
            Adpt_UnitType.Fill(tblUnitType);
            tblUnitType.PrimaryKey = new DataColumn[] { tblUnitType.Columns["ID"] };

            //UNITCLASS용        
            Adpt_UnitClass = new SqlDataAdapter("SELECT * FROM UNIT_CLASS", Con);
            tblUnitClass = new DataTable("tblUnitClass");
            Adpt_UnitClass.Fill(tblUnitClass);
            tblUnitClass.PrimaryKey = new DataColumn[] { tblUnitClass.Columns["ID"] };

            //EQIPPOSITION용        
            Adpt_EqipPosition = new SqlDataAdapter("SELECT * FROM EQIP_POSITION", Con);
            tblEqipPosition = new DataTable("tblEqipPosition");
            Adpt_EqipPosition.Fill(tblEqipPosition);
            tblEqipPosition.PrimaryKey = new DataColumn[] { tblEqipPosition.Columns["ID"] };

            //ITEMGRADE용        
            Adpt_ItemGrade = new SqlDataAdapter("SELECT * FROM ITEM_GRADE", Con);
            tblItemGrade = new DataTable("tblItemType");
            Adpt_ItemGrade.Fill(tblItemGrade);
            tblItemGrade.PrimaryKey = new DataColumn[] { tblItemGrade.Columns["ID"] };

            //SpecialAbility용        
            Adpt_SpecialAbilityType = new SqlDataAdapter("SELECT * FROM SPECIAL_ABILITY_TYPE", Con);
            tblSpecialAbilityType = new DataTable("tblItemType");
            Adpt_SpecialAbilityType.Fill(tblSpecialAbilityType);
            tblSpecialAbilityType.PrimaryKey = new DataColumn[] { tblSpecialAbilityType.Columns["ID"] };

            //SocketItem용        
            Adpt_SoketDataType = new SqlDataAdapter("SELECT * FROM SOCKET_DATA_TYPE", Con);
            tblSocketDataType = new DataTable("tblSocketDataType");
            Adpt_SoketDataType.Fill(tblSocketDataType);
            tblSocketDataType.PrimaryKey = new DataColumn[] { tblSocketDataType.Columns["ID"] };

            //EXTRA_DAMAGE_TYPE용        
            Adpt_ExtraDamageType = new SqlDataAdapter("SELECT * FROM EXTRA_DAMAGE_TYPE", Con);
            tblExtraDamageType = new DataTable("tblExtraDamageType");
            Adpt_ExtraDamageType.Fill(tblExtraDamageType);
            tblExtraDamageType.PrimaryKey = new DataColumn[] { tblExtraDamageType.Columns["ID"] };

            //SocketGroup를 위하여
            tblSocketItem.PrimaryKey = new DataColumn[] { tblSocketItem.Columns["ID"] };

            //여러 항목들을 위하여
            tblItem.PrimaryKey = new DataColumn[] { tblItem.Columns["ID"] };

            //Menufacture를 위하여
            Adpt_MenufactureType = new SqlDataAdapter("SELECT * FROM MANUFACTURE_TYPE", Con);
            tblMenufactureType = new DataTable("tblMenufactureType");
            Adpt_MenufactureType.Fill(tblMenufactureType);
            tblMenufactureType.PrimaryKey = new DataColumn[] { tblMenufactureType.Columns["ID"] };

            //Village를 위해
            Adpt_VillageID = new SqlDataAdapter("SELECT * FROM VILLAGE_ID", Con);
            tblVillageID = new DataTable("tblVillageID");
            Adpt_VillageID.Fill(tblVillageID);
            tblVillageID.PrimaryKey = new DataColumn[] { tblVillageID.Columns["ID"] };

            //ATTRIB_ENCHANT_TYPE용        
            Adpt_AttribEnchantType = new SqlDataAdapter("SELECT * FROM ATTRIB_ENCHANT_TYPE", Con);
            tblAttribEnchantType = new DataTable("tblAttribEnchantType");
            Adpt_AttribEnchantType.Fill(tblAttribEnchantType);
            tblAttribEnchantType.PrimaryKey = new DataColumn[] { tblAttribEnchantType.Columns["ID"] };

            //NPC_ABILITY_ID용        
            Adpt_NPCAbility = new SqlDataAdapter("SELECT * FROM NPC_ABILITY_ID", Con);
            tblNPCAbility = new DataTable("tblNPCAbility");
            Adpt_NPCAbility.Fill(tblNPCAbility);
            tblNPCAbility.PrimaryKey = new DataColumn[] { tblNPCAbility.Columns["ID"] };

            //09. 06. 03 김정협 추가 : 셀배경색 DB
            ////ColorTable용        
            Adpt_ColorTable = new SqlDataAdapter("SELECT * FROM ColorTable", Con);
            tblColor = new DataTable("tblColor");
            SqlCommandBuilder Builder_Color = new SqlCommandBuilder(Adpt_ColorTable);
            Adpt_ColorTable.Fill(tblColor);

            //09. 07. 07 김정협 추가 : Border추가
            ////BorderTable용        
            Adpt_BorderTable = new SqlDataAdapter("SELECT * FROM BorderTable", Con);
            tblBorder = new DataTable("tblBorder");
            SqlCommandBuilder Builder_Border = new SqlCommandBuilder(Adpt_BorderTable);
            Adpt_BorderTable.Fill(tblBorder);


            SetCellBackgroundColorForDB(-1);

            dataGridView1.RowHeadersWidth = 130;
            dataGridView1.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dataGridView2.RowHeadersWidth = 130;
            dataGridView2.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dataGridView3.RowHeadersWidth = 130;
            dataGridView3.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dataGridView4.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.True;
            dataGridView5.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.True;            
            dataGridView6.RowHeadersWidth = 130;
            dataGridView6.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dataGridView7.RowHeadersWidth = 130;
            dataGridView7.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dataGridView8.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.True;
            dataGridView9.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.True;
            dataGridView10.RowHeadersWidth = 130;
            dataGridView10.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dataGridView11.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.True;
            dataGridView12.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.True;
            dataGridView13.RowHeadersWidth = 130;
            dataGridView13.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            dataGridView14.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.True;
            dataGridView15.RowHeadersWidth = 130;
            dataGridView15.RowHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;

            

            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
            for (int nRowHeader = 0; nRowHeader < dataGridView1.RowCount; nRowHeader++)
            {                
                dataGridView1.Rows[nRowHeader].HeaderCell.Value = dataGridView1["ID", nRowHeader].Value.ToString() + "     " + dataGridView1["Name", nRowHeader].Value.ToString();
            }

            tabControl1.SelectedIndex = 1;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
            for (int nRowHeader = 0; nRowHeader < dataGridView2.RowCount; nRowHeader++)
            {                
                dataGridView2.Rows[nRowHeader].HeaderCell.Value = dataGridView2["ID", nRowHeader].Value.ToString() + "     " + dataGridView2["TYPE_", nRowHeader].Value.ToString();
            }

            tabControl1.SelectedIndex = 2;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
            for (int nRowHeader = 0; nRowHeader < dataGridView3.RowCount; nRowHeader++)
            {                
                dataGridView3.Rows[nRowHeader].HeaderCell.Value = dataGridView3["ID", nRowHeader].Value.ToString() + "     " + dataGridView3["Description", nRowHeader].Value.ToString();
            }

            //소켓 랜덤 패스
            tabControl1.SelectedIndex = 3;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView4.RowCount; nRowHeader++)
            {
                dataGridView4.Rows[nRowHeader].HeaderCell.Value = "    ";
            }
            //소켓 그룹 패스
            tabControl1.SelectedIndex = 4;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView5.RowCount; nRowHeader++)
            {
                dataGridView5.Rows[nRowHeader].HeaderCell.Value = "    ";
            }


            tabControl1.SelectedIndex = 5;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
            for (int nRowHeader = 0; nRowHeader < dataGridView6.RowCount; nRowHeader++)
            {                
                dataGridView6.Rows[nRowHeader].HeaderCell.Value = dataGridView6["SetID", nRowHeader].Value.ToString() + "     " + dataGridView6["SetName", nRowHeader].Value.ToString();
            }

            tabControl1.SelectedIndex = 6;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여
            
            for (int nRowHeader = 0; nRowHeader < dataGridView7.RowCount; nRowHeader++)
            {                
                dataGridView7.Rows[nRowHeader].HeaderCell.Value = dataGridView7["BoxID", nRowHeader].Value.ToString() + "     " + dataGridView7["BoxName", nRowHeader].Value.ToString();
            }

            //랜덤 그룹패스
            tabControl1.SelectedIndex = 7;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView8.RowCount; nRowHeader++)
            {
                dataGridView8.Rows[nRowHeader].HeaderCell.Value = "    ";
            }
            //익스체인지 패스
            tabControl1.SelectedIndex = 8;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView9.RowCount; nRowHeader++)
            {
                dataGridView9.Rows[nRowHeader].HeaderCell.Value = "    ";
            }

            tabControl1.SelectedIndex = 9;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여
            
            for (int nRowHeader = 0; nRowHeader < dataGridView10.RowCount; nRowHeader++)
            {
                dataGridView10.Rows[nRowHeader].HeaderCell.Value = dataGridView10["Manufacture ID", nRowHeader].Value.ToString() + "     " + dataGridView10["Manufacture Name", nRowHeader].Value.ToString();
            }

            //메뉴팩쳐 리절트 패스
            tabControl1.SelectedIndex = 10;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView11.RowCount; nRowHeader++)
            {
                dataGridView11.Rows[nRowHeader].HeaderCell.Value = "    ";
            }
            //메뉴팩쳐 빌리지 패스
            tabControl1.SelectedIndex = 11;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView12.RowCount; nRowHeader++)
            {
                dataGridView12.Rows[nRowHeader].HeaderCell.Value = "    ";
            }

            tabControl1.SelectedIndex = 12;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여
            
            for (int nRowHeader = 0; nRowHeader < dataGridView13.RowCount; nRowHeader++)
            {             
                dataGridView13.Rows[nRowHeader].HeaderCell.Value = dataGridView13["ExtraDamageType", nRowHeader].Value.ToString() + "     " + dataGridView13["ExtraDamageType_", nRowHeader].Value.ToString();
            }
            //어트리뷰트 리콰이어 패스
            tabControl1.SelectedIndex = 13;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

            for (int nRowHeader = 0; nRowHeader < dataGridView14.RowCount; nRowHeader++)
            {
                dataGridView14.Rows[nRowHeader].HeaderCell.Value = "    ";
            }

            tabControl1.SelectedIndex = 14;
            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
            for (int nRowHeader = 0; nRowHeader < dataGridView15.RowCount; nRowHeader++)
            {                
                dataGridView15.Rows[nRowHeader].HeaderCell.Value = dataGridView15["NPC_ABILITY_ID", nRowHeader].Value.ToString() + "     " + dataGridView15["NPC_ABILITY_ID_C", nRowHeader].Value.ToString();
            }

            tabControl1.SelectedIndex = 0;
            
        }



        //09. 07. 01 김정협 ADD 창 떠 있을 시 계속 추가되게하는 부분
        ItemAdd frmItem = new ItemAdd();
        SpecialAbilityAdd frmSpecialAbility = new SpecialAbilityAdd();
        SocketItemAdd frmSocketItem = new SocketItemAdd();
        SocketRandomAdd frmSocketRandom = new SocketRandomAdd();
        SocketGroupAdd frmSocketGroup = new SocketGroupAdd();
        SetItemAdd frmSetItem = new SetItemAdd();
        RandomBoxTableAdd frmRandomBoxTable = new RandomBoxTableAdd();
        RandomItemGroupAdd frmRandomItemGroup = new RandomItemGroupAdd();
        ExChangeTableAdd frmExChangeTable = new ExChangeTableAdd();
        ManufactureTableAdd frmManufactureTable = new ManufactureTableAdd();
        ManufactureResultGroupAdd frmManufactureResultGroup = new ManufactureResultGroupAdd();
        ManufactureVillageAdd frmManufactureVillage = new ManufactureVillageAdd();
        AttribEnchantItemAdd frmAttribEnchantItem = new AttribEnchantItemAdd();
        AttribEnchantRequireAdd frmAttribEnchantRequire = new AttribEnchantRequireAdd();
        NpcExtraAbilityAdd frmNpcExtraAbility = new NpcExtraAbilityAdd();

        private void btnAdd_Click(object sender, EventArgs e)
        {
            switch (tabControl1.SelectedIndex)
            {
                case 0:
                    {
                        if (!frmItem.Visible)
                        {
                            frmItem = new ItemAdd();
                        }
                        frmItem.SetDataGridView(dataGridView1);
                        frmItem.SetRowIndex(dataGridView1.CurrentCell.RowIndex);
                        frmItem.SetDataTable(tblItem);
                        frmItem.SetModifyArray(m_ModifyIDList);
                        //09. 06. 19 김정협 Trans 추가
                        frmItem.SetTrans(tblTrans);
                        frmItem.SetRelease(tblRelease);

                        frmItem.SetUndoStack(m_UndoStack);
                        frmItem.SetRedoStack(m_RedoStack);

                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmItem.SetItemType(tblItemType);
                        frmItem.SetUseType(tblUseType);
                        frmItem.SePeriodType(tblPeriodType);
                        frmItem.SetPriceType(tblPriceType);
                        frmItem.SetUseCondition(tblUseCondition);
                        frmItem.SetUnitType(tblUnitType);
                        frmItem.SetUnitClass(tblUnitClass);
                        frmItem.SetEqipPosition(tblEqipPosition);
                        frmItem.SetItemGrade(tblItemGrade);

                        frmItem.Owner = this;

                        if (!frmItem.Visible)
                        {
                            //frm.SetTableNew();
                            frmItem.Show(this);
                        }
                        else
                        {
                            frmItem.ADDItem();// ItemAdd_Load(null, null);
                        }

                    }
                    break;
                case 1:
                    {
                        if (!frmSpecialAbility.Visible)
                        {
                            frmSpecialAbility = new SpecialAbilityAdd();
                        }

                        frmSpecialAbility.SetDataGridView(dataGridView2);
                        frmSpecialAbility.SetRowIndex(dataGridView2.CurrentCell.RowIndex);
                        frmSpecialAbility.SetDataTable(tblSpecialAbility);
                        frmSpecialAbility.SetModifyArray(m_ModifyIDList);
                        frmSpecialAbility.SetUndoStack(m_UndoStack);
                        frmSpecialAbility.SetRedoStack(m_RedoStack);
                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmSpecialAbility.SetSpecialAbility(tblSpecialAbilityType);


                        frmSpecialAbility.Owner = this;
                        //frmSpecialAbility.Show(this);
                        if (!frmSpecialAbility.Visible)
                        {
                            //frm.SetTableNew();
                            frmSpecialAbility.Show(this);
                        }
                        else
                        {
                            frmSpecialAbility.ADDItem();// ItemAdd_Load(null, null);
                        }

                        //frm.SetStringTable(tblScriptString);

                    }
                    break;
                case 2:
                    {
                        if (!frmSocketItem.Visible)
                        {
                            frmSocketItem = new SocketItemAdd();
                        }
                        frmSocketItem.SetDataGridView(dataGridView3);
                        frmSocketItem.SetRowIndex(dataGridView3.CurrentCell.RowIndex);
                        frmSocketItem.SetDataTable(tblSocketItem);
                        frmSocketItem.SetModifyArray(m_ModifyIDList);
                        frmSocketItem.SetUndoStack(m_UndoStack);
                        frmSocketItem.SetRedoStack(m_RedoStack);
                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmSocketItem.SetSocketDataType(tblSocketDataType);
                        frmSocketItem.SetExtraDamageType(tblExtraDamageType);

                        frmSocketItem.Owner = this;
                        if (!frmSocketItem.Visible)
                        {
                            //frm.SetTableNew();
                            frmSocketItem.Show(this);
                        }
                        else
                        {
                            frmSocketItem.ADDItem();// ItemAdd_Load(null, null);
                        }

                    }
                    break;
                case 3:
                    {
                        if (!frmSocketRandom.Visible)
                        {
                            frmSocketRandom = new SocketRandomAdd();
                        }
                        frmSocketRandom.SetDataGridView(dataGridView4);
                        frmSocketRandom.SetRowIndex(dataGridView4.CurrentCell.RowIndex);
                        frmSocketRandom.SetDataTable(tblSocketRandom);
                        frmSocketRandom.SetModifyArray(m_ModifyIDList);
                        frmSocketRandom.SetUndoStack(m_UndoStack);
                        frmSocketRandom.SetRedoStack(m_RedoStack);
                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmSocketRandom.SetSocketDataType(tblSocketDataType);

                        frmSocketRandom.Owner = this;
                        if (!frmSocketRandom.Visible)
                        {
                            //frm.SetTableNew();
                            frmSocketRandom.Show(this);
                        }
                        else
                        {
                            frmSocketRandom.ADDItem();// ItemAdd_Load(null, null);
                        }

                    }
                    break;
                case 4:
                    {
                        if (!frmSocketGroup.Visible)
                        {
                            frmSocketGroup = new SocketGroupAdd();
                        }
                        frmSocketGroup.SetDataGridView(dataGridView5);
                        frmSocketGroup.SetRowIndex(dataGridView5.CurrentCell.RowIndex);
                        frmSocketGroup.SetDataTable(tblSocketGroup);
                        frmSocketGroup.SetModifyArray(m_ModifyIDList);
                        frmSocketGroup.SetUndoStack(m_UndoStack);
                        frmSocketGroup.SetRedoStack(m_RedoStack);
                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmSocketGroup.SetSocketItem(tblSocketItem);

                        frmSocketGroup.Owner = this;
                        if (!frmSocketGroup.Visible)
                        {
                            //frm.SetTableNew();
                            frmSocketGroup.Show(this);
                        }
                        else
                        {
                            frmSocketGroup.ADDItem();// ItemAdd_Load(null, null);
                        }
                    }
                    break;
                case 5:
                    {
                        if (!frmSetItem.Visible)
                        {
                            frmSetItem = new SetItemAdd();
                        }
                        frmSetItem.SetDataGridView(dataGridView6);
                        frmSetItem.SetRowIndex(dataGridView6.CurrentCell.RowIndex);
                        frmSetItem.SetDataTable(tblSetItem);
                        frmSetItem.SetTrans(tblTrans);
                        frmSetItem.SetModifyArray(m_ModifyIDList);
                        frmSetItem.SetUndoStack(m_UndoStack);
                        frmSetItem.SetRedoStack(m_RedoStack);
                        frmSetItem.SetTrans(tblTrans);

                        frmSetItem.Owner = this;
                        if (!frmSetItem.Visible)
                        {
                            //frm.SetTableNew();
                            frmSetItem.Show(this);
                        }
                        else
                        {
                            frmSetItem.ADDItem();// ItemAdd_Load(null, null);
                        }

                    }
                    break;
                case 6:
                    {
                        if (!frmRandomBoxTable.Visible)
                        {
                            frmRandomBoxTable = new RandomBoxTableAdd();
                        }
                        frmRandomBoxTable.SetDataGridView(dataGridView7);
                        frmRandomBoxTable.SetRowIndex(dataGridView7.CurrentCell.RowIndex);
                        frmRandomBoxTable.SetDataTable(tblRandomBoxTable);
                        frmRandomBoxTable.SetModifyArray(m_ModifyIDList);
                        frmRandomBoxTable.SetUndoStack(m_UndoStack);
                        frmRandomBoxTable.SetRedoStack(m_RedoStack);
                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmRandomBoxTable.SetItem(tblItem);
                        frmRandomBoxTable.SetUnitClass(tblUnitClass);

                        frmRandomBoxTable.Owner = this;
                        if (!frmRandomBoxTable.Visible)
                        {
                            //frm.SetTableNew();
                            frmRandomBoxTable.Show(this);
                        }
                        else
                        {
                            frmRandomBoxTable.ADDItem();// ItemAdd_Load(null, null);
                        }

                    }
                    break;
                case 7:
                    {
                        if (!frmRandomItemGroup.Visible)
                        {
                            frmRandomItemGroup = new RandomItemGroupAdd();
                        }
                        frmRandomItemGroup.SetDataGridView(dataGridView8);
                        frmRandomItemGroup.SetRowIndex(dataGridView8.CurrentCell.RowIndex);
                        frmRandomItemGroup.SetDataTable(tblRandomItemGroup);
                        frmRandomItemGroup.SetModifyArray(m_ModifyIDList);

                        frmRandomItemGroup.SetUndoStack(m_UndoStack);
                        frmRandomItemGroup.SetRedoStack(m_RedoStack);
                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmRandomItemGroup.SetItem(tblItem);

                        frmRandomItemGroup.Owner = this;
                        if (!frmRandomItemGroup.Visible)
                        {
                            //frm.SetTableNew();
                            frmRandomItemGroup.Show(this);
                        }
                        else
                        {
                            frmRandomItemGroup.ADDItem();// ItemAdd_Load(null, null);
                        }

                    }
                    break;
                case 8:
                    {
                        if (!frmExChangeTable.Visible)
                        {
                            frmExChangeTable = new ExChangeTableAdd();
                        }
                        frmExChangeTable.SetDataGridView(dataGridView9);                        
                        frmExChangeTable.SetRowIndex(dataGridView9.CurrentCell.RowIndex);
                        frmExChangeTable.SetDataTable(tblExchangeTable);
                        frmExChangeTable.SetModifyArray(m_ModifyIDList);
                        frmExChangeTable.SetUndoStack(m_UndoStack);
                        frmExChangeTable.SetRedoStack(m_RedoStack);
                        frmExChangeTable.SetExchangeType(tblExchangeType);
                        frmExChangeTable.SetHouseID(tblHouseID);
                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmExChangeTable.SetItem(tblItem);

                        frmExChangeTable.Owner = this;
                        if (!frmExChangeTable.Visible)
                        {
                            //frm.SetTableNew();
                            frmExChangeTable.Show(this);
                        }
                        else
                        {
                            frmExChangeTable.ADDItem();// ItemAdd_Load(null, null);
                        }

                    }
                    break;
                case 9:
                    {
                        if (!frmItem.Visible)
                        {
                            frmManufactureTable = new ManufactureTableAdd();
                        }
                        frmManufactureTable.SetDataGridView(dataGridView10);
                        frmManufactureTable.SetRowIndex(dataGridView10.CurrentCell.RowIndex);
                        frmManufactureTable.SetDataTable(tblManufactureTable);
                        frmManufactureTable.SetModifyArray(m_ModifyIDList);
                        frmManufactureTable.SetUndoStack(m_UndoStack);
                        frmManufactureTable.SetRedoStack(m_RedoStack);

                        //090. 06. 06 김정협 자동변환으로 인해 추가
                        frmManufactureTable.SetItem(tblItem);
                        frmManufactureTable.SetManufactureType(tblMenufactureType);

                        frmManufactureTable.Owner = this;
                        if (!frmManufactureTable.Visible)
                        {
                            //frm.SetTableNew();
                            frmManufactureTable.Show(this);
                        }
                        else
                        {
                            frmManufactureTable.ADDItem();// ItemAdd_Load(null, null);
                        }

                    }
                    break;
                case 10:
                    {

                        if (!frmManufactureResultGroup.Visible)
                        {
                            frmManufactureResultGroup = new ManufactureResultGroupAdd();
                        }
                        frmManufactureResultGroup.SetDataGridView(dataGridView11);
                        frmManufactureResultGroup.SetRowIndex(dataGridView11.CurrentCell.RowIndex);
                        frmManufactureResultGroup.SetDataTable(tblManufactureResultGroup);
                        frmManufactureResultGroup.SetModifyArray(m_ModifyIDList);
                        frmManufactureResultGroup.SetUndoStack(m_UndoStack);
                        frmManufactureResultGroup.SetRedoStack(m_RedoStack);
                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmManufactureResultGroup.SetItem(tblItem);

                        frmManufactureResultGroup.Owner = this;
                        if (!frmManufactureResultGroup.Visible)
                        {
                            //frm.SetTableNew();
                            frmManufactureResultGroup.Show(this);
                        }
                        else
                        {
                            frmManufactureResultGroup.ADDItem();// ItemAdd_Load(null, null);
                        }
                    }
                    break;
                case 11:
                    {
                        if (!frmManufactureVillage.Visible)
                        {
                            frmManufactureVillage = new ManufactureVillageAdd();
                        }

                        frmManufactureVillage.SetDataGridView(dataGridView12);
                        frmManufactureVillage.SetRowIndex(dataGridView12.CurrentCell.RowIndex);
                        frmManufactureVillage.SetDataTable(tblManufactureVillage);
                        frmManufactureVillage.SetModifyArray(m_ModifyIDList);
                        frmManufactureVillage.SetUndoStack(m_UndoStack);
                        frmManufactureVillage.SetRedoStack(m_RedoStack);
                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmManufactureVillage.SetManufacture(tblManufactureTable);
                        frmManufactureVillage.SetVillageID(tblVillageID);

                        frmManufactureVillage.Owner = this;
                        if (!frmManufactureVillage.Visible)
                        {
                            //frm.SetTableNew();
                            frmManufactureVillage.Show(this);
                        }
                        else
                        {
                            frmManufactureVillage.ADDItem();// ItemAdd_Load(null, null);
                        }


                    }
                    break;

                case 12:
                    {
                        if (!frmAttribEnchantItem.Visible)
                        {
                            frmAttribEnchantItem = new AttribEnchantItemAdd();
                        }
                        frmAttribEnchantItem.SetDataGridView(dataGridView13);
                        frmAttribEnchantItem.SetRowIndex(dataGridView13.CurrentCell.RowIndex);
                        frmAttribEnchantItem.SetDataTable(tblAttribEnchantItem);
                        frmAttribEnchantItem.SetModifyArray(m_ModifyIDList);
                        frmAttribEnchantItem.SetUndoStack(m_UndoStack);
                        frmAttribEnchantItem.SetRedoStack(m_RedoStack);
                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmAttribEnchantItem.SetExtraDamageType(tblExtraDamageType);


                        frmAttribEnchantItem.Owner = this;
                        if (!frmAttribEnchantItem.Visible)
                        {
                            //frm.SetTableNew();
                            frmAttribEnchantItem.Show(this);
                        }
                        else
                        {
                            frmAttribEnchantItem.ADDItem();// ItemAdd_Load(null, null);
                        }

                        /*AttribEnchantItemAdd frm = new AttribEnchantItemAdd();
                        frm.SetDataGridView(dataGridView13);
                        frm.SetDataTable(tblAttribEnchantItem);
                        frm.SetModifyArray(m_ModifyIDList);

                        int nRowIndex = dataGridView13.CurrentCell.RowIndex;
                        frm.SetData(dataGridView13[1, nRowIndex].Value.ToString(), dataGridView13[2, nRowIndex].Value.ToString(), dataGridView13[3, nRowIndex].Value.ToString(), dataGridView13[4, nRowIndex].Value.ToString(), dataGridView13[5, nRowIndex].Value.ToString(),
                            dataGridView13[6, nRowIndex].Value.ToString(), dataGridView13[7, nRowIndex].Value.ToString(), dataGridView13[8, nRowIndex].Value.ToString(), dataGridView13[9, nRowIndex].Value.ToString(), dataGridView13[10, nRowIndex].Value.ToString(),
                            dataGridView13[11, nRowIndex].Value.ToString(), dataGridView13[12, nRowIndex].Value.ToString(), dataGridView13[13, nRowIndex].Value.ToString(), dataGridView13[14, nRowIndex].Value.ToString(), dataGridView13[15, nRowIndex].Value.ToString(),
                            dataGridView13[16, nRowIndex].Value.ToString(), dataGridView13[17, nRowIndex].Value.ToString(), dataGridView13[18, nRowIndex].Value.ToString());
                        frm.Owner = this;
                        frm.Show(this);*/

                    }
                    break;
                case 13:
                    {
                        if (!frmAttribEnchantRequire.Visible)
                        {
                            frmAttribEnchantRequire = new AttribEnchantRequireAdd();
                        }
                        frmAttribEnchantRequire.SetDataGridView(dataGridView14);
                        frmAttribEnchantRequire.SetRowIndex(dataGridView14.CurrentCell.RowIndex);
                        frmAttribEnchantRequire.SetDataTable(tblAttribEnchantRequire);
                        frmAttribEnchantRequire.SetModifyArray(m_ModifyIDList);
                        frmAttribEnchantRequire.SetUndoStack(m_UndoStack);
                        frmAttribEnchantRequire.SetRedoStack(m_RedoStack);
                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmAttribEnchantRequire.SetAttribEnchantType(tblAttribEnchantType);

                        frmAttribEnchantRequire.Owner = this;
                        if (!frmAttribEnchantRequire.Visible)
                        {
                            //frm.SetTableNew();
                            frmAttribEnchantRequire.Show(this);
                        }
                        else
                        {
                            frmAttribEnchantRequire.ADDItem();// ItemAdd_Load(null, null);
                        }

                        /* AttribEnchantRequireAdd frm = new AttribEnchantRequireAdd();
                         frm.SetDataGridView(dataGridView14);
                         frm.SetDataTable(tblAttribEnchantRequire);
                         frm.SetModifyArray(m_ModifyIDList);

                         int nRowIndex = dataGridView14.CurrentCell.RowIndex;
                         frm.SetData(dataGridView14[1, nRowIndex].Value.ToString(), dataGridView14[2, nRowIndex].Value.ToString(), dataGridView14[3, nRowIndex].Value.ToString(), dataGridView14[4, nRowIndex].Value.ToString(), dataGridView14[5, nRowIndex].Value.ToString(),
                             dataGridView14[6, nRowIndex].Value.ToString(), dataGridView14[7, nRowIndex].Value.ToString(), dataGridView14[8, nRowIndex].Value.ToString());
                         frm.Owner = this;
                         frm.Show(this);*/

                    }
                    break;
                case 14:
                    {
                        if (!frmNpcExtraAbility.Visible)
                        {
                            frmNpcExtraAbility = new NpcExtraAbilityAdd();
                        }
                        frmNpcExtraAbility.SetDataGridView(dataGridView15);
                        frmNpcExtraAbility.SetRowIndex(dataGridView15.CurrentCell.RowIndex);
                        frmNpcExtraAbility.SetDataTable(tblNpcExtraAbility);
                        frmNpcExtraAbility.SetModifyArray(m_ModifyIDList);
                        frmNpcExtraAbility.SetUndoStack(m_UndoStack);
                        frmNpcExtraAbility.SetRedoStack(m_RedoStack);
                        //09. 06. 06 김정협 자동변환으로 인해 추가
                        frmNpcExtraAbility.SetNPCAbility(tblNPCAbility);

                        frmNpcExtraAbility.Owner = this;
                        if (!frmNpcExtraAbility.Visible)
                        {
                            //frm.SetTableNew();
                            frmNpcExtraAbility.Show(this);
                        }
                        else
                        {
                            frmNpcExtraAbility.ADDItem();// ItemAdd_Load(null, null);
                        }
                        /*
                        NpcExtraAbilityAdd frm = new NpcExtraAbilityAdd();
                        frm.SetDataGridView(dataGridView15);
                        frm.SetDataTable(tblNpcExtraAbility);
                        frm.SetModifyArray(m_ModifyIDList);

                        int nRowIndex = dataGridView15.CurrentCell.RowIndex;
                        frm.SetData(dataGridView15[1, nRowIndex].Value.ToString(), dataGridView15[2, nRowIndex].Value.ToString(), dataGridView15[3, nRowIndex].Value.ToString(), dataGridView15[4, nRowIndex].Value.ToString(), dataGridView15[5, nRowIndex].Value.ToString(),
                            dataGridView15[6, nRowIndex].Value.ToString(), dataGridView15[7, nRowIndex].Value.ToString(), dataGridView15[8, nRowIndex].Value.ToString(), dataGridView15[9, nRowIndex].Value.ToString(), dataGridView15[10, nRowIndex].Value.ToString(),
                            dataGridView15[11, nRowIndex].Value.ToString(), dataGridView15[12, nRowIndex].Value.ToString());
                        frm.Owner = this;
                        frm.ShowDialog(this);*/

                    }
                    break;
            }


        }

        private void ItemTable_FormClosed(object sender, FormClosedEventArgs e)
        {
            Con.Close();
        }

        private void btnHistory_Click(object sender, EventArgs e)
        {
            History frm = new History();
            frm.Text = "History";
            if (tabControl1.SelectedIndex == 0)
            {
                frm.SetHistoryTable(tblItem_History);
            }
            else if (tabControl1.SelectedIndex == 1)
            {
                frm.SetHistoryTable(tblSpecialAbility_History);
            }
            else if (tabControl1.SelectedIndex == 2)
            {
                frm.SetHistoryTable(tblSocketItem_History);
            }
            else if (tabControl1.SelectedIndex == 3)
            {
                frm.SetHistoryTable(tblSocketRandom_History);
            }
            else if (tabControl1.SelectedIndex == 4)
            {
                frm.SetHistoryTable(tblSocketGroup_History);
            }
            else if (tabControl1.SelectedIndex == 5)
            {
                frm.SetHistoryTable(tblSetItem_History);
            }
            else if (tabControl1.SelectedIndex == 6)
            {
                frm.SetHistoryTable(tblRandomBoxTable_History);
            }
            else if (tabControl1.SelectedIndex == 7)
            {
                frm.SetHistoryTable(tblRandomItemGroup_History);
            }
            else if (tabControl1.SelectedIndex == 8)
            {
                frm.SetHistoryTable(tblExchangeTable_History);
            }
            else if (tabControl1.SelectedIndex == 9)
            {
                frm.SetHistoryTable(tblManufactureTable_History);
            }
            else if (tabControl1.SelectedIndex == 10)
            {
                frm.SetHistoryTable(tblManufactureResultGroup_History);
            }
            else if (tabControl1.SelectedIndex == 11)
            {
                frm.SetHistoryTable(tblManufactureVillage_History);
            }
            else if (tabControl1.SelectedIndex == 12)
            {
                frm.SetHistoryTable(tblAttribEnchantItem_History);
            }
            else if (tabControl1.SelectedIndex == 13)
            {
                frm.SetHistoryTable(tblAttribEnchantRequire_History);
            }
            else if (tabControl1.SelectedIndex == 14)
            {
                frm.SetHistoryTable(tblNpcExtraAbility_History);
            }
            frm.ShowDialog(this);

        }

        private void btnString_Click(object sender, EventArgs e)
        {
            History frm = new History();
            frm.Text = "String";
            frm.SetHistoryTable(tblTrans);
            frm.ShowDialog(this);
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("저장하시겠습니까?", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                return;
            }

            Save();
            MessageBox.Show("저장되었습니다.");
        }



        private void ItemTable_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (!m_bSaveEnd)
            {
                DialogResult result = MessageBox.Show("내용을 수정 후 저장하지 않으셨습니다. 저장하고 끝내시겠습니까?", "", MessageBoxButtons.YesNoCancel);
                if (result == DialogResult.Yes)
                {
                    Save();
                    MessageBox.Show("저장되었습니다.");
                }
                else if(result == DialogResult.Cancel)
                {
                    e.Cancel = true;
                    return;
                }

                m_ModifyIDList.Clear();
                m_ChangeCellList.Clear();
                m_bSaveEnd = true;

                
            }

        }

        private void btnMultiAdd_Click(object sender, EventArgs e)
        {
            DataRow drRow = tblItem.Rows[dataGridView1.CurrentCell.RowIndex];
            if (Convert.ToInt32(drRow["ID"].ToString()) < 1002000)
            {
                MessageBox.Show("해당아이템은 멀티 추가할 수 있는 아이템 종류가 아닙니다.");
                return;
            }

            MultiAdd frm = new MultiAdd();
            frm.SetDataGridView(dataGridView1);
            frm.SetRowIndex(dataGridView1.CurrentCell.RowIndex);
            frm.SetDataTable(tblItem);
            frm.SetModifyArray(m_ModifyIDList);
            frm.SetTrans(tblTrans);

            frm.SetItemType(tblItemType);
            frm.SetUseType(tblUseType);
            frm.SePeriodType(tblPeriodType);
            frm.SetPriceType(tblPriceType);
            frm.SetUseCondition(tblUseCondition);
            frm.SetUnitType(tblUnitType);
            frm.SetUnitClass(tblUnitClass);
            frm.SetEqipPosition(tblEqipPosition);
            frm.SetItemGrade(tblItemGrade);

            frm.Owner = this;
            frm.ShowDialog(this);
        }

        private void btnFileGenerate_Click(object sender, EventArgs e)
        {
            if (m_bSaveEnd)
            {
                DialogResult result = MessageBox.Show("파일을 생성하시겠습니까?", "", MessageBoxButtons.OKCancel);
                if (result == DialogResult.Cancel)
                {
                    return;
                }
            }
            else
            {
                DialogResult result = MessageBox.Show("저장되지 않았습니다. 저장한 후 파일을 생성하시겠습니까?", "", MessageBoxButtons.OKCancel);
                if (result == DialogResult.OK)
                {
                    Save();
                }
                else if (result == DialogResult.Cancel)
                {
                    MessageBox.Show("저장하지 않으시면 파일을 생성할 수 없습니다.");
                    return;
                }
            }


            string strCountryCode = string.Empty;
            switch (tabControl1.SelectedIndex)
            {
                case 0:
                    {
                        StreamWriter sw;
                        //국가별 define정의할 것
#if __COUNTRY_KR__
                        string strFileName = "..\\..\\..\\resource\\KR\\Trunk\\dat\\Script\\Major\\Item.lua";
                        strCountryCode = "KR";
                        sw = new StreamWriter(strFileName, false, Encoding.Default);
#elif __COUNTRY_TW__
                        string strFileName = "...\\..\\..\\resource\\TW\\Trunk\\dat\\Script\\Major\\Item.lua";                                                                        
                        strCountryCode = "TW";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_HK__
                        string strFileName = "...\\..\\..\\resource\\HK\\Trunk\\dat\\Script\\Major\\Item.lua";
                        strCountryCode = "HK";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");                        
#elif __COUNTRY_JP__
                        string strFileName = "...\\..\\..\\resource\\JP\\Trunk\\dat\\Script\\Major\\Item.lua";
                        strCountryCode = "JP";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");                        
#endif


                        for (int i = 0; i < dataGridView1.RowCount; i++)
                        {
                            //국가별 define정의 해줄 것
#if __COUNTRY_KR__
                            DataRow dr = Adpt_Release.GetDataByRelease("KR", "Item", Convert.ToInt32(dataGridView1["IndexKey", i].Value.ToString())).Rows[0];
#elif __COUNTRY_TW__
                            DataRow dr = Adpt_Release.GetDataByRelease("TW", "Item", Convert.ToInt32(dataGridView1["IndexKey", i].Value.ToString())).Rows[0];
#elif __COUNTRY_HK__
                            DataRow dr = Adpt_Release.GetDataByRelease("HK", "Item", Convert.ToInt32(dataGridView1["IndexKey", i].Value.ToString())).Rows[0];
#elif __COUNTRY_JP__
                            DataRow dr = Adpt_Release.GetDataByRelease("JP", "Item", Convert.ToInt32(dataGridView1["IndexKey", i].Value.ToString())).Rows[0];
#endif

                            if (dr["State"].ToString() == "False")
                            {
                                continue;
                            }

                            sw.Write("\r\n\r\n\r\n");
                            sw.Write("g_pItemManager:AddItemTemplet\r\n");
                            sw.Write("{\r\n");

                            sw.Write("       ");
                            sw.Write("m_ItemID = ");
                            sw.Write(dataGridView1["ID", i].Value.ToString());
                            sw.Write(",\r\n");

                           
                            sw.Write("       ");
                            sw.Write("m_Name = \"");
                            sw.Write(dataGridView1["Name", i].Value.ToString());
                            sw.Write("\",\r\n");

                            if (dataGridView1["Description", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("m_Description = \"");
                                sw.Write(dataGridView1["Description", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["Description In Shop", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("m_DescriptionInShop = \"");
                                sw.Write(dataGridView1["Description In Shop", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            sw.Write("\r\n");
                            if (dataGridView1["Model Name", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("m_ModelName = \"");
                                sw.Write(dataGridView1["Model Name", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["Model Name1", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("m_ModelName1 = \"");
                                sw.Write(dataGridView1["Model Name1", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["Texture Change XET Name", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("m_TextureChangeXETName = \"");
                                sw.Write(dataGridView1["Texture Change XET Name", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["Anim XET Name", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("m_AniXETName = \"");
                                sw.Write(dataGridView1["Anim XET Name", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }

                            if (dataGridView1["Anim Name", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("m_AniName = \"");
                                sw.Write(dataGridView1["Anim Name", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }

                            if (dataGridView1["Shop Image", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("m_ShopImage = \"");
                                sw.Write(dataGridView1["Shop Image", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }


                            if (dataGridView1["Drop Viewer", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("m_DropViewer = \"");
                                sw.Write(dataGridView1["Drop Viewer", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }

                            sw.Write("\r\n");


                            if (dataGridView1["USETYPE_C", i].Value.ToString() != "USE_TYPE[\"UT_NONE\"]")
                            {
                                sw.Write("       ");
                                sw.Write("m_UseType = ");
                                sw.Write(dataGridView1["USETYPE_C", i].Value.ToString());
                                sw.Write(",         --");
                                sw.Write(dataGridView1["Use Type_", i].Value.ToString());
                                sw.Write("\r\n");
                            }

                            if (dataGridView1["USECONDITION_C", i].Value.ToString() != "USE_CONDITION[\"UC_ANYONE\"]")
                            {
                                sw.Write("       ");
                                sw.Write("m_UseCondition = ");
                                sw.Write(dataGridView1["USECONDITION_C", i].Value.ToString());
                                sw.Write(",         --");
                                sw.Write(dataGridView1["Use Condition_", i].Value.ToString());
                                sw.Write("\r\n");
                            }

                            if (dataGridView1["UNITTYPE_C", i].Value.ToString() != "UNIT_TYPE[\"UT_NONE\"]")
                            {
                                sw.Write("       ");
                                sw.Write("m_UnitType = ");
                                sw.Write(dataGridView1["UNITTYPE_C", i].Value.ToString());
                                sw.Write(",         --");
                                sw.Write(dataGridView1["Unit Type_", i].Value.ToString());
                                sw.Write("\r\n");
                            }

                            if (dataGridView1["UNITCLASS_C", i].Value.ToString() != "UNIT_CLASS[\"UC_NONE\"]")
                            {
                                sw.Write("       ");
                                sw.Write("m_UnitClass = ");
                                sw.Write(dataGridView1["UNITCLASS_C", i].Value.ToString());
                                sw.Write(",         --");
                                sw.Write(dataGridView1["Unit Class_", i].Value.ToString());
                                sw.Write("\r\n");
                            }


                            if (dataGridView1["Use Level", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_UseLevel = ");
                                sw.Write(dataGridView1["Use Level", i].Value.ToString());
                                sw.Write(",\r\n");
                            }

                            sw.Write("\r\n");

                            sw.Write("       ");
                            sw.Write("m_ItemType = ");
                            sw.Write(dataGridView1["ITEMTYPE_C", i].Value.ToString());
                            sw.Write(",              --");
                            sw.Write(dataGridView1["Item Type_", i].Value.ToString());
                            sw.Write("\r\n");


                            if (dataGridView1["ITEMGRADE_C", i].Value.ToString() != "ITEM_GRADE[\"IG_NORMAL\"]")
                            {
                                sw.Write("       ");
                                sw.Write("m_ItemGrade = ");
                                sw.Write(dataGridView1["ITEMGRADE_C", i].Value.ToString());
                                sw.Write(",         --");
                                sw.Write(dataGridView1["Item Grade_", i].Value.ToString());
                                sw.Write("\r\n");
                            }

                            if (!dataGridView1["Fashion", i].Value.Equals(false))
                            {
                                sw.Write("       ");
                                sw.Write("m_bFashion = True,");
                                sw.Write("\r\n");
                            }

                            if (!dataGridView1["Vested", i].Value.Equals(false))
                            {
                                sw.Write("       ");
                                sw.Write("m_bVested = True,");
                                sw.Write("\r\n");
                            }

                            if (!dataGridView1["Can Enchant", i].Value.Equals(false))
                            {
                                sw.Write("       ");
                                sw.Write("m_bCanEnchant = True,");
                                sw.Write("\r\n");
                            }

                            if (!dataGridView1["Can Use Inventory", i].Value.Equals(false))
                            {
                                sw.Write("       ");
                                sw.Write("m_bCanUseInventory = True,");
                                sw.Write("\r\n");
                            }

                            if (!dataGridView1["NoEquip", i].Value.Equals(false))
                            {
                                sw.Write("       ");
                                sw.Write("m_bNoEquip = True,");
                                sw.Write("\r\n");
                            }

                            sw.Write("\r\n");

                            if (!dataGridView1["MaxSealCount", i].Value.Equals(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_ucMaxSealCount  = ");
                                sw.Write(dataGridView1["MaxSealCount", i].Value.ToString());
                                sw.Write(",\r\n");
                            }

                            if (!dataGridView1["NumOfSealToNeed", i].Value.Equals(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_ucNumOfSealToNeed  = ");
                                sw.Write(dataGridView1["NumOfSealToNeed", i].Value.ToString());
                                sw.Write(",\r\n");
                            }

                            

                            sw.Write("\r\n");

                            if (dataGridView1["Attach FrameName", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("m_AttachFrameName = \"");
                                sw.Write(dataGridView1["Attach FrameName", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }

                            if (dataGridView1["Attach FrameName1", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("m_AttachFrameName1 = \"");
                                sw.Write(dataGridView1["Attach FrameName1", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }

                            sw.Write("\r\n");

                            if (dataGridView1["FO_Elsword_X", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetElswordX = ");
                                sw.Write(dataGridView1["FO_Elsword_X", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Elsword_Y", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetElswordY = ");
                                sw.Write(dataGridView1["FO_Elsword_Y", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Elsword_Z", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetElswordZ = ");
                                sw.Write(dataGridView1["FO_Elsword_Z", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Lena_X", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetLenaX = ");
                                sw.Write(dataGridView1["FO_Lena_X", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Lena_Y", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetLenaY = ");
                                sw.Write(dataGridView1["FO_Lena_Y", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Lena_Z", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetLenaZ = ");
                                sw.Write(dataGridView1["FO_Lena_Z", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Aisha_X", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetAishaX = ");
                                sw.Write(dataGridView1["FO_Aisha_X", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Aisha_Y", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetAishaY = ");
                                sw.Write(dataGridView1["FO_Aisha_Y", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Aisha_Z", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetAishaZ = ");
                                sw.Write(dataGridView1["FO_Aisha_Z", i].Value.ToString());
                                sw.Write(",\r\n");
                            }

                            if (dataGridView1["FO_Raven_X", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetRavenX = ");
                                sw.Write(dataGridView1["FO_Raven_X", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Raven_Y", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetRavenY = ");
                                sw.Write(dataGridView1["FO_Raven_Y", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Raven_Z", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetRavenZ = ");
                                sw.Write(dataGridView1["FO_Raven_Z", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Eve_X", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetEveX = ");
                                sw.Write(dataGridView1["FO_Eve_X", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Eve_Y", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetEveY = ");
                                sw.Write(dataGridView1["FO_Eve_Y", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["FO_Eve_Z", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_FrameOffsetEveZ = ");
                                sw.Write(dataGridView1["FO_Eve_Z", i].Value.ToString());
                                sw.Write(",\r\n");
                            }

                            if (!dataGridView1["Can HyperMode", i].Value.Equals(false))
                            {
                                sw.Write("       ");
                                sw.Write("m_bCanHyperMode = True,");
                                sw.Write("\r\n");
                            }

                            sw.Write("\r\n");

                            if (dataGridView1["PERIODTYPE_C", i].Value.ToString() != "PERIOD_TYPE[\"PT_INFINITY\"]")
                            {
                                sw.Write("       ");
                                sw.Write("m_PeriodType = ");
                                sw.Write(dataGridView1["PERIODTYPE_C", i].Value.ToString());
                                sw.Write(",         --");
                                sw.Write(dataGridView1["Period Type_", i].Value.ToString());
                                sw.Write("\r\n");
                            }

                            if (dataGridView1["Endurance", i].Value.ToString() != Convert.ToString(-1))
                            {
                                sw.Write("       ");
                                sw.Write("m_Endurance = ");
                                sw.Write(dataGridView1["Endurance", i].Value.ToString());
                                sw.Write(",\r\n");
                            }

                            if (dataGridView1["EnduranceDamageMin", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_EnduranceDamageMin = ");
                                sw.Write(dataGridView1["EnduranceDamageMin", i].Value.ToString());
                                sw.Write(",\r\n");
                            }

                            if (dataGridView1["EnduranceDamageMax", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_EnduranceDamageMax = ");
                                sw.Write(dataGridView1["EnduranceDamageMax", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["Repair ED", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_RepairED = ");
                                sw.Write(dataGridView1["Repair ED", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["Repair VP", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_RepairVP = ");
                                sw.Write(dataGridView1["Repair VP", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["Quantity", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_Quantity = ");
                                sw.Write(dataGridView1["Quantity", i].Value.ToString());
                                sw.Write(",\r\n");
                            }

                            sw.Write("\r\n");

                            if (dataGridView1["PRICETYPE_C", i].Value.ToString() != "SHOP_PRICE_TYPE[\"SPT_GP\"]")
                            {
                                sw.Write("       ");
                                sw.Write("m_PriceType = ");
                                sw.Write(dataGridView1["PRICETYPE_C", i].Value.ToString());
                                sw.Write(",         --");
                                sw.Write(dataGridView1["Price Type_", i].Value.ToString());
                                sw.Write("\r\n");
                            }

                            if (dataGridView1["Price", i].Value.ToString() != Convert.ToString(0) &&
                                dataGridView1["Price", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("m_Price = ");
                                sw.Write(dataGridView1["Price", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["Price PvP Point", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_PricePvPPoint = ");
                                sw.Write(dataGridView1["Price PvP Point", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            sw.Write("\r\n");

                            if (dataGridView1["EQIPPOSITION_C", i].Value.ToString() != "EQIP_POSITION[\"EP_QUICK_SLOT\"]")
                            {
                                sw.Write("       ");
                                sw.Write("m_EqipPosition = ");
                                sw.Write(dataGridView1["EQIPPOSITION_C", i].Value.ToString());
                                sw.Write(",         --");
                                sw.Write(dataGridView1["Eqip Position_", i].Value.ToString());
                                sw.Write("\r\n");
                            }
                            sw.Write("\r\n");


                            if (dataGridView1["SLASH_TRACE_COLOR", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("SLASH_TRACE_COLOR = { ");
                                sw.Write(dataGridView1["SLASH_TRACE_COLOR", i].Value.ToString());
                                sw.Write(" },\r\n");                                                                
                            }
                            sw.Write("\r\n");
                            if (dataGridView1["SLASH_TRACE_TIP_COLOR", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("SLASH_TRACE_TIP_COLOR = { ");
                                sw.Write(dataGridView1["SLASH_TRACE_TIP_COLOR", i].Value.ToString());
                                sw.Write(" },\r\n");
                            }
                            sw.Write("\r\n");
                            if (dataGridView1["HYPER_SLASH_TRACE_COLOR", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("HYPER_SLASH_TRACE_COLOR = { ");
                                sw.Write(dataGridView1["HYPER_SLASH_TRACE_COLOR", i].Value.ToString());
                                sw.Write(" },\r\n");
                            }
                            sw.Write("\r\n");
                            if (dataGridView1["HYPER_SLASH_TRACE_TIP_COLOR", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("HYPER_SLASH_TRACE_TIP_COLOR = { ");
                                sw.Write(dataGridView1["HYPER_SLASH_TRACE_TIP_COLOR", i].Value.ToString());
                                sw.Write(" },\r\n");
                            }
                            sw.Write("\r\n");


                            sw.Write("       ");
                            sw.Write("m_Stat =\r\n");
                            sw.Write("       {\r\n");

                            if (dataGridView1["BASE_HP", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("              ");
                                sw.Write("m_fBaseHP = ");
                                sw.Write(dataGridView1["BASE_HP", i].Value.ToString());
                                sw.Write(",\r\n");
                            }

                            if (dataGridView1["ATK_PHYSIC", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("              ");
                                sw.Write("m_fAtkPhysic = ");
                                sw.Write(dataGridView1["ATK_PHYSIC", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["ATK_MAGIC", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("              ");
                                sw.Write("m_fAtkMagic = ");
                                sw.Write(dataGridView1["ATK_MAGIC", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["DEF_PHYSIC", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("              ");
                                sw.Write("m_fDefPhysic = ");
                                sw.Write(dataGridView1["DEF_PHYSIC", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            if (dataGridView1["DEF_MAGIC", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("              ");
                                sw.Write("m_fDefMagic = ");
                                sw.Write(dataGridView1["DEF_MAGIC", i].Value.ToString());
                                sw.Write(",\r\n");
                            }
                            sw.Write("       ");
                            sw.Write("},\r\n");
                            sw.Write("\r\n");

                            sw.Write("       ");
                            sw.Write("m_SpecialAbilityList =\r\n");
                            sw.Write("       {\r\n");

                            //스페셜 어빌리티 추가하며 채워넣을 것
                            int nSACount = Convert.ToInt32(dataGridView1["SA_NUM", i].Value.ToString());
                            for (int j = 1; j <= nSACount; j++)
                            {
                                //SA
                                string strSA = "SA_0" + j;
                                int nSA_ID = Convert.ToInt32(dataGridView1[strSA, i].Value.ToString());
                                for (int k = 0; k < dataGridView2.RowCount; k++)
                                {
                                    if (Convert.ToInt32(dataGridView2["ID", k].Value.ToString()) > -1)
                                    {
                                        if (dataGridView2["ID", k].Value.ToString() == Convert.ToString(nSA_ID))
                                        {
                                            sw.Write("              \r\n");
                                            sw.Write("              {\r\n");


                                            if (dataGridView2["TYPE_C", k].Value.ToString() != "CX2Item::SAT_NONE")
                                            {
                                                sw.Write("                     ");
                                                sw.Write("TYPE = ");
                                                sw.Write(dataGridView2["TYPE_C", k].Value.ToString());
                                                sw.Write(",         --");
                                                sw.Write(dataGridView2["TYPE_", k].Value.ToString());
                                                sw.Write("\r\n");
                                            }

                                            if (dataGridView2["VALUE1", k].Value.ToString() != Convert.ToString(0))
                                            {
                                                sw.Write("                     ");
                                                sw.Write("VALUE1 = ");
                                                sw.Write(dataGridView2["VALUE1", k].Value.ToString());
                                                sw.Write(",\r\n");
                                            }
                                            if (dataGridView2["VALUE2", k].Value.ToString() != Convert.ToString(0))
                                            {
                                                sw.Write("                     ");
                                                sw.Write("VALUE2 = ");
                                                sw.Write(dataGridView2["VALUE2", k].Value.ToString());
                                                sw.Write(",\r\n");
                                            }
                                            if (dataGridView2["VALUE3", k].Value.ToString() != Convert.ToString(0))
                                            {
                                                sw.Write("                     ");
                                                sw.Write("VALUE3 = ");
                                                sw.Write(dataGridView2["VALUE3", k].Value.ToString());
                                                sw.Write(",\r\n");
                                            }

                                            sw.Write("              },\r\n");
                                        }
                                    }
                                }
                            }

                            sw.Write("       ");
                            sw.Write("},\r\n");
                            sw.Write("\r\n");

                            sw.Write("       ");
                            sw.Write("SOCKET_OPTION =\r\n");
                            sw.Write("       {\r\n");
                            
                            for (int j = 1; j <= 9; j++)
                            {
                                string strSocket = "SO_0" + j;
                                int nSocket = Convert.ToInt32(dataGridView1[strSocket, i].Value.ToString());
                                if (nSocket > 0)
                                {
                                    sw.Write("              ");
                                    // sw.Write(strSocket);
                                    //sw.Write(" = ");
                                    sw.Write(dataGridView1[strSocket, i].Value.ToString());
                                    sw.Write(", \r\n");
                                }
                            }

                            sw.Write("       },\r\n");
                            sw.Write("\r\n");

                                                       


                            if (dataGridView1["ATTACHED_MESH_NAME1", i].Value.ToString() != "NULL")
                            {
                                sw.Write("       ");
                                sw.Write("ATTACHED_MESH =\r\n");
                                sw.Write("       {\r\n");
                                
                                for (int nAttMeshCount = 1; nAttMeshCount <= 5; nAttMeshCount++)
                                {
                                    if (dataGridView1["ATTACHED_MESH_NAME" + nAttMeshCount, i].Value.ToString() != "")
                                    {
                                        sw.Write("              { \r\n");
                                        sw.Write("                     ");
                                        sw.Write("MESH_NAME = \"");
                                        sw.Write(dataGridView1["ATTACHED_MESH_NAME" + nAttMeshCount, i].Value.ToString());
                                        sw.Write("\",\r\n");
                                        sw.Write("                     ");
                                        sw.Write("BONE_NAME = \"");
                                        sw.Write(dataGridView1["ATTACHED_MESH_BONE_NAME" + nAttMeshCount, i].Value.ToString());
                                        sw.Write("\",\r\n");
                                        sw.Write("              },\r\n");
                                        
                                    }
                                    else
                                    {
                                        break;
                                    }
                                }
                                sw.Write("       },\r\n");
                            }
                            sw.Write("\r\n");

                            if (dataGridView1["ATTACHED_PARTICLE_NAME1", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("ATTACHED_PARTICLE =\r\n");
                                sw.Write("       {\r\n");

                                for (int j = 1; j <= 2; j++)
                                {
                                    string strName1 = "ATTACHED_PARTICLE_NAME" + j;
                                    string strName2 = "ATTACHED_PARTICLE_BONE_NAME" + j;

                                    sw.Write("              { \r\n");
                                    sw.Write("                     ");
                                    sw.Write("PARTICLE_NAME = \"");
                                    sw.Write(dataGridView1[strName1, i].Value.ToString());
                                    sw.Write("\",\r\n");

                                    sw.Write("                     ");
                                    sw.Write("BONE_NAME = \"");
                                    sw.Write(dataGridView1[strName2, i].Value.ToString());
                                    sw.Write("\",\r\n");
                                    sw.Write("              },\r\n");
                                }
                                sw.Write("       },\r\n");
                            }
                            sw.Write("\r\n");

                            if (dataGridView1["COOL_TIME", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_CoolTime = ");
                                sw.Write(dataGridView1["COOL_TIME", i].Value.ToString());
                                sw.Write(",\r\n");
                            }

                            if (dataGridView1["SET_ID", i].Value.ToString() != Convert.ToString(0))
                            {
                                sw.Write("       ");
                                sw.Write("m_SetID = ");
                                sw.Write(dataGridView1["SET_ID", i].Value.ToString());
                                sw.Write(",\r\n");
                            }


                            if (dataGridView1["ELSWORD_ITEM_SCALE_ROTATE", i].Value.ToString() != "NULL")
                            {
                                sw.Write("       ");
                                sw.Write("ELSWORD_ITEM_SCALE_ROTATE = \"");
                                sw.Write(dataGridView1["ELSWORD_ITEM_SCALE_ROTATE", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["AISHA_ITEM_SCALE_ROTATE", i].Value.ToString() != "NULL")
                            {
                                sw.Write("       ");
                                sw.Write("AISHA_ITEM_SCALE_ROTATE = \"");
                                sw.Write(dataGridView1["AISHA_ITEM_SCALE_ROTATE", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["RENA_ITEM_SCALE_ROTATE", i].Value.ToString() != "NULL")
                            {
                                sw.Write("       ");
                                sw.Write("RENA_ITEM_SCALE_ROTATE = \"");
                                sw.Write(dataGridView1["RENA_ITEM_SCALE_ROTATE", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["RAVEN_ITEM_SCALE_ROTATE", i].Value.ToString() != "NULL")
                            {
                                sw.Write("       ");
                                sw.Write("RAVEN_ITEM_SCALE_ROTATE = \"");
                                sw.Write(dataGridView1["RAVEN_ITEM_SCALE_ROTATE", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["EVE_ITEM_SCALE_ROTATE", i].Value.ToString() != "NULL")
                            {
                                sw.Write("       ");
                                sw.Write("EVE_ITEM_SCALE_ROTATE = \"");
                                sw.Write(dataGridView1["EVE_ITEM_SCALE_ROTATE", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            sw.Write("\r\n");

                            if (dataGridView1["ELSWORD_MODEL_NAME", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("ELSWORD_MODEL_NAME = \"");
                                sw.Write(dataGridView1["ELSWORD_MODEL_NAME", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["ELSWORD_XET_NAME", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("ELSWORD_XET_NAME = \"");
                                sw.Write(dataGridView1["ELSWORD_XET_NAME", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["AISHA_MODEL_NAME", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("AISHA_MODEL_NAME = \"");
                                sw.Write(dataGridView1["AISHA_MODEL_NAME", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["AISHA_XET_NAME", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("AISHA_XET_NAME = \"");
                                sw.Write(dataGridView1["AISHA_XET_NAME", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["RENA_MODEL_NAME", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("RENA_MODEL_NAME = \"");
                                sw.Write(dataGridView1["RENA_MODEL_NAME", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["RENA_XET_NAME", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("RENA_XET_NAME = \"");
                                sw.Write(dataGridView1["RENA_XET_NAME", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["RAVEN_MODEL_NAME", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("RAVEN_MODEL_NAME = \"");
                                sw.Write(dataGridView1["RAVEN_MODEL_NAME", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["RAVEN_XET_NAME", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("RAVEN_XET_NAME = \"");
                                sw.Write(dataGridView1["RAVEN_XET_NAME", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["EVE_MODEL_NAME", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("EVE_MODEL_NAME = \"");
                                sw.Write(dataGridView1["EVE_MODEL_NAME", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }
                            if (dataGridView1["EVE_XET_NAME", i].Value.ToString() != "")
                            {
                                sw.Write("       ");
                                sw.Write("EVE_XET_NAME = \"");
                                sw.Write(dataGridView1["EVE_XET_NAME", i].Value.ToString());
                                sw.Write("\",\r\n");
                            }



                            //sw.Write("       ");
                            //sw.Write("\r\n");
                            sw.Write("}\r\n");
                            // sw.Write("\r\n\r\n");


                        }

                        sw.Close();

                        
                        Process Dos = new Process();
                        Dos.StartInfo.FileName = "tortoiseProc";
                        Dos.StartInfo.Arguments = "/Command:commit /path:\"..\\..\\..\\resource\\" + strCountryCode +"\\Trunk\\dat\\Script\\Major\\Item.lua\" /notempfile /closeonend:1";
                        Dos.Start();
                    }
                    break;
                case 2:
                    {
                        
                        StreamWriter sw;
                        //국가별 define정의할 것
#if __COUNTRY_KR__
                        string strFileName = "..\\..\\..\\resource\\KR\\Trunk\\dat\\Script\\Major\\OptionItemData.lua";
                        strCountryCode = "KR";
                        sw = new StreamWriter(strFileName, false, Encoding.Default);
#elif __COUNTRY_TW__
                        string strFileName = "..\\..\\..\\resource\\TW\\Trunk\\dat\\Script\\Major\\OptionItemData.lua";
                        strCountryCode = "TW";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
                        
#elif __COUNTRY_HK__
                        string strFileName = "..\\..\\..\\resource\\HK\\Trunk\\dat\\Script\\Major\\OptionItemData.lua";
                        strCountryCode = "HK";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");                        
#elif __COUNTRY_JP__
                        string strFileName = "..\\..\\..\\resource\\JP\\Trunk\\dat\\Script\\Major\\OptionItemData.lua";
                        strCountryCode = "JP";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");                        
#endif


                        for (int i = 0; i < dataGridView3.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView3["ID", i].Value.ToString()) > -1)
                            {
                                sw.Write("\r\n");
                                sw.Write("g_pCX2SocketItem:AddSocketData_LUA\r\n");
                                sw.Write("{\r\n");


                                sw.Write("       ");
                                sw.Write("ID = ");
                                sw.Write(dataGridView3["ID", i].Value.ToString());
                                sw.Write(",\r\n");

                                sw.Write("       ");
                                sw.Write("TYPE = ");
                                sw.Write(dataGridView3["Socket Type_C", i].Value.ToString());
                                sw.Write(",              --");
                                sw.Write(dataGridView3["Socket Type_", i].Value.ToString());
                                sw.Write("\r\n");

                                sw.Write("\r\n");

                                sw.Write("       ");
                                sw.Write("STAT =\r\n");
                                sw.Write("       {\r\n");

                                if (dataGridView3["BASE_HP", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("              ");
                                    sw.Write("m_fBaseHP = ");
                                    sw.Write(dataGridView3["BASE_HP", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["ATK_PHYSIC", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("              ");
                                    sw.Write("m_fAtkPhysic = ");
                                    sw.Write(dataGridView3["ATK_PHYSIC", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["ATK_MAGIC", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("              ");
                                    sw.Write("m_fAtkMagic = ");
                                    sw.Write(dataGridView3["ATK_MAGIC", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["DEF_PHYSIC", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("              ");
                                    sw.Write("m_fDefPhysic = ");
                                    sw.Write(dataGridView3["DEF_PHYSIC", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["DEF_MAGIC", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("              ");
                                    sw.Write("m_fDefMagic = ");
                                    sw.Write(dataGridView3["DEF_MAGIC", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                sw.Write("       },\r\n");
                                sw.Write("\r\n");

                                if (dataGridView3["HyperModeTime", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fHyperModeTime = ");
                                    sw.Write(dataGridView3["HyperModeTime", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["RepairPriceSale", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fRepairPriceSale = ");
                                    sw.Write(dataGridView3["RepairPriceSale", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["MoveSpeed", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fMoveSpeed = ");
                                    sw.Write(dataGridView3["MoveSpeed", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["JumpSpeed", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fJumpSpeed = ");
                                    sw.Write(dataGridView3["JumpSpeed", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["HyperModeChargeRate", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fHyperModeChargeRate = ");
                                    sw.Write(dataGridView3["HyperModeChargeRate", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }


                                if (Convert.ToInt32(dataGridView3["ExtraDamageType", i].Value.ToString()) > 0)
                                {
                                    sw.Write("\r\n");

                                    sw.Write("       ");
                                    sw.Write("EXTRA_DAMAGE =\r\n");
                                    sw.Write("       {\r\n");

                                    sw.Write("              ");
                                    sw.Write("EXTRA_DAMAGE_TYPE = ");
                                    sw.Write(dataGridView3["ExtraDamageType_C", i].Value.ToString());
                                    sw.Write(",              --");
                                    sw.Write(dataGridView3["ExtraDamageType_", i].Value.ToString());
                                    sw.Write("\r\n");

                                    sw.Write("              ");
                                    sw.Write("RATE = ");
                                    sw.Write(dataGridView3["RATE", i].Value.ToString());
                                    sw.Write(",\r\n");
                                    sw.Write("              ");
                                    sw.Write("TIME = ");
                                    sw.Write(dataGridView3["TIME", i].Value.ToString());
                                    sw.Write(",\r\n");
                                    sw.Write("              ");
                                    sw.Write("DAMAGE_PER_SEC = ");
                                    sw.Write(dataGridView3["DamagePerSec", i].Value.ToString());
                                    sw.Write(",\r\n");

                                    sw.Write("       },\r\n");
                                }

                                if (dataGridView3["DamageReduceValue", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fDamageReduce = ");
                                    sw.Write(dataGridView3["DamageReduceValue", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (dataGridView3["DamageReduceRate", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fPercentDamageReduce = ");
                                    sw.Write(dataGridView3["DamageReduceRate", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                sw.Write("       ");
                                sw.Write("m_SetMonsterIDDamageReduced = \"");
                                sw.Write(dataGridView3["MonsterIDDamageReduced", i].Value.ToString());
                                sw.Write("\",\r\n");


                                if (dataGridView3["DamageReduceValueByMonsterAttack", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fDamageReduceByMonsterAttack = ");
                                    sw.Write(dataGridView3["DamageReduceValueByMonsterAttack", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (dataGridView3["DamageReduceRateByMonsterAttack", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fPercentDRByMonsterAttack = ");
                                    sw.Write(dataGridView3["DamageReduceRateByMonsterAttack", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                sw.Write("       ");
                                sw.Write("m_DescEvadeByMonsterAttack = \"");
                                sw.Write(dataGridView3["DescEvadeByMonsterAttack", i].Value.ToString());
                                sw.Write("\",\r\n");

                                if (dataGridView3["EvadeRate", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fEvadePercent = ");
                                    sw.Write(dataGridView3["EvadeRate", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["AntiEvadeRate", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fAntiEvadePercent = ");
                                    sw.Write(dataGridView3["AntiEvadeRate", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["AnimSpeedRate", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_iAnimationSpeedRate = ");
                                    sw.Write(dataGridView3["AnimSpeedRate", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["PercentSuperArmor", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fPercentSuperArmor = ");
                                    sw.Write(dataGridView3["PercentSuperArmor", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["TimeSuperArmor", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fTimeSuperArmor = ");
                                    sw.Write(dataGridView3["TimeSuperArmor", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }



                                sw.Write("       ");
                                sw.Write("RESIST_ENCHANT =\r\n");
                                sw.Write("       {\r\n");

                                if (dataGridView3["ResistBlaze", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("              ");
                                    sw.Write("BLAZE = ");
                                    sw.Write(dataGridView3["ResistBlaze", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["ResistWater", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("              ");
                                    sw.Write("WATER = ");
                                    sw.Write(dataGridView3["ResistWater", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["ResistNature", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("              ");
                                    sw.Write("NATURE = ");
                                    sw.Write(dataGridView3["ResistNature", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["ResistWind", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("              ");
                                    sw.Write("WIND = ");
                                    sw.Write(dataGridView3["ResistWind", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["ResistLight", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("              ");
                                    sw.Write("LIGHT = ");
                                    sw.Write(dataGridView3["ResistLight", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["ResistDark", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("              ");
                                    sw.Write("DARK = ");
                                    sw.Write(dataGridView3["ResistDark", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                sw.Write("       },\r\n");


                                if (dataGridView3["CriticalRate", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fPercentCritical = ");
                                    sw.Write(dataGridView3["CriticalRate", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["CriticalValue", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fCritical = ");
                                    sw.Write(dataGridView3["CriticalValue", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                sw.Write("       ");
                                sw.Write("m_SkillLevelUpID = \"");
                                sw.Write(dataGridView3["Skill ID", i].Value.ToString());
                                sw.Write("\",\r\n");

                                if (dataGridView3["MPUpRateByAttacked", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fPercentMPUpByAttacked = ");
                                    sw.Write(dataGridView3["MPUpRateByAttacked", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (dataGridView3["MPUpValueByAttacked", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fMPUpByAttacked = ");
                                    sw.Write(dataGridView3["MPUpValueByAttacked", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (dataGridView3["DamageUpValueAtDown", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fDamageUpByAMADS = ");
                                    sw.Write(dataGridView3["DamageUpValueAtDown", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }


                                if (Convert.ToInt32(dataGridView3["ExtraDamageResistType", i].Value.ToString()) > 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_ResistExtraDamageType = ");
                                    sw.Write(dataGridView3["ExtraDamageResistType_C", i].Value.ToString());
                                    sw.Write(",              --");
                                    sw.Write(dataGridView3["ExtraDamageResistType_", i].Value.ToString());
                                    sw.Write("\r\n");

                                    sw.Write("       ");
                                    sw.Write("m_fResistExtraDamage = ");
                                    sw.Write(dataGridView3["ExtraDamageResistValue", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (dataGridView3["AllSkillLevelUp", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_AllSkillLevelUp = ");
                                    sw.Write(dataGridView3["AllSkillLevelUp", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["IncreaseHP", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_IncreaseHP = ");
                                    sw.Write(dataGridView3["IncreaseHP", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["DamagePercentUpAtMonster", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fDamageUpPerAtSpecificMonster = ");
                                    sw.Write(dataGridView3["DamagePercentUpAtMonster", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                sw.Write("       ");
                                sw.Write("m_setMonsterIDForDamageUp = \"");
                                sw.Write(dataGridView3["MonsterIDDamagePercentUp", i].Value.ToString());
                                sw.Write("\",\r\n");

                                if (dataGridView3["EvadePerUpAtMonster", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fEvadePercentByMonsterAttack = ");
                                    sw.Write(dataGridView3["EvadePerUpAtMonster", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                sw.Write("       ");
                                sw.Write("m_setMonsterIDForEvade = \"");
                                sw.Write(dataGridView3["MonsterIDEvadePercentUp", i].Value.ToString());
                                sw.Write("\",\r\n");

                                if (Convert.ToInt32(dataGridView3["ImmuneExtraDamageType", i].Value.ToString()) > 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_ImmuneExtraDamageType = ");
                                    sw.Write(dataGridView3["ImmuneExtraDamageType_C", i].Value.ToString());
                                    sw.Write(",              --");
                                    sw.Write(dataGridView3["ImmuneExtraDamageType_", i].Value.ToString());
                                    sw.Write("\r\n");

                                    sw.Write("       ");
                                    sw.Write("m_fPercentImmuneExtraDamage = ");
                                    sw.Write(dataGridView3["ExtraDamageImmunePercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (dataGridView3["SpeedUpManaGather", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fSpeedUpManaGather = ");
                                    sw.Write(dataGridView3["SpeedUpManaGather", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["IncreaseEDPercent", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fIncreaseEDPercent = ");
                                    sw.Write(dataGridView3["IncreaseEDPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (dataGridView3["IncreaseDCBExpPercent", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fIncreaseDCBExpPercent = ");
                                    sw.Write(dataGridView3["IncreaseDCBExpPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (!dataGridView3["Dungeon Only", i].Value.Equals(false))
                                {
                                    sw.Write("       ");
                                    sw.Write("DUNGEON_ONLY = ");
                                    sw.Write(dataGridView3["Dungeon Only", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (!dataGridView3["PVP_Only", i].Value.Equals(false))
                                {
                                    sw.Write("       ");
                                    sw.Write("PVP_ONLY = ");
                                    sw.Write(dataGridView3["PVP_Only", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (!dataGridView3["Over Lap", i].Value.Equals(true))
                                {
                                    sw.Write("       ");
                                    sw.Write("OVER_LAP = ");
                                    sw.Write(dataGridView3["Over Lap", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                sw.Write("}\r\n");

                            }
                        }

                        sw.Close();
                        
                        Process Dos = new Process();
                        Dos.StartInfo.FileName = "tortoiseProc";
                        Dos.StartInfo.Arguments = "/Command:commit /path:\"..\\..\\..\\resource\\" + strCountryCode +"\\Trunk\\dat\\Script\\Major\\OptionItemData.lua\" /notempfile /closeonend:1";
                        Dos.Start();
                    }
                    break;
                case 3:
                    {
                        
                        StreamWriter sw;
                        //국가별 define정의할 것
#if __COUNTRY_KR__
                        string strFileName = "..\\..\\..\\source\\KR\\Trunk\\KncWX2Server\\GameServer\\SocketItemTable.lua";
                        strCountryCode = "KR";
                        sw = new StreamWriter(strFileName, false, Encoding.Default);
#elif __COUNTRY_TW__
                        string strFileName = "..\\..\\..\\source\\TW\\Trunk\\KncWX2Server\\GameServer\\SocketItemTable.lua";
                        strCountryCode = "TW";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_HK__
                        string strFileName = "..\\..\\..\\source\\HK\\Trunk\\KncWX2Server\\GameServer\\SocketItemTable.lua";
                        strCountryCode = "HK";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_JP__
                        string strFileName = "..\\..\\..\\source\\JP\\Trunk\\KncWX2Server\\GameServer\\SocketItemTable.lua";
                        strCountryCode = "JP";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#endif



                        sw.Write("\r\n\r\n\r\n");

                        for (int i = 0; i < dataGridView4.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView4["SocketDataType", i].Value.ToString()) > -1)
                            {
                                sw.Write("g_pCX2SocketItem:AddSocketRandomData( ");
                                sw.Write(dataGridView4["SocketDataType_", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView4["GroupID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView4["Rate", i].Value.ToString());
                                sw.Write(" )\r\n");
                            }
                        }

                        sw.Write("\r\n\r\n\r\n");

                        for (int i = 0; i < dataGridView5.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView5["GroupID", i].Value.ToString()) > -1)
                            {
                                sw.Write("g_pCX2SocketItem:AddSocketGroup( ");
                                sw.Write(dataGridView5["GroupID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView5["EnchantLvBegin", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView5["EnchantLvEnd", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView5["OptionID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView5["Rate", i].Value.ToString());
                                sw.Write(" )\r\n");
                            }
                        }


                        sw.Close();
                      
                        Process Dos = new Process();
                        Dos.StartInfo.FileName = "tortoiseProc";
                        Dos.StartInfo.Arguments = "/Command:commit /path:\"..\\..\\..\\source\\" + strCountryCode + "\\Trunk\\KncWX2Server\\GameServer\\SocketItemTable.lua\" /notempfile /closeonend:1";
                        Dos.Start();
                        
                    }
                    break;

                case 5:
                    {
                        StreamWriter sw;
                        //국가별 define정의할 것
#if __COUNTRY_KR__
                        string strFileName = "..\\..\\..\\resource\\KR\\Trunk\\dat\\Script\\Major\\SetItem.lua";
                        strCountryCode = "KR";
                        sw = new StreamWriter(strFileName, false, Encoding.Default);
#elif __COUNTRY_TW__
                        string strFileName = "..\\..\\..\\resource\\TW\\Trunk\\dat\\Script\\Major\\SetItem.lua";
                        strCountryCode = "TW";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_HK__
                        string strFileName = "..\\..\\..\\resource\\HK\\Trunk\\dat\\Script\\Major\\SetItem.lua";
                        strCountryCode = "HK";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_JP__
                        string strFileName = "..\\..\\..\\resource\\JP\\Trunk\\dat\\Script\\Major\\SetItem.lua";
                        strCountryCode = "JP";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#endif





                        for (int i = 0; i < dataGridView6.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView6["SetID", i].Value.ToString()) > -1)
                            {
                                sw.Write("\r\n");
                                sw.Write("g_pCX2SetItemManager:AddSetItemData_LUA\r\n");
                                sw.Write("{\r\n");


                                if (dataGridView6["SetID", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_SetID = ");
                                    sw.Write(dataGridView6["SetID", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                sw.Write("       ");
                                sw.Write("m_SetName = \"");
                                sw.Write(dataGridView6["SetName", i].Value.ToString());
                                sw.Write("\",\r\n");
                                if (dataGridView6["NeedPartsNum", i].Value.ToString() != Convert.ToString(0))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_NeedPartsNum = ");
                                    sw.Write(dataGridView6["NeedPartsNum", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                for (int j = 1; j <= 9; j++)
                                {
                                    string strOption1 = "m_Option" + j;
                                    string strOption2 = "Option" + j;

                                    if (dataGridView6[strOption2, i].Value.ToString() != Convert.ToString(0))
                                    {
                                        sw.Write("       ");
                                        sw.Write(strOption1);
                                        sw.Write(" = ");
                                        sw.Write(dataGridView6[strOption2, i].Value.ToString());
                                        sw.Write(",\r\n");
                                    }
                                }
                                sw.Write("}\r\n");
                            }
                        }

                        sw.Close();
                                                
                        Process Dos = new Process();
                        Dos.StartInfo.FileName = "tortoiseProc";
                        Dos.StartInfo.Arguments = "/Command:commit /path:\"..\\..\\..\\resource\\" + strCountryCode +"\\Trunk\\dat\\Script\\Major\\SetItem.lua\" /notempfile /closeonend:1";
                        Dos.Start();
                    }
                    break;

                case 6:
                    {
                        StreamWriter sw;
                        //국가별 define정의할 것
#if __COUNTRY_KR__
                        string strFileName = "..\\..\\..\\resource\\KR\\Trunk\\dat\\Script\\Major\\RandomItem.lua";
                        strCountryCode = "KR";
                        sw = new StreamWriter(strFileName, false, Encoding.Default);
#elif __COUNTRY_TW__
                        string strFileName = "..\\..\\..\\resource\\TW\\Trunk\\dat\\Script\\Major\\RandomItem.lua";
                        strCountryCode = "TW";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_HK__
                        string strFileName = "..\\..\\..\\resource\\HK\\Trunk\\dat\\Script\\Major\\RandomItem.lua";
                        strCountryCode = "HK";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_JP__
                        string strFileName = "..\\..\\..\\resource\\JP\\Trunk\\dat\\Script\\Major\\RandomItem.lua";
                        strCountryCode = "JP";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#endif


                        for (int i = 0; i < dataGridView7.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView7["BoxID", i].Value.ToString()) > -1)
                            {
                                sw.Write("g_pItemManager:AddRandomItemTemplet( ");

                                sw.Write(dataGridView7["BoxID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView7["Key ID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView7["Key Count", i].Value.ToString());
                                sw.Write(" )\r\n");
                            }
                        }
                        sw.Close();
                        
                        Process Dos = new Process();
                        Dos.StartInfo.FileName = "tortoiseProc";
                        Dos.StartInfo.Arguments = "/Command:commit /path:\"..\\..\\..\\resource\\" + strCountryCode +"\\Trunk\\dat\\Script\\Major\\RandomItem.lua\" /notempfile /closeonend:1";
                        Dos.Start();
                        
                    }
                    break;
                case 7:
                    {
                        StreamWriter sw;
                        //국가별 define정의할 것
#if __COUNTRY_KR__
                        string strFileName = "..\\..\\..\\source\\KR\\Trunk\\KncWX2Server\\GameServer\\RandomItemTable.lua";
                        strCountryCode = "KR";
                        sw = new StreamWriter(strFileName, false, Encoding.Default);
#elif __COUNTRY_TW__
                        string strFileName = "..\\..\\..\\source\\TW\\Trunk\\KncWX2Server\\GameServer\\RandomItemTable.lua";
                        strCountryCode = "TW";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_HK__
                        string strFileName = "..\\..\\..\\source\\HK\\Trunk\\KncWX2Server\\GameServer\\RandomItemTable.lua";
                        strCountryCode = "HK";      
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_JP__
                        string strFileName = "..\\..\\..\\source\\JP\\Trunk\\KncWX2Server\\GameServer\\RandomItemTable.lua";
                        strCountryCode = "JP";      
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#endif


                        for (int i = 0; i < dataGridView7.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView7["BoxID", i].Value.ToString()) > -1)
                            {
                                sw.Write("g_pRandomItemManager:AddRandomItemTemplet\r\n");
                                sw.Write("{\r\n");

                                sw.Write("       ");
                                sw.Write("m_ItemID = ");
                                sw.Write(dataGridView7["BoxID", i].Value.ToString());
                                sw.Write(",\r\n");
                                sw.Write("       ");
                                sw.Write("m_bGiveAll = ");
                                sw.Write(dataGridView7["Give All", i].Value.ToString());
                                sw.Write(",\r\n");
                                sw.Write("       ");
                                sw.Write("m_bUnitSelect = ");
                                sw.Write(dataGridView7["Unit Select", i].Value.ToString());
                                sw.Write(",\r\n");
                                sw.Write("       ");
                                sw.Write("m_bGiveCharacter = ");
                                sw.Write(dataGridView7["Give Character", i].Value.ToString());
                                sw.Write(",\r\n");


                                if (Convert.ToInt32(dataGridView7["Key ID", i].Value.ToString()) > -1)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_KeyItemID = ");
                                    sw.Write(dataGridView7["Key ID", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (Convert.ToInt32(dataGridView7["Key Count", i].Value.ToString()) > -1)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_RequiredKeyCount = ");
                                    sw.Write(dataGridView7["Key Count", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (Convert.ToInt32(dataGridView7["RCount", i].Value.ToString()) > 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_iRessurectionCount = ");
                                    sw.Write(dataGridView7["RCount", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (Convert.ToInt32(dataGridView7["Restore Spirit", i].Value.ToString()) > 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_iRestoreSpirit = ");
                                    sw.Write(dataGridView7["Restore Spirit", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                sw.Write("       \r\n");
                                if (dataGridView7["Unit Select", i].Value.Equals(false))
                                {
                                    if (Convert.ToInt32(dataGridView7["Unit Class_01", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_01_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_01", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }
                                }
                                else
                                {
                                    if (Convert.ToInt32(dataGridView7["Unit Class_01", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_01_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_01", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }


                                    if (Convert.ToInt32(dataGridView7["Unit Class_02", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_02_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_02", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_03", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_03_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_03", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_04", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_04_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_04", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_05", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_05_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_05", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_06", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_06_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_06", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_07", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_07_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_07", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_08", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_08_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_08", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_09", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_09_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_09", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_10", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_10_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_10", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_11", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_11_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_11", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_12", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_12_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_12", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_13", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_13_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_13", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_14", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_14_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_14", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                    if (Convert.ToInt32(dataGridView7["Unit Class_15", i].Value.ToString()) > 0)
                                    {
                                        sw.Write("       \r\n");
                                        sw.Write("       {\r\n");

                                        sw.Write("              ");
                                        sw.Write("m_cUnitClass = ");
                                        sw.Write(dataGridView7["Unit Class_15_C", i].Value.ToString());
                                        sw.Write(",\r\n");
                                        sw.Write("              ");
                                        sw.Write("m_iItemGroupID = ");
                                        sw.Write(dataGridView7["Group ID_15", i].Value.ToString());
                                        sw.Write(",\r\n");

                                        sw.Write("       },\r\n");

                                    }

                                }

                                sw.Write("}\r\n");
                            }
                            sw.Write("\r\n");
                        }

                        for (int i = 0; i < dataGridView8.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView8["Group ID", i].Value.ToString()) > -1)
                            {
                                sw.Write("g_pRandomItemManager:AddRandomItemGroup( ");

                                sw.Write(dataGridView8["Group ID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView8["Item ID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView8["Rate", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView8["Period", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView8["Quantity", i].Value.ToString());
                                sw.Write(" )\r\n");
                            }
                        }

                        sw.Close();
                        
                        Process Dos = new Process();
                        Dos.StartInfo.FileName = "tortoiseProc";
                        Dos.StartInfo.Arguments = "/Command:commit /path:\"..\\..\\..\\source\\" + strCountryCode + "\\Trunk\\KncWX2Server\\GameServer\\RandomItemTable.lua\" /notempfile /closeonend:1";
                        Dos.Start();
                        
                    }
                    break;
                case 8:
                    {
                        StreamWriter sw;
                        //국가별 define정의할 것
#if __COUNTRY_KR__
                        string strFileName = "..\\..\\..\\resource\\KR\\Trunk\\dat\\Script\\Major\\ItemExchangeTable.lua";
                        strCountryCode = "KR";
                        sw = new StreamWriter(strFileName, false, Encoding.Default);
#elif __COUNTRY_TW__
                        string strFileName = "..\\..\\..\\resource\\TW\\Trunk\\dat\\Script\\Major\\ItemExchangeTable.lua";
                        strCountryCode = "TW";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_HK__
                        string strFileName = "..\\..\\..\\resource\\HK\\Trunk\\dat\\Script\\Major\\ItemExchangeTable.lua";
                        strCountryCode = "HK";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_JP__
                        string strFileName = "..\\..\\..\\resource\\JP\\Trunk\\dat\\Script\\Major\\ItemExchangeTable.lua";
                        strCountryCode = "JP";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#endif



                        sw.Write("\r\n\r\n");
                        for (int i = 0; i < dataGridView9.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView9["SourceItemID", i].Value.ToString()) > -1)
                            {
                                sw.Write("g_pItemManager:AddItemExchangeData( ");

                                sw.Write(dataGridView9["House_ID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView9["ExchangeType", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView9["SourceItemID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView9["ResultItemID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView9["Quantity", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView9["Rate", i].Value.ToString());

                                sw.Write(" )\r\n");
                            }
                        }

                        sw.Close();
                        
                        Process Dos = new Process();
                        Dos.StartInfo.FileName = "tortoiseProc";
                        Dos.StartInfo.Arguments = "/Command:commit /path:\"..\\..\\..\\resource\\" + strCountryCode +"\\Trunk\\dat\\Script\\Major\\ItemExchangeTable.lua\" /notempfile /closeonend:1";
                        Dos.Start();
                    }
                    break;
                case 9:
                    {
                        StreamWriter sw;
                        //국가별 define정의할 것
#if __COUNTRY_KR__
                        string strFileName = "..\\..\\..\\resource\\KR\\Trunk\\dat\\Script\\Major\\ManufactureItem.lua";
                        strCountryCode = "KR";
                        sw = new StreamWriter(strFileName, false, Encoding.Default);
#elif __COUNTRY_TW__
                        string strFileName = "..\\..\\..\\resource\\TW\\Trunk\\dat\\Script\\Major\\ManufactureItem.lua";
                        strCountryCode = "TW";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
      
#elif __COUNTRY_HK__
                        string strFileName = "..\\..\\..\\resource\\HK\\Trunk\\dat\\Script\\Major\\ManufactureItem.lua";
                        strCountryCode = "HK";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
      
#elif __COUNTRY_JP__
                        string strFileName = "..\\..\\..\\resource\\JP\\Trunk\\dat\\Script\\Major\\ManufactureItem.lua";
                        strCountryCode = "JP";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
      
#endif


                        for (int i = 0; i < dataGridView10.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView10["Manufacture ID", i].Value.ToString()) > -1)
                            {
                                if (dataGridView10["IsMaterialBegin", i].Value.ToString() == "T")
                                {
                                    sw.Write("\r\n");

                                    sw.Write("g_pManufactureItemManager:AddManufactureTemplet\r\n");
                                    sw.Write("{\r\n");

                                    sw.Write("       ");
                                    sw.Write("m_ManufactureID = ");
                                    sw.Write(dataGridView10["Manufacture ID", i].Value.ToString());
                                    sw.Write(",\r\n");
                                    sw.Write("       ");
                                    sw.Write("m_Cost = ");
                                    sw.Write(dataGridView10["Cost", i].Value.ToString());
                                    sw.Write(",\r\n");
                                    sw.Write("       ");
                                    sw.Write("m_ResultGroupID = ");
                                    sw.Write(dataGridView10["Result Group ID", i].Value.ToString());
                                    sw.Write(",\r\n");

                                    if (dataGridView10["m_ManufactureType", i].Value.ToString() != "NULL")
                                    {
                                        sw.Write("       ");
                                        sw.Write("m_ManufactureType = ");
                                        sw.Write(dataGridView10["m_ManufactureType", i].Value.ToString());
                                        sw.Write(",\r\n");
                                    }
                                    sw.Write("\r\n");
                                    sw.Write("       ");
                                    sw.Write("m_MaterialTable =\r\n");
                                    sw.Write("       {\r\n");
                                }

                                if (Convert.ToInt32(dataGridView10["Manufacture ID", i].Value.ToString()) > -1)
                                {
                                    sw.Write("              \r\n");
                                    sw.Write("              {\r\n");

                                    sw.Write("                     ");
                                    sw.Write("m_MaterialID = ");
                                    sw.Write(dataGridView10["Material ID", i].Value.ToString());
                                    sw.Write(",\r\n");
                                    sw.Write("                     ");
                                    sw.Write("m_MaterialCount = ");
                                    sw.Write(dataGridView10["Material Count", i].Value.ToString());
                                    sw.Write(",\r\n");
                                    sw.Write("              },\r\n");
                                }

                                if (dataGridView10["IsMaterialBegin", i].Value.ToString() == "F")
                                {
                                    sw.Write("       },\r\n");
                                    sw.Write("}\r\n");
                                }

                            }
                        }

                        sw.Write("\r\n\r\n\r\n");

                        for (int i = 0; i < dataGridView12.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView12["Manufacture ID", i].Value.ToString()) > -1)
                            {
                                sw.Write("g_pManufactureItemManager:AddManufactureVillageData( ");

                                sw.Write(dataGridView12["Manufacture ID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView12["Village ID", i].Value.ToString());

                                sw.Write(" )\r\n");
                            }
                        }

                        sw.Write("\r\n\r\n\r\n");

                        for (int i = 0; i < dataGridView11.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView11["Group ID", i].Value.ToString()) > -1)
                            {
                                sw.Write("g_pManufactureItemManager:AddManufactureResultGroup( ");

                                sw.Write(dataGridView11["Group ID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView11["Item ID", i].Value.ToString());

                                sw.Write(" )\r\n");
                            }
                        }

                        sw.Close();
                        
                        Process Dos = new Process();
                        Dos.StartInfo.FileName = "tortoiseProc";
                        Dos.StartInfo.Arguments = "/Command:commit /path:\"..\\..\\..\\resource\\" + strCountryCode +"\\Trunk\\dat\\Script\\Major\\ManufactureItem.lua\" /notempfile /closeonend:1";
                        Dos.Start();
                        
                    }
                    break;
                case 10:
                    {
                        StreamWriter sw;
                        //국가별 define정의할 것
#if __COUNTRY_KR__
                        string strFileName = "..\\..\\..\\source\\KR\\Trunk\\KncWX2Server\\GameServer\\ManufactureResultTable.lua";
                        strCountryCode = "KR";
                        sw = new StreamWriter(strFileName, false, Encoding.Default);
#elif __COUNTRY_TW__
                        string strFileName = "..\\..\\..\\source\\TW\\Trunk\\KncWX2Server\\GameServer\\ManufactureResultTable.lua";
                        strCountryCode = "TW";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_HK__
                        string strFileName = "..\\..\\..\\source\\HK\\Trunk\\KncWX2Server\\GameServer\\ManufactureResultTable.lua";
                        strCountryCode = "HK";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_JP__
                        string strFileName = "..\\..\\..\\source\\JP\\Trunk\\KncWX2Server\\GameServer\\ManufactureResultTable.lua";
                        strCountryCode = "JP";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#endif


                        for (int i = 0; i < dataGridView10.RowCount; i++)
                        {
                            if (dataGridView10["IsMaterialBegin", i].Value.ToString() == "T")
                            {
                                sw.Write("\r\n");

                                sw.Write("g_pManufactureItemManager:AddManufactureResultTemplet\r\n");
                                sw.Write("{\r\n");

                                sw.Write("       ");
                                sw.Write("m_ManufactureID = ");
                                sw.Write(dataGridView10["Manufacture ID", i].Value.ToString());
                                sw.Write(",\r\n\r\n");
                                sw.Write("       ");
                                sw.Write("m_ResultGroupID = ");
                                sw.Write(dataGridView10["Result Group ID", i].Value.ToString());
                                sw.Write(",\r\n");
                                sw.Write("       ");
                                sw.Write("m_Rate = ");
                                sw.Write(dataGridView10["Result Item Probability", i].Value.ToString());
                                sw.Write(",\r\n");
                            }

                            if (dataGridView10["IsMaterialBegin", i].Value.ToString() == "F")
                            {
                                sw.Write("}\r\n");
                            }
                        }

                        for (int i = 0; i < dataGridView11.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView11["Group ID", i].Value.ToString()) > -1)
                            {
                                sw.Write("g_pManufactureItemManager:AddManufactureResultGroupWithRate( ");

                                sw.Write(dataGridView11["Group ID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView11["Item ID", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView11["Rate", i].Value.ToString());

                                sw.Write(" )\r\n");
                            }
                        }

                        sw.Close();
                        
                        Process Dos = new Process();
                        Dos.StartInfo.FileName = "tortoiseProc";
                        Dos.StartInfo.Arguments = "/Command:commit /path:\"..\\..\\..\\source\\" + strCountryCode + "\\Trunk\\KncWX2Server\\GameServer\\ManufactureResultTable.lua\" /notempfile /closeonend:1";
                        Dos.Start();
                    }
                    break;
                case 12:
                    {
                        StreamWriter sw;
                        //국가별 define정의할 것
#if __COUNTRY_KR__
                        string strFileName = "..\\..\\..\\resource\\KR\\Trunk\\dat\\Script\\Major\\AttribEnchantItem.lua";
                        strCountryCode = "KR";
                        sw = new StreamWriter(strFileName, false, Encoding.Default);
#elif __COUNTRY_TW__
                        string strFileName = "..\\..\\..\\resource\\TW\\Trunk\\dat\\Script\\Major\\AttribEnchantItem.lua";
                        strCountryCode = "TW";                 
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_HK__
                        string strFileName = "..\\..\\..\\resource\\HK\\Trunk\\dat\\Script\\Major\\AttribEnchantItem.lua";
                        strCountryCode = "HK";                 
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_JP__
                        string strFileName = "..\\..\\..\\resource\\JP\\Trunk\\dat\\Script\\Major\\AttribEnchantItem.lua";
                        strCountryCode = "JP";
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#endif


                        for (int i = 0; i < dataGridView13.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView13["ExtraDamageType", i].Value.ToString()) > -1)
                            {
                                sw.Write("\r\n");

                                sw.Write("g_pCX2EnchantItem:AddEnchantData_LUA\r\n");
                                sw.Write("{\r\n");

                                sw.Write("       ");
                                sw.Write("m_ExtraDamageType = ");
                                sw.Write(dataGridView13["ExtraDamageType_C", i].Value.ToString());
                                sw.Write(",              --");
                                sw.Write(dataGridView13["ExtraDamageType_", i].Value.ToString());
                                sw.Write("\r\n");

                                if (!dataGridView13["IsForNPC", i].Value.Equals(false))
                                {
                                    sw.Write("       ");
                                    sw.Write("bIsForNPC = ");
                                    sw.Write(dataGridView13["IsForNPC", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["Rate", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fRate = ");
                                    sw.Write(dataGridView13["Rate", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (Convert.ToInt32(dataGridView13["Time", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_Time = ");
                                    sw.Write(dataGridView13["Time", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["FirstDamagePercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_FirstDamagePercent = ");
                                    sw.Write(dataGridView13["FirstDamagePercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["SecondDamagePercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_SecondDamagePercent = ");
                                    sw.Write(dataGridView13["SecondDamagePercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["ThirdDamagePercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_ThirdDamagePercent = ");
                                    sw.Write(dataGridView13["ThirdDamagePercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["FirstSlowPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_FirstSlowPercent = ");
                                    sw.Write(dataGridView13["FirstSlowPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["SecondSlowPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_SecondSlowPercent = ");
                                    sw.Write(dataGridView13["SecondSlowPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["ThirdSlowPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_ThirdSlowPercent = ");
                                    sw.Write(dataGridView13["ThirdSlowPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["FirstDefenceDebuffPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_FirstDefenceDebuffPercent = ");
                                    sw.Write(dataGridView13["FirstDefenceDebuffPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["SecondDefenceDebuffPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_SecondDefenceDebuffPercent = ");
                                    sw.Write(dataGridView13["SecondDefenceDebuffPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["ThirdDefenceDebuffPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_ThirdDefenceDebuffPercent = ");
                                    sw.Write(dataGridView13["ThirdDefenceDebuffPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["StunTime", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fTimeStun = ");
                                    sw.Write(dataGridView13["StunTime", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["HPDrainPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_HPDrainPercent = ");
                                    sw.Write(dataGridView13["HPDrainPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView13["MPDrain", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_MPDrain = ");
                                    sw.Write(dataGridView13["MPDrain", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                sw.Write("}\r\n");
                            }
                        }

                        sw.Close();
                        
                        Process Dos = new Process();
                        Dos.StartInfo.FileName = "tortoiseProc";
                        Dos.StartInfo.Arguments = "/Command:commit /path:\"..\\..\\..\\resource\\" + strCountryCode +"\\Trunk\\dat\\Script\\Major\\AttribEnchantItem.lua\" /notempfile /closeonend:1";
                        Dos.Start();
                    }
                    break;
                case 13:
                    {
                        StreamWriter sw;
                        //국가별 define정의할 것
#if __COUNTRY_KR__
                        string strFileName = "..\\..\\..\\resource\\KR\\Trunk\\dat\\Script\\Major\\AttribEnchantRequire.lua";
                        strCountryCode = "KR";
                        sw = new StreamWriter(strFileName, false, Encoding.Default);
#elif __COUNTRY_TW__
                        string strFileName = "..\\..\\..\\resource\\TW\\Trunk\\dat\\Script\\Major\\AttribEnchantRequire.lua";
                        strCountryCode = "TW";                        
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_HK__
                        string strFileName = "..\\..\\..\\resource\\HK\\Trunk\\dat\\Script\\Major\\AttribEnchantRequire.lua";
                        strCountryCode = "HK";                        
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_JP__
                        string strFileName = "..\\..\\..\\resource\\JP\\Trunk\\dat\\Script\\Major\\AttribEnchantRequire.lua";
                        strCountryCode = "JP";                        
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#endif



                        sw.Write("\r\n");
                        for (int i = 0; i < dataGridView14.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView14["Enchant Type", i].Value.ToString()) > -1)
                            {
                                sw.Write("g_pCX2EnchantItem:AddEnchantRequire_LUA( ");

                                sw.Write(dataGridView14["Enchant Type_", i].Value.ToString());
                                sw.Write(", ");
                                sw.Write(dataGridView14["Char Lv", i].Value.ToString());
                                sw.Write(", { LOW = ");
                                sw.Write(dataGridView14["LOW", i].Value.ToString());
                                sw.Write(", NORMAL = ");
                                sw.Write(dataGridView14["NORMAL", i].Value.ToString());
                                sw.Write(", RARE = ");
                                sw.Write(dataGridView14["RARE", i].Value.ToString());
                                sw.Write(", ELITE = ");
                                sw.Write(dataGridView14["ELITE", i].Value.ToString());
                                sw.Write(", UNIQUE = ");
                                sw.Write(dataGridView14["UNIQUE", i].Value.ToString());
                                sw.Write(" } )\r\n");

                            }
                        }

                        sw.Close();
                        
                        Process Dos = new Process();
                        Dos.StartInfo.FileName = "tortoiseProc";
                        Dos.StartInfo.Arguments = "/Command:commit /path:\"..\\..\\..\\resource\\" + strCountryCode +"\\Trunk\\dat\\Script\\Major\\AttribEnchantRequire.lua\" /notempfile /closeonend:1";
                        Dos.Start();
                        
                    }
                    break;
                case 14:
                    {
                        StreamWriter sw;
                        //국가별 define정의할 것
#if __COUNTRY_KR__
                        string strFileName = "..\\..\\..\\resource\\KR\\Trunk\\dat\\Script\\Major\\NpcExtraAbility.lua";
                        strCountryCode = "KR";
                        sw = new StreamWriter(strFileName, false, Encoding.Default);
#elif __COUNTRY_TW__
                        string strFileName = "..\\..\\..\\resource\\TW\\Trunk\\dat\\Script\\Major\\NpcExtraAbility.lua";
                        strCountryCode = "TW";                        
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_HK__
                        string strFileName = "..\\..\\..\\resource\\HK\\Trunk\\dat\\Script\\Major\\NpcExtraAbility.lua";
                        strCountryCode = "HK";                        
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#elif __COUNTRY_JP__
                        string strFileName = "..\\..\\..\\resource\\JP\\Trunk\\dat\\Script\\Major\\NpcExtraAbility.lua";
                        strCountryCode = "JP";                        
                        sw = new StreamWriter(strFileName, false, Encoding.UTF8);
                        sw.Write("-- lua header. UTF-8 인코딩 인식을 위해 이 줄은 지우지 마세요.\r\n\r\n");
#endif


                        for (int i = 0; i < dataGridView15.RowCount; i++)
                        {
                            if (Convert.ToInt32(dataGridView15["NPC_ABILITY_ID", i].Value.ToString()) > -1)
                            {
                                sw.Write("\r\n");

                                sw.Write("g_pCX2NpcExtraAbility:AddNPCExtraAbility_LUA\r\n");
                                sw.Write("{\r\n");

                                if (dataGridView15["NPC_ABILITY_ID_", i].Value.ToString() != "NPC_ABILITY_ID[\"NAI_NONE\"]")
                                {
                                    sw.Write("       ");
                                    sw.Write("m_AbilityID = ");
                                    sw.Write(dataGridView15["NPC_ABILITY_ID_", i].Value.ToString());
                                    sw.Write(",         --");
                                    sw.Write(dataGridView15["NPC_ABILITY_ID_C", i].Value.ToString());
                                    sw.Write("\r\n");
                                }
                                if (dataGridView15["NPC_ABILITY_ID_C", i].Value.ToString() != "")
                                {
                                    sw.Write("       ");
                                    sw.Write("m_AbilityName = \"");
                                    sw.Write(dataGridView15["NPC_ABILITY_ID_C", i].Value.ToString());
                                    sw.Write("\",\r\n");
                                }

                                if (!dataGridView15["Front", i].Value.Equals(false))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_bFront = ");
                                    sw.Write(dataGridView15["Front", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView15["PhysicAttackUpPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fPhysicAttackPercentUp = ");
                                    sw.Write(dataGridView15["PhysicAttackUpPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (Convert.ToSingle(dataGridView15["MagicAttackUpPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fMagicAttackPercentUp = ");
                                    sw.Write(dataGridView15["MagicAttackUpPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (Convert.ToSingle(dataGridView15["CriticalPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fCriticalPercent = ");
                                    sw.Write(dataGridView15["CriticalPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (Convert.ToSingle(dataGridView15["AllSpeedUpPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fAllSpeedUpPercentUp = ");
                                    sw.Write(dataGridView15["AllSpeedUpPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (Convert.ToSingle(dataGridView15["PhysicDefenseUpPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fPhysicDefensePercentUp = ");
                                    sw.Write(dataGridView15["PhysicDefenseUpPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                if (Convert.ToSingle(dataGridView15["MagicDefenseUpPercent", i].Value.ToString()) != 0)
                                {
                                    sw.Write("       ");
                                    sw.Write("m_fMagicDefensePercentUp = ");
                                    sw.Write(dataGridView15["MagicDefenseUpPercent", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (!dataGridView15["AlwaysSuperArmor", i].Value.Equals(false))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_bAlwaysSuperArmor = ");
                                    sw.Write(dataGridView15["AlwaysSuperArmor", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }

                                if (!dataGridView15["Heavy", i].Value.Equals(false))
                                {
                                    sw.Write("       ");
                                    sw.Write("m_bHeavy = ");
                                    sw.Write(dataGridView15["Heavy", i].Value.ToString());
                                    sw.Write(",\r\n");
                                }
                                sw.Write("}\r\n");
                            }
                        }

                        sw.Close();
                       
                        Process Dos = new Process();
                        Dos.StartInfo.FileName = "tortoiseProc";
                        Dos.StartInfo.Arguments = "/Command:commit /path:\"..\\..\\..\\resource\\" + strCountryCode +"\\Trunk\\dat\\Script\\Major\\NpcExtraAbility.lua\" /notempfile /closeonend:1";
                        Dos.Start();
                    }
                    break;

            }

            MessageBox.Show("파일이 생성되었습니다.");
        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            //09. 07. 10 김정협 복사한 상태에서 탭이동하여 붙여넣기 할수 있기 때문에 탭이동 시 삭제
            m_CopyList.Clear();
            m_bCopy = false;
            
            //#국가별 define 정의 해줄 것
            switch (tabControl1.SelectedIndex)
            {
                case 0:
                    {
#if __COUNTRY_KR__
                        btnMultiAdd.Enabled = true;                        
#else
                        btnMultiAdd.Enabled = false;
#endif

                        btnFileGenerate.Enabled = true;
                        btnString.Enabled = true;
                        btnBorder.Enabled = true;
                    }
                    break;
                case 1:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = false;
                        btnString.Enabled = false;
                        btnBorder.Enabled = true;
                    }
                    break;
                case 2:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = true;
                        btnString.Enabled = false;
                        btnBorder.Enabled = true;
                    }
                    break;
                case 3:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = true;
                        btnString.Enabled = false;
                        btnBorder.Enabled = true;
                    }
                    break;
                case 4:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = false;
                        btnString.Enabled = false;
                        btnBorder.Enabled = true;
                    }
                    break;
                case 5:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = true;
                        btnString.Enabled = true;
                        btnBorder.Enabled = true;
                    }
                    break;
                case 6:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = true;
                        btnString.Enabled = false;
                        btnBorder.Enabled = true;
                    }
                    break;
                case 7:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = true;
                        btnString.Enabled = false;
                        btnBorder.Enabled = true;
                    }
                    break;
                case 8:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = true;
                        btnString.Enabled = false;
                        btnBorder.Enabled = false;
                    }
                    break;
                case 9:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = true;
                        btnString.Enabled = false;
                        btnBorder.Enabled = false;
                    }
                    break;
                case 10:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = true;
                        btnString.Enabled = false;
                        btnBorder.Enabled = true;
                    }
                    break;
                case 11:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = false;
                        btnString.Enabled = false;
                        btnBorder.Enabled = false;
                    }
                    break;
                case 12:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = true;
                        btnString.Enabled = false;
                        btnBorder.Enabled = true;
                    }
                    break;
                case 13:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = true;
                        btnString.Enabled = false;
                        btnBorder.Enabled = true;
                    }
                    break;
                case 14:
                    {
                        btnMultiAdd.Enabled = false;
                        btnFileGenerate.Enabled = true;
                        btnString.Enabled = false;
                        btnBorder.Enabled = true;
                    }
                    break;
            }
            m_nStartPoint = 0;
            textBox1.Text = "";

            //09. 06. 10 김정협 리플레이스 기능 추가
            panel1.Visible = false;
            textBox3.Text = "";
            textBox4.Text = "";

            //09. 07. 01 김정협 텍스트 수정창 열기
            if(AssistBox.Visible)
            {
                AssistBox.Hide();
            }
        }


        private void dataGridView1_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView1.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView1["IndexKey", dgvCurrentCell.RowIndex].Value;
            //09. 06. 02 김정협 수정 : 배경색때문에 전의 셀로우를 임시저장
            m_nLastRow = dgvCurrentCell.RowIndex;
                        
            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();

                AssistBox.Left = dataGridView1.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView1.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
                
            }
        }

        public void dataGridView1_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            //            contextMenuStrip1.Items.Clear();

            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {                
                dgvCurrentCell = dataGridView1.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }
            


            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView1.RowCount; i++)
                {
                    if (dataGridView1["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }


            //09. 06. 06 김정협
            if (dgvCurrentCell.OwningColumn.Name == "Item Type")
            {
                DataRow dr = tblItemType.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView1["Item Type_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView1["ITEMTYPE_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "Use Type")
            {
                DataRow dr = tblUseType.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView1["Use Type_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView1["USETYPE_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "Period Type")
            {
                DataRow dr = tblPeriodType.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView1["Period Type_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView1["PERIODTYPE_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "Price Type")
            {
                DataRow dr = tblPriceType.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView1["Price Type_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView1["PRICETYPE_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "Use Condition")
            {
                DataRow dr = tblUseCondition.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView1["Use Condition_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView1["USECONDITION_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "Unit Type")
            {
                DataRow dr = tblUnitType.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView1["Unit Type_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView1["UNITTYPE_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "Unit Class")
            {
                DataRow dr = tblUnitClass.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView1["Unit Class_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView1["UNITCLASS_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "Eqip Position")
            {
                DataRow dr = tblEqipPosition.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView1["Eqip Position_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView1["EQIPPOSITION_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "Item Grade")
            {
                DataRow dr = tblItemGrade.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView1["Item Grade_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView1["ITEMGRADE_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "Price")
            {   
                if(dataGridView1["Period Type", nIndexRow].Value.ToString() == "1")
                {   
                    dataGridView1["Repair ED", nIndexRow].Value = System.Math.Round(Convert.ToSingle(dataGridView1["Price", nIndexRow].Value) * 0.0007, 1);

                    if(dataGridView1["Item Grade_", nIndexRow].Value.ToString() == "NORMAL")
                    {
                        dataGridView1["EnduranceDamageMin", nIndexRow].Value = 10;
                        dataGridView1["EnduranceDamageMax", nIndexRow].Value = 10;
                    }
                    else if(dataGridView1["Item Grade_", nIndexRow].Value.ToString() == "RARE")
                    {
                        dataGridView1["EnduranceDamageMin", nIndexRow].Value = 6;
                        dataGridView1["EnduranceDamageMax", nIndexRow].Value = 8;
                    }
                    else if (dataGridView1["Item Grade_", nIndexRow].Value.ToString() == "ELETE")
                    {
                        dataGridView1["EnduranceDamageMin", nIndexRow].Value = 5;
                        dataGridView1["EnduranceDamageMax", nIndexRow].Value = 7;
                    }
                    else if (dataGridView1["Item Grade_", nIndexRow].Value.ToString() == "UNIQUE")
                    {
                        dataGridView1["EnduranceDamageMin", nIndexRow].Value = 4;
                        dataGridView1["EnduranceDamageMax", nIndexRow].Value = 6;
                    }
                }    
                else
                {
                    dataGridView1["Repair ED", nIndexRow].Value = 0;
                    dataGridView1["EnduranceDamageMin", nIndexRow].Value = 0;
                    dataGridView1["EnduranceDamageMax", nIndexRow].Value = 0;
                }
                
            }





            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView1[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView1["Regdate", nIndexRow].Value.ToString();

                dataGridView1[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView1["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView1["Regdate", nIndexRow].Style.ForeColor = Color.Red;

                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int i = 0; i < dataGridView1.RowCount; i++)
                    {
                        if (dataGridView1[1, i].Value.ToString() == dataGridView1[dgvCurrentCell.ColumnIndex, nIndexRow].Value.ToString())
                        {
                            if (i == nIndexRow)
                            {
                                continue;
                            }

                            MessageBox.Show("동일한 ID값이 존재합니다.");

                            dataGridView1[dgvCurrentCell.ColumnIndex, nIndexRow].Value = objTemp;
                            dataGridView1[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Black;
                            dataGridView1["Regdate", nIndexRow].Value = strOldTime;
                            dataGridView1["Regdate", nIndexRow].Style.ForeColor = Color.Black;
                            return;

                        }
                    }
                }

                if (dgvCurrentCell.ColumnIndex == 2 || dgvCurrentCell.ColumnIndex == 3 ||
                    dgvCurrentCell.ColumnIndex == 4)
                {
                    //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여
                    if (dgvCurrentCell.ColumnIndex == 2)
                    {
                        dataGridView1.Rows[dgvCurrentCell.RowIndex].HeaderCell.Value = dataGridView1["ID", dgvCurrentCell.RowIndex].Value.ToString() + "     " + dataGridView1["Name", dgvCurrentCell.RowIndex].Value.ToString();
                    }
                    //09. 06. 23 김정협 국가별 디파일 정의 할 것
#if __COUNTRY_KR__
                    int nIndex_Name = -1;
                    string strCountry = "KR";
                    if (Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView1["IndexKey", nIndexRow].Value.ToString()), "KR", objTemp.ToString(), "Item") != null)
                    {
                        nIndex_Name = (int)Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView1["IndexKey", nIndexRow].Value.ToString()), "KR", objTemp.ToString(), "Item");
                    }
#elif __COUNTRY_TW__
                    int nIndex_Name = -1;
                    string strCountry = "TW";
                    if (Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView1["IndexKey", nIndexRow].Value.ToString()), "TW", objTemp.ToString(), "Item") != null)
                    {
                        nIndex_Name = (int)Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView1["IndexKey", nIndexRow].Value.ToString()),"TW", objTemp.ToString(), "Item");//Convert.ToInt32(dataGridView1["Index_Name", nIndexRow].Value.ToString());
                    }
#elif __COUNTRY_HK__
                    int nIndex_Name = -1;
                    string strCountry = "HK";
                    if (Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView1["IndexKey", nIndexRow].Value.ToString()), "HK", objTemp.ToString(), "Item") != null)
                    {
                        nIndex_Name = (int)Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView1["IndexKey", nIndexRow].Value.ToString()),"HK", objTemp.ToString(), "Item");//Convert.ToInt32(dataGridView1["Index_Name", nIndexRow].Value.ToString());
                    }
#elif __COUNTRY_JP__
                    int nIndex_Name = -1;
                    string strCountry = "JP";
                    if (Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView1["IndexKey", nIndexRow].Value.ToString()), "JP", objTemp.ToString(), "Item") != null)
                    {
                        nIndex_Name = (int)Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView1["IndexKey", nIndexRow].Value.ToString()),"JP", objTemp.ToString(), "Item");//Convert.ToInt32(dataGridView1["Index_Name", nIndexRow].Value.ToString());
                    }
#endif

                    //DataRow Row = tblScriptString.Rows[nIndex_Name];
                    //09. 06. 19 김정협 Trans 수정부분 추가 
                    DataRow Row = null;// tblTrans.Rows[nIndex_Name];
                    if (nIndex_Name != -1)
                    {
                        for (int i = 0; i < tblTrans.Rows.Count; i++)
                        {
                            if (tblTrans.Rows[i]["TransIDX"].ToString() == nIndex_Name.ToString())
                            {
                                Row = tblTrans.Rows[i];
                                break;
                            }
                        }
                    }
                    else
                    {
                        for (int i = 0; i < tblTrans.Rows.Count; i++)
                        {
                            if (tblTrans.Rows[i]["Index"].ToString() == dataGridView1["IndexKey", nIndexRow].Value.ToString() &&
                                tblTrans.Rows[i]["TableName"].ToString() == "Item" &&
                                tblTrans.Rows[i]["CountryCode"].ToString() == strCountry &&
                                tblTrans.Rows[i]["Column"].ToString() == dgvCurrentCell.OwningColumn.Name)
                            {
                                Row = tblTrans.Rows[i];
                                break;
                            }
                        }

                    }

                    Row["String"] = dgvCurrentCell.Value.ToString();
                    Row["Last Update Date"] = DateTime.Now;
                    //09. 06. 19 김정협 Trans 연결 히스토리 추가
                    IPHostEntry host = Dns.GetHostEntry(Dns.GetHostName());
                    string strMyIP = host.AddressList[0].ToString();
                    tblTrans_History.Rows.Add();
                    DataRow Row_History = tblTrans_History.Rows[tblTrans_History.Rows.Count - 1];
                    Row_History["TransIDX"] = Row["TransIDX"];
                    Row_History["String"] = Row["String"];
                    Row_History["UserID"] = m_strID;
                    Row_History["UserIP"] = strMyIP;
                    Row_History["Last Update Date"] = Row["Last Update Date"];
                    
                }
                

                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 0;

                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView1["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 0;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;
                //09. 07. 02 김정협 Undo그룹짓기
                if(!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }
                
                

                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;                   
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 0;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView1["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }

                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    //09. 06. 30 속도개선 및 버그 수정해야함.
                    for (int c = 0; c < dataGridView1.ColumnCount; c++)
                    {
                        if (dataGridView1[c, m_nLastRow].HasStyle)
                            dataGridView1[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(0);
                    ColorRefresh(true);
                }
            }

        }



        private void dataGridView2_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView2.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView2["IndexKey", dgvCurrentCell.RowIndex].Value;

            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView2.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView2.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }

        public void dataGridView2_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;

            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView2.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView2.RowCount; i++)
                {
                    if (dataGridView2["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }

            //09. 06. 06 김정협
            if (dgvCurrentCell.OwningColumn.Name == "TYPE")
            {
                DataRow dr = tblSpecialAbilityType.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView2["TYPE_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView2["TYPE_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView2[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView2["Regdate", nIndexRow].Value.ToString();

                dataGridView2[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView2["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView2["Regdate", nIndexRow].Style.ForeColor = Color.Red;

                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int i = 0; i < dataGridView2.RowCount; i++)
                    {
                        if (dataGridView2[1, i].Value.ToString() == dataGridView2[dgvCurrentCell.ColumnIndex, nIndexRow].Value.ToString())
                        {
                            if (i == nIndexRow)
                            {
                                continue;
                            }

                            MessageBox.Show("동일한 ID값이 존재합니다.");

                            dataGridView2[dgvCurrentCell.ColumnIndex, nIndexRow].Value = objTemp;
                            dataGridView2[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Black;
                            dataGridView2["Regdate", nIndexRow].Value = strOldTime;
                            dataGridView2["Regdate", nIndexRow].Style.ForeColor = Color.Black;
                            return;

                        }
                    }
                }


                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 1;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView2["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }


                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 1;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }

                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 1;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView2["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView2.ColumnCount; c++)
                    {
                        if (dataGridView2[c, m_nLastRow].HasStyle)
                            dataGridView2[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(1);
                    ColorRefresh(true);
                }
            }

        }

        private void dataGridView3_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView3.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }
            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView3["IndexKey", dgvCurrentCell.RowIndex].Value;
            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView3.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView3.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }


        public void dataGridView3_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView3.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }
            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView3.RowCount; i++)
                {
                    if (dataGridView3["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }

            //09. 06. 06 김정협
            if (dgvCurrentCell.OwningColumn.Name == "Socket Type")
            {
                DataRow dr = tblSocketDataType.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView3["Socket Type_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView3["Socket Type_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "ExtraDamageType")
            {
                DataRow dr = tblExtraDamageType.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView3["ExtraDamageType_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView3["ExtraDamageType_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "ExtraDamageResistType")
            {
                DataRow dr = tblExtraDamageType.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView3["ExtraDamageResistType_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView3["ExtraDamageResistType_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "ImmuneExtraDamageType")
            {
                DataRow dr = tblExtraDamageType.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView3["ImmuneExtraDamageType_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView3["ImmuneExtraDamageType_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }



            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView3[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView3["Regdate", nIndexRow].Value.ToString();

                dataGridView3[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView3["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView3["Regdate", nIndexRow].Style.ForeColor = Color.Red;

                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int i = 0; i < dataGridView3.RowCount; i++)
                    {
                        if (dataGridView3[1, i].Value.ToString() == dataGridView3[dgvCurrentCell.ColumnIndex, nIndexRow].Value.ToString())
                        {
                            if (i == nIndexRow)
                            {
                                continue;
                            }

                            MessageBox.Show("동일한 ID값이 존재합니다.");

                            dataGridView3[dgvCurrentCell.ColumnIndex, nIndexRow].Value = objTemp;
                            dataGridView3[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Black;
                            dataGridView3["Regdate", nIndexRow].Value = strOldTime;
                            dataGridView3["Regdate", nIndexRow].Style.ForeColor = Color.Black;
                            return;

                        }
                    }
                }


                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 2;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView3["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 2;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }

                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 2;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView3["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView3.ColumnCount; c++)
                    {
                        if (dataGridView3[c, m_nLastRow].HasStyle)
                            dataGridView3[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(2);
                    ColorRefresh(true);
                }
            }

        }

        private void dataGridView4_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView4.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView4["IndexKey", dgvCurrentCell.RowIndex].Value;
            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView4.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView4.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }

        public void dataGridView4_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView4.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView4.RowCount; i++)
                {
                    if (dataGridView4["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }

            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "SocketDataType")
            {
                DataRow dr = tblSocketDataType.Rows.Find(dataGridView4["SocketDataType", nIndexRow].Value.ToString());
                if (dr != null)
                {
                    dataGridView4["SocketDataType_", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    //dgvCurrentCell.Value = objTemp;
                    dataGridView4["SocketDataType", nIndexRow].Value = objTemp;
                }
            }


            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView4[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView4["Regdate", nIndexRow].Value.ToString();

                dataGridView4[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView4["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView4["Regdate", nIndexRow].Style.ForeColor = Color.Red;




                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 3;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView4["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 3;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }

                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 3;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView4["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView4.ColumnCount; c++)
                    {
                        if (dataGridView4[c, m_nLastRow].HasStyle)
                            dataGridView4[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(3);
                    ColorRefresh(true);
                }
            }

        }

        private void dataGridView5_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView5.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }
            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView5["IndexKey", dgvCurrentCell.RowIndex].Value;
            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView5.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView5.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }

        public void dataGridView5_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView5.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView5.RowCount; i++)
                {
                    if (dataGridView5["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }

            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "OptionID")
            {
                DataRow dr = tblSocketItem.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView5["Option_Des", nIndexRow].Value = dr["Description"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }


            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView5[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView5["Regdate", nIndexRow].Value.ToString();

                dataGridView5[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView5["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView5["Regdate", nIndexRow].Style.ForeColor = Color.Red;




                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 4;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView5["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 4;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }
                

                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 4;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView5["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView5.ColumnCount; c++)
                    {
                        if (dataGridView5[c, m_nLastRow].HasStyle)
                            dataGridView5[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(4);
                    ColorRefresh(true);
                }
            }

        }

        private void dataGridView6_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView6.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView6["IndexKey", dgvCurrentCell.RowIndex].Value;
            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView6.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView6.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }

        public void dataGridView6_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView6.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView6.RowCount; i++)
                {
                    if (dataGridView6["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }


            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView6[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView6["Regdate", nIndexRow].Value.ToString();

                dataGridView6[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView6["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView6["Regdate", nIndexRow].Style.ForeColor = Color.Red;


                if (dgvCurrentCell.ColumnIndex == 2)
                {
                    //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여                    
                    dataGridView6.Rows[dgvCurrentCell.RowIndex].HeaderCell.Value = dataGridView6["SetID", dgvCurrentCell.RowIndex].Value.ToString() + "     " + dataGridView6["SetName", dgvCurrentCell.RowIndex].Value.ToString();
                    
                    //09. 06. 23 김정협 국가별 디파일 정의 할 것                    
#if __COUNTRY_KR__
                    int nIndex_Name = -1;
                    string strCountry = "KR";
                    if (Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView6["IndexKey", nIndexRow].Value.ToString()), "KR", objTemp.ToString(), "SetItem") != null)
                    {
                        nIndex_Name = (int)Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView6["IndexKey", nIndexRow].Value.ToString()), "KR", objTemp.ToString(), "SetItem");
                    }
                    
#elif __COUNTRY_TW__
                    int nIndex_Name = -1;
                    string strCountry = "TW";
                    if (Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView6["IndexKey", nIndexRow].Value.ToString()), "TW", objTemp.ToString(), "SetItem") != null)
                    {
                        nIndex_Name = (int)Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView6["IndexKey", nIndexRow].Value.ToString()),"TW", objTemp.ToString(), "SetItem");//Convert.ToInt32(dataGridView1["Index_Name", nIndexRow].Value.ToString());
                    }
#elif __COUNTRY_HK__
                    int nIndex_Name = -1;
                    string strCountry = "HK";
                    if (Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView6["IndexKey", nIndexRow].Value.ToString()), "HK", objTemp.ToString(), "SetItem") != null)
                    {
                        nIndex_Name = (int)Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView6["IndexKey", nIndexRow].Value.ToString()),"HK", objTemp.ToString(), "SetItem");//Convert.ToInt32(dataGridView1["Index_Name", nIndexRow].Value.ToString());
                    }
#elif __COUNTRY_JP__
                    int nIndex_Name = -1;
                    string strCountry = "JP";
                    if (Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView6["IndexKey", nIndexRow].Value.ToString()), "JP", objTemp.ToString(), "SetItem") != null)
                    {
                        nIndex_Name = (int)Adpt_Trans.GetTransIDX(Convert.ToInt32(dataGridView6["IndexKey", nIndexRow].Value.ToString()),"JP", objTemp.ToString(), "SetItem");//Convert.ToInt32(dataGridView1["Index_Name", nIndexRow].Value.ToString());
                    }
#endif
                    //09. 06. 19 김정협 Trans 수정부분 추가
                    DataRow Row = null;

                    if (nIndex_Name != -1)
                    {
                        for (int i = 0; i < tblTrans.Rows.Count; i++)
                        {
                            if (tblTrans.Rows[i]["TransIDX"].ToString() == nIndex_Name.ToString())
                            {
                                Row = tblTrans.Rows[i];
                                break;
                            }
                        }
                    }
                    else
                    {
                        for (int i = 0; i < tblTrans.Rows.Count; i++)
                        {
                            if (tblTrans.Rows[i]["Index"].ToString() == dataGridView6["IndexKey", nIndexRow].Value.ToString() &&
                                tblTrans.Rows[i]["TableName"].ToString() == "SetItem" &&
                                tblTrans.Rows[i]["CountryCode"].ToString() == strCountry &&
                                tblTrans.Rows[i]["Column"].ToString() == dgvCurrentCell.OwningColumn.Name)
                            {
                                Row = tblTrans.Rows[i];
                                break;
                            }
                        }

                    }
                    
                    Row["String"] = dgvCurrentCell.Value.ToString();

                    //09. 06. 19 김정협 Trans 연결 히스토리 추가
                    IPHostEntry host = Dns.GetHostEntry(Dns.GetHostName());
                    string strMyIP = host.AddressList[0].ToString();
                    tblTrans_History.Rows.Add();
                    DataRow Row_History = tblTrans_History.Rows[tblTrans_History.Rows.Count - 1];
                    Row_History["TransIDX"] = Row["TransIDX"];
                    Row_History["String"] = Row["String"];
                    Row_History["UserID"] = m_strID;
                    Row_History["UserIP"] = strMyIP;
                    Row_History["Last Update Date"] = Row["Last Update Date"];


                }

                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 5;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView6["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 5;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }
                
                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 5;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView6["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView6.ColumnCount; c++)
                    {
                        if (dataGridView6[c, m_nLastRow].HasStyle)
                            dataGridView6[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(5);
                    ColorRefresh(true);
                }
            }


        }

        private void dataGridView7_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView7.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView7["IndexKey", dgvCurrentCell.RowIndex].Value;
            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView7.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView7.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }

        public void dataGridView7_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView7.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView7.RowCount; i++)
                {
                    if (dataGridView7["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }


            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "BoxID")
            {
                DataRow dr = tblItem.Rows.Find(dataGridView7["BoxID", nIndexRow].Value.ToString());
                if (dr != null)
                {
                    dataGridView7["BoxName", nIndexRow].Value = dr["Name"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    //dgvCurrentCell.Value = objTemp;
                    dataGridView7["BoxID", nIndexRow].Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "Key ID")
            {
                DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dgvCurrentCell.Value.ToString() == "0")
                {
                    dataGridView7["Key Name", nIndexRow].Value = "0";
                }
                else
                {
                    if (dr != null)
                    {
                        dataGridView7["Key Name", nIndexRow].Value = dr["Name"].ToString();
                    }
                    else
                    {
                        MessageBox.Show("존재하지 않는 값입니다.");
                        dgvCurrentCell.Value = objTemp;
                    }
                }
            }



            for (int i = 1; i <= 15; i++)
            {
                string strTemp = "Unit Class_";

                if (i < 10)
                    strTemp = strTemp + "0" + i;
                else
                    strTemp = strTemp + i;

                if (dgvCurrentCell.OwningColumn.Name == strTemp)
                {
                    DataRow dr = tblUnitClass.Rows.Find(dgvCurrentCell.Value.ToString());
                    if (dr != null)
                    {
                        strTemp = strTemp + "_";
                        dataGridView7[strTemp, nIndexRow].Value = dr["Des"].ToString();
                        strTemp = strTemp + "C";
                        dataGridView7[strTemp, nIndexRow].Value = dr["CODE"].ToString();
                    }
                    else
                    {
                        MessageBox.Show("존재하지 않는 값입니다.");
                        dgvCurrentCell.Value = objTemp;
                    }
                }
            }



            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView7[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView7["Regdate", nIndexRow].Value.ToString();

                dataGridView7[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView7["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView7["Regdate", nIndexRow].Style.ForeColor = Color.Red;

                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int i = 0; i < dataGridView7.RowCount; i++)
                    {
                        if (dataGridView7[1, i].Value.ToString() == dataGridView7[dgvCurrentCell.ColumnIndex, nIndexRow].Value.ToString())
                        {
                            if (i == nIndexRow)
                            {
                                continue;
                            }

                            MessageBox.Show("동일한 BoxID값이 존재합니다.");

                            dataGridView7[dgvCurrentCell.ColumnIndex, nIndexRow].Value = objTemp;
                            dataGridView7[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Black;
                            dataGridView7["Regdate", nIndexRow].Value = strOldTime;
                            dataGridView7["Regdate", nIndexRow].Style.ForeColor = Color.Black;
                            return;

                        }
                    }
                }


                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 6;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView7["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 6;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }
                
                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();


                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 6;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView7["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView7.ColumnCount; c++)
                    {
                        if (dataGridView7[c, m_nLastRow].HasStyle)
                            dataGridView7[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(6);
                    ColorRefresh(true);
                }
            }
        }

        private void dataGridView8_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView8.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }
            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView8["IndexKey", dgvCurrentCell.RowIndex].Value;
            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView8.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView8.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }

        public void dataGridView8_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView8.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView8.RowCount; i++)
                {
                    if (dataGridView8["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }


            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "Item ID")
            {
                DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView8["Item Name", nIndexRow].Value = dr["Name"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView8[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView8["Regdate", nIndexRow].Value.ToString();

                dataGridView8[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView8["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView8["Regdate", nIndexRow].Style.ForeColor = Color.Red;



                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 7;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView8["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 7;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }

                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 7;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView8["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView8.ColumnCount; c++)
                    {
                        if (dataGridView8[c, m_nLastRow].HasStyle)
                            dataGridView8[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(7);
                    ColorRefresh(true);
                }
            }

        }

        private void dataGridView9_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView9.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }
            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView9["IndexKey", dgvCurrentCell.RowIndex].Value;
            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView9.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView9.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }

        }

        public void dataGridView9_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView9.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView9.RowCount; i++)
                {
                    if (dataGridView9["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }

            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "ExchangeType")
            {
                DataRow dr = tblExchangeType.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView9["ExchangeType_Enum", nIndexRow].Value = dr["Enum"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "House_ID")
            {
                DataRow dr = tblHouseID.Rows.Find(dataGridView9["House_ID", nIndexRow].Value.ToString());
                if (dr != null)
                {
                    dataGridView9["House_Enum", nIndexRow].Value = dr["Enum"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            if (dgvCurrentCell.OwningColumn.Name == "SourceItemID")
            {
                DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView9["Exchange_Des1", nIndexRow].Value = dr["Name"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    //dgvCurrentCell.Value = objTemp;
                    dataGridView9["SourceItemID", nIndexRow].Value = objTemp;
                }
            }

            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "ResultItemID")
            {
                DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView9["Exchange_Des2", nIndexRow].Value = dr["Name"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }


            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView9[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView9["Regdate", nIndexRow].Value.ToString();

                dataGridView9[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView9["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView9["Regdate", nIndexRow].Style.ForeColor = Color.Red;



                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 8;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView9["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 8;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }

                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 8;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView9["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView9.ColumnCount; c++)
                    {
                        if (dataGridView9[c, m_nLastRow].HasStyle)
                            dataGridView9[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(8);
                    ColorRefresh(true);
                }
            }

        }

        private void dataGridView10_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView10.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }
            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView10["IndexKey", dgvCurrentCell.RowIndex].Value;
            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView10.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView10.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }

        public void dataGridView10_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView10.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView10.RowCount; i++)
                {
                    if (dataGridView10["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }

            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "m_ManufactureType")
            {
                DataRow dr = tblMenufactureType.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dgvCurrentCell.Value.ToString() == "0")
                {
                    dataGridView10["ManufactureType_", nIndexRow].Value = "";
                    dataGridView10["ManufactureType_C", nIndexRow].Value = "";
                }
                else
                {
                    if (dr != null)
                    {
                        dataGridView10["ManufactureType_", nIndexRow].Value = dr["Des"].ToString();
                        dataGridView10["ManufactureType_C", nIndexRow].Value = dr["CODE"].ToString();
                    }
                    else
                    {
                        MessageBox.Show("존재하지 않는 값입니다.");
                        dgvCurrentCell.Value = objTemp;
                    }
                }
            }
            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "Result Group ID")
            {
                DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dgvCurrentCell.Value.ToString() == "0")
                {
                    dataGridView10["Result Name", nIndexRow].Value = "";
                }
                else
                {
                    if (dr != null)
                    {
                        dataGridView10["Result Name", nIndexRow].Value = dr["Name"].ToString();
                    }
                    else
                    {
                        MessageBox.Show("존재하지 않는 값입니다.");
                        dgvCurrentCell.Value = objTemp;
                    }
                }
            }

            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "Material ID")
            {
                DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView10["Material Name", nIndexRow].Value = dr["Name"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }



            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView10[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView10["Regdate", nIndexRow].Value.ToString();

                dataGridView10[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView10["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView10["Regdate", nIndexRow].Style.ForeColor = Color.Red;



                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 9;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView10["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 9;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }

                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 9;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView10["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView10.ColumnCount; c++)
                    {
                        if (dataGridView10[c, m_nLastRow].HasStyle)
                            dataGridView10[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(9);
                    ColorRefresh(true);
                }
            }

        }

        private void dataGridView11_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView11.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }
            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView11["IndexKey", dgvCurrentCell.RowIndex].Value;

            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView11.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView11.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }

        public void dataGridView11_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView11.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView11.RowCount; i++)
                {
                    if (dataGridView11["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }

            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "Item ID")
            {
                DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView11["Item Name", nIndexRow].Value = dr["Name"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }

            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView11[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView11["Regdate", nIndexRow].Value.ToString();

                dataGridView11[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView11["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView11["Regdate", nIndexRow].Style.ForeColor = Color.Red;


                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 10;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView11["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }
                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 10;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }

                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 10;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView11["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView11.ColumnCount; c++)
                    {
                        if (dataGridView11[c, m_nLastRow].HasStyle)
                            dataGridView11[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(10);
                    ColorRefresh(true);
                }
            }
        }

        private void dataGridView12_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView12.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }
            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView12["IndexKey", dgvCurrentCell.RowIndex].Value;
            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView12.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView12.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }

        public void dataGridView12_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView12.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView12.RowCount; i++)
                {
                    if (dataGridView12["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }

            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "Manufacture ID")
            {
                DataRow dr = null;
                for (int i = 0; i < tblManufactureTable.Rows.Count; i++)
                {
                    if (tblManufactureTable.Rows[i]["Manufacture ID"].ToString() == dgvCurrentCell.Value.ToString())
                    {
                        dr = tblManufactureTable.Rows[i];
                        break;
                    }
                }
                //= tblManufactureTable.Rows.Find(dataGridView12["Manufacture ID", nIndexRow].Value.ToString());

                if (dr != null)
                {
                    dataGridView12["Manufacture Name", nIndexRow].Value = dr["Manufacture Name"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }
            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "Village ID")
            {
                DataRow dr = tblVillageID.Rows.Find(dgvCurrentCell.Value.ToString());
                if (dr != null)
                {
                    dataGridView12["Village Name", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView12["Village Enum", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                }
            }


            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView12[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView12["Regdate", nIndexRow].Value.ToString();

                dataGridView12[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView12["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView12["Regdate", nIndexRow].Style.ForeColor = Color.Red;


                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 11;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView12["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 11;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }

                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 11;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView12["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView12.ColumnCount; c++)
                    {
                        if (dataGridView12[c, m_nLastRow].HasStyle)
                            dataGridView12[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(11);
                    ColorRefresh(true);
                }
            }

        }

        private void dataGridView13_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView13.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }
            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView13["IndexKey", dgvCurrentCell.RowIndex].Value;
            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView13.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView13.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }

        public void dataGridView13_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView13.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView13.RowCount; i++)
                {
                    if (dataGridView13["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }

            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "ExtraDamageType")
            {
                DataRow dr = tblExtraDamageType.Rows.Find(dataGridView13["ExtraDamageType", nIndexRow].Value.ToString());
                if (dr != null)
                {
                    dataGridView13["ExtraDamageType_", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView13["ExtraDamageType_C", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    //dgvCurrentCell.Value = objTemp;
                    dataGridView13["ExtraDamageType", nIndexRow].Value = objTemp;
                }
            }

            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView13[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView13["Regdate", nIndexRow].Value.ToString();

                dataGridView13[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView13["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView13["Regdate", nIndexRow].Style.ForeColor = Color.Red;


                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 12;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView13["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 12;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }

                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 12;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView13["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView13.ColumnCount; c++)
                    {
                        if (dataGridView13[c, m_nLastRow].HasStyle)
                            dataGridView13[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(12);
                    ColorRefresh(true);
                }
            }

        }

        private void dataGridView14_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView14.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }
            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView14["IndexKey", dgvCurrentCell.RowIndex].Value;
            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView14.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView14.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }

        public void dataGridView14_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView14.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView14.RowCount; i++)
                {
                    if (dataGridView14["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }

            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "Enchant Type")
            {
                DataRow dr = tblAttribEnchantType.Rows.Find(dataGridView14["Enchant Type", nIndexRow].Value.ToString());
                if (dr != null)
                {
                    dataGridView14["Enchant Type_", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dgvCurrentCell.Value = objTemp;
                    dataGridView14["Enchant Type", nIndexRow].Value = objTemp;
                }
            }

            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView14[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView14["Regdate", nIndexRow].Value.ToString();

                dataGridView14[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView14["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView14["Regdate", nIndexRow].Style.ForeColor = Color.Red;


                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 13;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView14["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 13;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }

                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 13;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView14["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView14.ColumnCount; c++)
                    {
                        if (dataGridView14[c, m_nLastRow].HasStyle)
                            dataGridView14[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(13);
                    ColorRefresh(true);
                }
            }
        }

        private void dataGridView15_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView15.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }
            objTemp = dgvCurrentCell.Value;
            //09. 06. 02 김정협 수정 : 인덱스 저장용 임시 저장소
            objTemp2 = dataGridView15["IndexKey", dgvCurrentCell.RowIndex].Value;
            m_nLastRow = dgvCurrentCell.RowIndex;

            //09. 07. 01 김정협 텍스트 수정창 열기
            if (dgvCurrentCell.Value.ToString().Length > 15 && !m_bPaste)
            {
                AssistBox.Show();
                AssistBox.Left = dataGridView15.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Left + tabControl1.Location.X + tabControl1.TabPages[0].Left;
                AssistBox.Top = dataGridView15.GetCellDisplayRectangle(dgvCurrentCell.ColumnIndex, dgvCurrentCell.RowIndex, false).Bottom + tabControl1.Location.Y + tabControl1.TabPages[0].Top;
                AssistBox.Text = dgvCurrentCell.Value.ToString();
            }
        }

        public void dataGridView15_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            DataGridViewCell dgvCurrentCell;
            if (!m_bPaste)
            {
                dgvCurrentCell = dataGridView15.CurrentCell;
            }
            else
            {
                dgvCurrentCell = m_dgvcTemp;
            }

            int nIndexRow = 0;
            if (dgvCurrentCell.ColumnIndex == 1)
            {
                for (int i = 0; i < dataGridView15.RowCount; i++)
                {
                    if (dataGridView15["IndexKey", i].Value.Equals(objTemp2))
                    {
                        nIndexRow = i;
                        break;
                    }
                }
            }
            else
            {
                nIndexRow = dgvCurrentCell.RowIndex;
            }

            //09. 06. 06 김정협 자동화를 위하여
            if (dgvCurrentCell.OwningColumn.Name == "NPC_ABILITY_ID")
            {
                DataRow dr = tblNPCAbility.Rows.Find(dataGridView15["NPC_ABILITY_ID", nIndexRow].Value.ToString());
                if (dr != null)
                {
                    dataGridView15["NPC_ABILITY_ID_C", nIndexRow].Value = dr["Des"].ToString();
                    dataGridView15["NPC_ABILITY_ID_", nIndexRow].Value = dr["CODE"].ToString();
                }
                else
                {
                    MessageBox.Show("존재하지 않는 값입니다.");
                    dataGridView15["NPC_ABILITY_ID", nIndexRow].Value = objTemp;
                }
            }

            //09. 06. 02 김정협 수정 : 자동정렬 후 Index 재 검색 후 값비교
            if (!objTemp.Equals((object)dataGridView15[dgvCurrentCell.ColumnIndex, nIndexRow].Value))
            {
                //09. 06. 02 김정협 수정 : dgvCurrentCell.RowIndex 를 IndexRow로 교체
                string strOldTime = dataGridView15["Regdate", nIndexRow].Value.ToString();

                dataGridView15[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Red;
                dataGridView15["Regdate", nIndexRow].Value = DateTime.Now;
                dataGridView15["Regdate", nIndexRow].Style.ForeColor = Color.Red;

                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int i = 0; i < dataGridView15.RowCount; i++)
                    {
                        if (dataGridView15[1, i].Value.ToString() == dataGridView15[dgvCurrentCell.ColumnIndex, nIndexRow].Value.ToString())
                        {
                            if (i == nIndexRow)
                            {
                                continue;
                            }

                            MessageBox.Show("동일한 ABILITY_ID값이 존재합니다.");

                            dataGridView15[dgvCurrentCell.ColumnIndex, nIndexRow].Value = objTemp;
                            dataGridView15[dgvCurrentCell.ColumnIndex, nIndexRow].Style.ForeColor = Color.Black;
                            dataGridView15["Regdate", nIndexRow].Value = strOldTime;
                            dataGridView15["Regdate", nIndexRow].Style.ForeColor = Color.Black;
                            return;

                        }
                    }
                }


                sTableValue sModiftIDList = new sTableValue();
                sModiftIDList.nRowIndex = nIndexRow;
                sModiftIDList.nTabIndex = 14;
                //09. 06. 01 김정협 수정 : Cell정보 추가
                sModiftIDList.bCell = true;
                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView15["IndexKey", nIndexRow].Value.ToString());


                bool m_bSame = false;
                for (int i = 0; i < m_ModifyIDList.Count; i++)
                {
                    if (((sTableValue)m_ModifyIDList[i]).nTabIndex == sModiftIDList.nTabIndex &&
                        ((sTableValue)m_ModifyIDList[i]).nIndexKey == sModiftIDList.nIndexKey)
                    {
                        m_bSame = true;
                        // break;
                    }
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 14;
                sUndoData.nType = 1;//1. Cell타입 수정
                sUndoData.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sUndoData.nRowIndex = nIndexRow;
                sUndoData.objUndoRedo = objTemp;

                //09. 07. 02 김정협 Undo그룹짓기
                if (!m_bPaste)
                {
                    if (m_UndoStack.Count > 0)
                    {
                        sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        sUndoData.nGroupID = 0;
                    }
                }
                else
                {
                    sUndoData.nGroupID = m_nPasteGroup;
                }
                
                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                if (!m_bSame)
                {
                    m_ModifyIDList.Add(sModiftIDList);
                    sUndoData.sModyfyList = sModiftIDList;
                }
                else
                {
                    sUndoData.sModyfyList.nTabIndex = -1;
                }

                m_UndoStack.Push(sUndoData);
                m_RedoStack.Clear();

                m_bSaveEnd = false;

                //09. 06. 02 김정협 수정 : 셀 변환정보 배열에 추가

                sChangeCell sChangeCellList = new sChangeCell();
                sChangeCellList.nTabIndex = 14;
                sChangeCellList.nColumnIndex = dgvCurrentCell.ColumnIndex;
                sChangeCellList.nIndexKey = Convert.ToInt32(dataGridView15["IndexKey", nIndexRow].Value.ToString());
                if (!m_ChangeCellList.Contains(sChangeCellList))
                {
                    m_ChangeCellList.Add(sChangeCellList);
                }
                if (dgvCurrentCell.ColumnIndex == 1)
                {
                    for (int c = 0; c < dataGridView15.ColumnCount; c++)
                    {
                        if (dataGridView15[c, m_nLastRow].HasStyle)
                            dataGridView15[c, m_nLastRow].Style.BackColor = Color.White;
                    }
                    SetCellBackgroundColorForDB(14);
                    ColorRefresh(true);
                };
            }


        }

        private void dataGridView1_KeyDown(object sender, KeyEventArgs e)
        {            
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView1);
                frm.ShowDialog(this);
            }
            //tblItem

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            //dataGridView1.ClipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithoutHeaderText;
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView1.GetClipboardContent().GetText());
            }
            

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }
                

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }
                
                int nColumnIndex = dataGridView1.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView1.CurrentCell.RowIndex;
                for(int i = 0; i < arrData.Length; i ++)
                {                    
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for(int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView1.ColumnCount <= nColumnIndex ||
                            dataGridView1.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView1[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView1[nColumnIndex, nRowIndex];
                            dataGridView1_CellBeginEdit(null,null);
                            dataGridView1[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView1_CellEndEdit(null, null);
                            dataGridView1.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView1.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView1.CurrentCell.ReadOnly && dataGridView1.SelectedRows.Count <= 0)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView1.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView1.SelectedCells[i];
                        dataGridView1_CellBeginEdit(null, null);

                        if (dataGridView1.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView1.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView1.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView1.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView1.SelectedCells[i].Value = 0;
                        }

                        dataGridView1_CellEndEdit(null, null);
                        dataGridView1.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView2_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView2);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView2.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView2.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView2.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView2.ColumnCount <= nColumnIndex ||
                            dataGridView2.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView2[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView2[nColumnIndex, nRowIndex];
                            dataGridView2_CellBeginEdit(null, null);
                            dataGridView2[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView2_CellEndEdit(null, null);
                            dataGridView2.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView2.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView2.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView2.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView2.SelectedCells[i];
                        dataGridView2_CellBeginEdit(null, null);

                        if (dataGridView2.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView2.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView2.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView2.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView2.SelectedCells[i].Value = 0;
                        }

                        dataGridView2_CellEndEdit(null, null);
                        dataGridView2.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView3_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView3);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView3.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView3.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView3.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView3.ColumnCount <= nColumnIndex ||
                            dataGridView3.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView3[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView3[nColumnIndex, nRowIndex];
                            dataGridView3_CellBeginEdit(null, null);
                            dataGridView3[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView3_CellEndEdit(null, null);
                            dataGridView3.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView3.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView3.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView3.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView3.SelectedCells[i];
                        dataGridView3_CellBeginEdit(null, null);

                        if (dataGridView3.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView3.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView3.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView3.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView3.SelectedCells[i].Value = 0;
                        }

                        dataGridView3_CellEndEdit(null, null);
                        dataGridView3.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView4_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView4);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView4.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView4.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView4.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView4.ColumnCount <= nColumnIndex ||
                            dataGridView4.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView4[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView4[nColumnIndex, nRowIndex];
                            dataGridView4_CellBeginEdit(null, null);
                            dataGridView4[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView4_CellEndEdit(null, null);
                            dataGridView4.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView4.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView4.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView4.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView4.SelectedCells[i];
                        dataGridView4_CellBeginEdit(null, null);

                        if (dataGridView4.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView4.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView4.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView4.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView4.SelectedCells[i].Value = 0;
                        }

                        dataGridView4_CellEndEdit(null, null);
                        dataGridView4.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView5_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView5);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView5.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView5.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView5.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView5.ColumnCount <= nColumnIndex ||
                            dataGridView5.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView5[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView5[nColumnIndex, nRowIndex];
                            dataGridView5_CellBeginEdit(null, null);
                            dataGridView5[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView5_CellEndEdit(null, null);
                            dataGridView5.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView5.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView5.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView5.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView5.SelectedCells[i];
                        dataGridView5_CellBeginEdit(null, null);

                        if (dataGridView5.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView5.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView5.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView5.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView5.SelectedCells[i].Value = 0;
                        }

                        dataGridView5_CellEndEdit(null, null);
                        dataGridView5.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView6_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView6);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView6.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView6.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView6.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView6.ColumnCount <= nColumnIndex ||
                            dataGridView6.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView6[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView6[nColumnIndex, nRowIndex];
                            dataGridView6_CellBeginEdit(null, null);
                            if (dataGridView6[nColumnIndex, nRowIndex].ValueType == Type.GetType("System.Int32"))
                            {
                                if(strData[j] == "")
                                {
                                    dataGridView6[nColumnIndex, nRowIndex].Value = 0;
                                }
                                else
                                {
                                    dataGridView6[nColumnIndex, nRowIndex].Value = strData[j];
                                }

                            }
                            else
                            {
                                dataGridView6[nColumnIndex, nRowIndex].Value = strData[j];
                            }                           

                            dataGridView6_CellEndEdit(null, null);
                            dataGridView6.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView6.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView6.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView6.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView6.SelectedCells[i];
                        dataGridView6_CellBeginEdit(null, null);

                        if (dataGridView6.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView6.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView6.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView6.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView6.SelectedCells[i].Value = 0;
                        }

                        dataGridView6_CellEndEdit(null, null);
                        dataGridView6.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView7_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView7);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView7.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView7.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView7.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView7.ColumnCount <= nColumnIndex ||
                            dataGridView7.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView7[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView7[nColumnIndex, nRowIndex];
                            dataGridView7_CellBeginEdit(null, null);
                            dataGridView7[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView7_CellEndEdit(null, null);
                            dataGridView7.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView7.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView7.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView7.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView7.SelectedCells[i];
                        dataGridView7_CellBeginEdit(null, null);

                        if (dataGridView7.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView7.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView7.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView7.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView7.SelectedCells[i].Value = 0;
                        }

                        dataGridView7_CellEndEdit(null, null);
                        dataGridView7.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView8_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView8);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView8.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView8.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView8.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView8.ColumnCount <= nColumnIndex ||
                            dataGridView8.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView8[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView8[nColumnIndex, nRowIndex];
                            dataGridView8_CellBeginEdit(null, null);
                            dataGridView8[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView8_CellEndEdit(null, null);
                            dataGridView8.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView8.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView8.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView8.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView8.SelectedCells[i];
                        dataGridView8_CellBeginEdit(null, null);

                        if (dataGridView8.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView8.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView8.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView8.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView8.SelectedCells[i].Value = 0;
                        }

                        dataGridView8_CellEndEdit(null, null);
                        dataGridView8.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView9_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView9);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView9.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView9.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView9.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView9.ColumnCount <= nColumnIndex ||
                            dataGridView9.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView9[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView9[nColumnIndex, nRowIndex];
                            dataGridView9_CellBeginEdit(null, null);
                            dataGridView9[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView9_CellEndEdit(null, null);
                            dataGridView9.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView9.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView9.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView9.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView9.SelectedCells[i];
                        dataGridView9_CellBeginEdit(null, null);

                        if (dataGridView9.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView9.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView9.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView9.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView9.SelectedCells[i].Value = 0;
                        }

                        dataGridView9_CellEndEdit(null, null);
                        dataGridView9.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView10_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView10);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView10.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView10.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView10.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView10.ColumnCount <= nColumnIndex ||
                            dataGridView10.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView10[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView10[nColumnIndex, nRowIndex];
                            dataGridView10_CellBeginEdit(null, null);


                            if (dataGridView10[nColumnIndex, nRowIndex].ValueType == Type.GetType("System.Int32"))
                            {
                                if (strData[j] == "")
                                {
                                    dataGridView10[nColumnIndex, nRowIndex].Value = 0;
                                }
                                else
                                {
                                    dataGridView10[nColumnIndex, nRowIndex].Value = strData[j];
                                }

                            }
                            else
                            {
                                dataGridView10[nColumnIndex, nRowIndex].Value = strData[j];
                            } 
                            //dataGridView10[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView10_CellEndEdit(null, null);
                            dataGridView10.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView10.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView10.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView10.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView10.SelectedCells[i];
                        dataGridView10_CellBeginEdit(null, null);

                        if (dataGridView10.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView10.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView10.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView10.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView10.SelectedCells[i].Value = 0;
                        }

                        dataGridView10_CellEndEdit(null, null);
                        dataGridView10.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView11_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView11);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView11.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView11.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView11.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView11.ColumnCount <= nColumnIndex ||
                            dataGridView11.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView11[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView11[nColumnIndex, nRowIndex];
                            dataGridView11_CellBeginEdit(null, null);
                            dataGridView11[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView11_CellEndEdit(null, null);
                            dataGridView11.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView11.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }

            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView11.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView11.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView11.SelectedCells[i];
                        dataGridView11_CellBeginEdit(null, null);

                        if (dataGridView11.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView11.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView11.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView11.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView11.SelectedCells[i].Value = 0;
                        }

                        dataGridView11_CellEndEdit(null, null);
                        dataGridView11.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView12_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView12);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView12.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView12.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView12.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView12.ColumnCount <= nColumnIndex ||
                            dataGridView12.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView12[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView12[nColumnIndex, nRowIndex];
                            dataGridView12_CellBeginEdit(null, null);
                            dataGridView12[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView12_CellEndEdit(null, null);
                            dataGridView12.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView12.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView12.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView12.SelectedCells.Count; i++)
                    {

                        m_bPaste = true;
                        m_dgvcTemp = dataGridView12.SelectedCells[i];
                        dataGridView12_CellBeginEdit(null, null);

                        if (dataGridView12.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView12.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView12.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView12.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView12.SelectedCells[i].Value = 0;
                        }

                        dataGridView12_CellEndEdit(null, null);
                        dataGridView12.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView13_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView13);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView13.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView13.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView13.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView13.ColumnCount <= nColumnIndex ||
                            dataGridView13.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView13[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView13[nColumnIndex, nRowIndex];
                            dataGridView13_CellBeginEdit(null, null);
                            dataGridView13[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView13_CellEndEdit(null, null);
                            dataGridView13.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView13.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView13.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;

                    for (int i = 0; i < dataGridView13.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView13.SelectedCells[i];
                        dataGridView13_CellBeginEdit(null, null);

                        if (dataGridView13.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView13.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView13.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView13.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView13.SelectedCells[i].Value = 0;
                        }

                        dataGridView13_CellEndEdit(null, null);
                        dataGridView13.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void dataGridView14_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView14);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView14.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView14.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView14.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView14.ColumnCount <= nColumnIndex ||
                            dataGridView14.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView14[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView14[nColumnIndex, nRowIndex];
                            dataGridView14_CellBeginEdit(null, null);
                            dataGridView14[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView14_CellEndEdit(null, null);
                            dataGridView14.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView14.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView14.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView14.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView14.SelectedCells[i];
                        dataGridView14_CellBeginEdit(null, null);

                        if (dataGridView14.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView14.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView14.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView14.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView14.SelectedCells[i].Value = 0;
                        }

                        dataGridView14_CellEndEdit(null, null);
                        dataGridView14.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }


        private void dataGridView15_KeyDown(object sender, KeyEventArgs e)
        {
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.F)
            {
                Search frm = new Search();
                frm.SetDataGridView(dataGridView15);
                frm.ShowDialog(this);
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.X)
            {
                Clipboard.SetDataObject(dataGridView15.GetClipboardContent().GetText());
            }

            //09. 06. 10 김정협 셀선택상태에서 붙여넣기 및 삭제가능
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.V)
            {
                //09. 07. 02 김정협 언두리두시 그룹지정
                if (m_UndoStack.Count > 0)
                {
                    m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                }
                else
                {
                    m_nPasteGroup = 0;
                }

                IDataObject iData = Clipboard.GetDataObject();
                string strClp = (string)iData.GetData(DataFormats.Text);
                string delimstr = "\n";
                char[] delimiter = delimstr.ToCharArray();
                string[] arrData = strClp.Split(delimiter, strClp.Length);
                for (int i = 0; i < arrData.Length; i++)
                {
                    arrData[i] = arrData[i].Replace("\r", "");
                }

                int nColumnIndex = dataGridView15.CurrentCell.ColumnIndex;
                int nRowIndex = dataGridView15.CurrentCell.RowIndex;
                for (int i = 0; i < arrData.Length; i++)
                {
                    string strTemp = "\t";
                    char[] cDe = strTemp.ToCharArray();
                    //string[] arrData = strClp.Split(delimiter, strClp.Length);
                    string[] strData = arrData[i].Split(cDe, arrData[i].Length);
                    for (int j = 0; j < strData.Length; j++)
                    {
                        //09. 07. 02 김정협 붙여넣기 영역벗어났을경우 에러나는부분해결
                        if (dataGridView15.ColumnCount <= nColumnIndex ||
                            dataGridView15.RowCount <= nRowIndex)
                        {
                            continue;
                        }
                        if (!dataGridView15[nColumnIndex, nRowIndex].ReadOnly)
                        {
                            m_bPaste = true;
                            m_dgvcTemp = dataGridView15[nColumnIndex, nRowIndex];
                            dataGridView15_CellBeginEdit(null, null);
                            dataGridView15[nColumnIndex, nRowIndex].Value = strData[j];

                            dataGridView15_CellEndEdit(null, null);
                            dataGridView15.RefreshEdit();
                            m_bPaste = false;
                        }
                        nColumnIndex++;
                    }
                    nColumnIndex = dataGridView15.CurrentCell.ColumnIndex;
                    nRowIndex++;
                }
            }


            if (e.KeyCode == Keys.Delete)
            {
                if (!dataGridView15.CurrentCell.ReadOnly)
                {
                    //09. 07. 02 김정협 언두리두시 그룹지정
                    if (m_UndoStack.Count > 0)
                    {
                        m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                    }
                    else
                    {
                        m_nPasteGroup = 0;
                    }

                    for (int i = 0; i < dataGridView15.SelectedCells.Count; i++)
                    {
                        m_bPaste = true;
                        m_dgvcTemp = dataGridView15.SelectedCells[i];
                        dataGridView15_CellBeginEdit(null, null);

                        if (dataGridView15.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                        {
                            dataGridView15.SelectedCells[i].Value = false;
                        }
                        else if (dataGridView15.SelectedCells[i].ValueType == Type.GetType("System.String"))
                        {
                            dataGridView15.SelectedCells[i].Value = "";
                        }
                        else
                        {
                            dataGridView15.SelectedCells[i].Value = 0;
                        }

                        dataGridView15_CellEndEdit(null, null);
                        dataGridView15.RefreshEdit();
                        m_bPaste = false;
                    }
                }
            }
        }

        private void ItemTable_Resize(object sender, EventArgs e)
        {
            tabControl1.Width = this.Width - 11;
            tabControl1.Height = this.Height - 136;
            dataGridView1.Width = tabControl1.Width - 13;
            dataGridView1.Height = tabControl1.Height - 29;

            dataGridView2.Width = tabControl1.Width - 13;
            dataGridView2.Height = tabControl1.Height - 29;

            dataGridView3.Width = tabControl1.Width - 13;
            dataGridView3.Height = tabControl1.Height - 29;

            dataGridView4.Width = tabControl1.Width - 13;
            dataGridView4.Height = tabControl1.Height - 29;

            dataGridView5.Width = tabControl1.Width - 13;
            dataGridView5.Height = tabControl1.Height - 29;

            dataGridView6.Width = tabControl1.Width - 13;
            dataGridView6.Height = tabControl1.Height - 29;

            dataGridView7.Width = tabControl1.Width - 13;
            dataGridView7.Height = tabControl1.Height - 29;

            dataGridView8.Width = tabControl1.Width - 13;
            dataGridView8.Height = tabControl1.Height - 29;

            dataGridView9.Width = tabControl1.Width - 13;
            dataGridView9.Height = tabControl1.Height - 29;

            dataGridView10.Width = tabControl1.Width - 13;
            dataGridView10.Height = tabControl1.Height - 29;

            dataGridView11.Width = tabControl1.Width - 13;
            dataGridView11.Height = tabControl1.Height - 29;

            dataGridView12.Width = tabControl1.Width - 13;
            dataGridView12.Height = tabControl1.Height - 29;

            dataGridView13.Width = tabControl1.Width - 13;
            dataGridView13.Height = tabControl1.Height - 29;

            dataGridView14.Width = tabControl1.Width - 13;
            dataGridView14.Height = tabControl1.Height - 29;

            dataGridView15.Width = tabControl1.Width - 13;
            dataGridView15.Height = tabControl1.Height - 29;

            btnAdd.Left = tabControl1.Location.X + 7;
            btnAdd.Top = tabControl1.Location.Y + tabControl1.Height + 5;
            btnMultiAdd.Left = btnAdd.Location.X + btnAdd.Width + 7;
            btnMultiAdd.Top = btnAdd.Location.Y;
            btnSave.Left = btnMultiAdd.Location.X + btnMultiAdd.Width + 7;
            btnSave.Top = btnAdd.Location.Y;
            btnFileGenerate.Left = btnSave.Location.X + btnSave.Width + 7;
            btnFileGenerate.Top = btnAdd.Location.Y;
            btnHistory.Left = btnFileGenerate.Location.X + btnFileGenerate.Width + 7;
            btnHistory.Top = btnAdd.Location.Y;
            btnString.Left = btnHistory.Location.X + btnHistory.Width + 7;
            btnString.Top = btnAdd.Location.Y;
        }


        private void button1_Click(object sender, EventArgs e)
        {
            if (textBox1.Text != "")
            {
                switch (tabControl1.SelectedIndex)
                {
                    case 0:
                        {
                            if (dataGridView1.CurrentCell.ColumnIndex != dataGridView1[textBox1.Text, 0].ColumnIndex)
                            {                                
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView1.RowCount; i++)
                            {
                                if (!dataGridView1[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView1[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView1.CurrentCell = dataGridView1[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView1[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView1[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView1.CurrentCell = dataGridView1[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 1:
                        {
                            if (dataGridView2.CurrentCell.ColumnIndex != dataGridView2[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView2.RowCount; i++)
                            {
                                if (!dataGridView2[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView2[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView2.CurrentCell = dataGridView2[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView2[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView2[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView2.CurrentCell = dataGridView2[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 2:
                        {
                            if (dataGridView3.CurrentCell.ColumnIndex != dataGridView3[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView3.RowCount; i++)
                            {
                                if (!dataGridView3[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView3[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView3.CurrentCell = dataGridView3[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView3[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView3[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView3.CurrentCell = dataGridView3[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 3:
                        {
                            if (dataGridView4.CurrentCell.ColumnIndex != dataGridView4[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView4.RowCount; i++)
                            {
                                if (!dataGridView4[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView4[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView4.CurrentCell = dataGridView4[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView4[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView4[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView4.CurrentCell = dataGridView4[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 4:
                        {
                            if (dataGridView5.CurrentCell.ColumnIndex != dataGridView5[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView5.RowCount; i++)
                            {
                                if (!dataGridView5[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView5[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView5.CurrentCell = dataGridView5[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView5[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView5[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView5.CurrentCell = dataGridView5[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 5:
                        {
                            if (dataGridView6.CurrentCell.ColumnIndex != dataGridView6[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView6.RowCount; i++)
                            {
                                if (!dataGridView6[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView6[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView6.CurrentCell = dataGridView6[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView6[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView6[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView6.CurrentCell = dataGridView6[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 6:
                        {
                            if (dataGridView7.CurrentCell.ColumnIndex != dataGridView7[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView7.RowCount; i++)
                            {
                                if (!dataGridView7[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView7[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView7.CurrentCell = dataGridView7[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView7[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView7[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView7.CurrentCell = dataGridView7[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 7:
                        {
                            if (dataGridView8.CurrentCell.ColumnIndex != dataGridView8[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView8.RowCount; i++)
                            {
                                if (!dataGridView8[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView8[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView8.CurrentCell = dataGridView8[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView8[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView8[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView8.CurrentCell = dataGridView8[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 8:
                        {
                            if (dataGridView9.CurrentCell.ColumnIndex != dataGridView9[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView9.RowCount; i++)
                            {
                                if (!dataGridView9[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView9[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView9.CurrentCell = dataGridView9[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView9[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView9[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView9.CurrentCell = dataGridView9[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 9:
                        {
                            if (dataGridView10.CurrentCell.ColumnIndex != dataGridView10[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView10.RowCount; i++)
                            {
                                if (!dataGridView10[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView10[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView10.CurrentCell = dataGridView10[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView10[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView10[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView10.CurrentCell = dataGridView10[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 10:
                        {
                            if (dataGridView11.CurrentCell.ColumnIndex != dataGridView11[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView11.RowCount; i++)
                            {
                                if (!dataGridView11[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView11[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView11.CurrentCell = dataGridView11[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView11[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView11[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView11.CurrentCell = dataGridView11[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 11:
                        {
                            if (dataGridView12.CurrentCell.ColumnIndex != dataGridView12[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView12.RowCount; i++)
                            {
                                if (!dataGridView12[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView12[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView12.CurrentCell = dataGridView12[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView12[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView12[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView12.CurrentCell = dataGridView12[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 12:
                        {
                            if (dataGridView13.CurrentCell.ColumnIndex != dataGridView13[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView13.RowCount; i++)
                            {
                                if (!dataGridView13[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView13[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView13.CurrentCell = dataGridView13[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView13[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView13[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView13.CurrentCell = dataGridView13[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 13:
                        {
                            if (dataGridView14.CurrentCell.ColumnIndex != dataGridView14[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView14.RowCount; i++)
                            {
                                if (!dataGridView14[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView14[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView14.CurrentCell = dataGridView14[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView14[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView14[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView14.CurrentCell = dataGridView14[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                    case 14:
                        {
                            if (dataGridView15.CurrentCell.ColumnIndex != dataGridView15[textBox1.Text, 0].ColumnIndex)
                            {
                                m_nStartPoint = 0;
                            }

                            for (int i = m_nStartPoint; i < dataGridView15.RowCount; i++)
                            {
                                if (!dataGridView15[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView15[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView15.CurrentCell = dataGridView15[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            for (int i = 0; i < m_nStartPoint; i++)
                            {
                                if (!dataGridView15[textBox1.Text, i].Visible)
                                {
                                    continue;
                                }
                                if (dataGridView15[textBox1.Text, i].Value.ToString().IndexOf(textBox2.Text) > -1)
                                {
                                    dataGridView15.CurrentCell = dataGridView15[textBox1.Text, i];
                                    m_nStartPoint = i + 1;
                                    return;
                                }
                            }

                            MessageBox.Show("결과값이 존재하지 않습니다.");
                        }
                        break;
                }
            }
        }

        private void textBox2_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((char)Keys.Enter == e.KeyChar)
                button1_Click(null, null);
        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox1.Checked)
            {
                for (int i = 0; i < dataGridView1.ColumnCount; i++)
                {
                    dataGridView1.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView2.ColumnCount; i++)
                {
                    dataGridView2.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView3.ColumnCount; i++)
                {
                    dataGridView3.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView4.ColumnCount; i++)
                {
                    dataGridView4.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView5.ColumnCount; i++)
                {
                    dataGridView5.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView6.ColumnCount; i++)
                {
                    dataGridView6.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView7.ColumnCount; i++)
                {
                    dataGridView7.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView8.ColumnCount; i++)
                {
                    dataGridView8.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView9.ColumnCount; i++)
                {
                    dataGridView9.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView10.ColumnCount; i++)
                {
                    dataGridView10.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView11.ColumnCount; i++)
                {
                    dataGridView11.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView12.ColumnCount; i++)
                {
                    dataGridView12.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView13.ColumnCount; i++)
                {
                    dataGridView13.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView14.ColumnCount; i++)
                {
                    dataGridView14.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }
                for (int i = 0; i < dataGridView15.ColumnCount; i++)
                {
                    dataGridView15.Columns[i].SortMode = DataGridViewColumnSortMode.Automatic;
                }

            }
            else
            {
                for (int i = 0; i < dataGridView1.ColumnCount; i++)
                {
                    dataGridView1.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView2.ColumnCount; i++)
                {
                    dataGridView2.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView3.ColumnCount; i++)
                {
                    dataGridView3.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView4.ColumnCount; i++)
                {
                    dataGridView4.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView5.ColumnCount; i++)
                {
                    dataGridView5.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView6.ColumnCount; i++)
                {
                    dataGridView6.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView7.ColumnCount; i++)
                {
                    dataGridView7.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView8.ColumnCount; i++)
                {
                    dataGridView8.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView9.ColumnCount; i++)
                {
                    dataGridView9.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView10.ColumnCount; i++)
                {
                    dataGridView10.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView11.ColumnCount; i++)
                {
                    dataGridView11.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView12.ColumnCount; i++)
                {
                    dataGridView12.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView13.ColumnCount; i++)
                {
                    dataGridView13.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView14.ColumnCount; i++)
                {
                    dataGridView14.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
                for (int i = 0; i < dataGridView15.ColumnCount; i++)
                {
                    dataGridView15.Columns[i].SortMode = DataGridViewColumnSortMode.Programmatic;
                }
            }
        }



        private void dataGridView1_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView1[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView2_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView2[e.ColumnIndex, 0].OwningColumn.Name;

        }

        private void dataGridView3_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView3[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView4_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView4[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView5_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView5[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView6_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView6[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView7_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView7[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView8_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView8[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView9_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView9[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView10_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView10[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView11_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView11[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView12_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView12[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView13_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView13[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView14_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView14[e.ColumnIndex, 0].OwningColumn.Name;
        }

        private void dataGridView15_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            textBox1.Text = dataGridView15[e.ColumnIndex, 0].OwningColumn.Name;
        }

        //09. 06. 03 김정협 추가 : 셀배경색
        private void button2_Click(object sender, EventArgs e)
        {
            Color cColor = new Color();
            ColorDialog dlg = new ColorDialog();

            if (dlg.ShowDialog() == DialogResult.OK)
            {

                cColor = dlg.Color;
            }
            ArrayList RowDelete = new ArrayList();
            int nIndex = 0;

            if (tblColor.Rows.Count == 0)
            {
                nIndex = 0;
            }

            switch (tabControl1.SelectedIndex)
            {
                case 0:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView1.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView1.SelectedCells[i].ReadOnly &&
                                    dataGridView1.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView1.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView1.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView1.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "Item" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView1.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView1["ID", dataGridView1.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView1.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView1.SelectedCells[i].ReadOnly &&
                                    dataGridView1.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView1.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView1.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                 //   nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }

                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                //drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "Item";
                                drTemp["Column"] = dataGridView1.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView1["ID", dataGridView1.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                       // Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 1:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView2.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView2.SelectedCells[i].ReadOnly &&
                                    dataGridView2.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView2.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView2.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView2.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "SpecialAbility" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView2.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView2["IndexKey", dataGridView2.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView2.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView2.SelectedCells[i].ReadOnly &&
                                    dataGridView2.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView2.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView2.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "SpecialAbility";
                                drTemp["Column"] = dataGridView2.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView2["IndexKey", dataGridView2.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                       // Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 2:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView3.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView3.SelectedCells[i].ReadOnly &&
                                    dataGridView3.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView3.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView3.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView3.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "SocketItem" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView3.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView3["IndexKey", dataGridView3.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView3.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView3.SelectedCells[i].ReadOnly &&
                                    dataGridView3.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView3.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView3.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "SocketItem";
                                drTemp["Column"] = dataGridView3.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView3["IndexKey", dataGridView3.SelectedCells[i].RowIndex].Value.ToString();

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                      //  Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 3:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView4.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView4.SelectedCells[i].ReadOnly &&
                                    dataGridView4.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView4.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView4.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView4.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "SocketRandom" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView4.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView4["IndexKey", dataGridView4.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView4.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView4.SelectedCells[i].ReadOnly &&
                                    dataGridView4.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView4.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView4.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "SocketRandom";
                                drTemp["Column"] = dataGridView4.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView4["IndexKey", dataGridView4.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                      //  Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 4:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView5.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView5.SelectedCells[i].ReadOnly &&
                                    dataGridView5.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView5.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView5.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView5.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "SocketGroup" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView5.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView5["IndexKey", dataGridView5.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView5.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView5.SelectedCells[i].ReadOnly &&
                                    dataGridView5.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView5.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView5.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "SocketGroup";
                                drTemp["Column"] = dataGridView5.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView5["IndexKey", dataGridView5.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                      //  Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 5:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView6.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView6.SelectedCells[i].ReadOnly &&
                                    dataGridView6.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView6.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView6.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView6.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "SetItem" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView6.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView6["IndexKey", dataGridView6.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView6.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView6.SelectedCells[i].ReadOnly &&
                                    dataGridView6.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView6.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView6.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "SetItem";
                                drTemp["Column"] = dataGridView6.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView6["IndexKey", dataGridView6.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                    //    Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 6:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView7.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView7.SelectedCells[i].ReadOnly &&
                                    dataGridView7.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView7.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView7.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView7.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "RandomBoxTable" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView7.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView7["IndexKey", dataGridView7.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView7.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView7.SelectedCells[i].ReadOnly &&
                                    dataGridView7.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView7.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView7.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "RandomBoxTable";
                                drTemp["Column"] = dataGridView7.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView7["IndexKey", dataGridView7.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                     //   Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 7:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView8.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView8.SelectedCells[i].ReadOnly &&
                                    dataGridView8.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView8.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }


                                if (dataGridView8.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView8.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "RandomItemGroup" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView8.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView8["IndexKey", dataGridView8.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView8.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView8.SelectedCells[i].ReadOnly &&
                                    dataGridView8.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView8.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView8.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "RandomItemGroup";
                                drTemp["Column"] = dataGridView8.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView8["IndexKey", dataGridView8.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                     //   Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 8:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView9.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView9.SelectedCells[i].ReadOnly &&
                                    dataGridView9.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView9.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView9.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView9.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "ExchangeTable" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView9.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView9["IndexKey", dataGridView9.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView9.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView9.SelectedCells[i].ReadOnly &&
                                    dataGridView9.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView9.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView9.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "ExchangeTable";
                                drTemp["Column"] = dataGridView9.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView9["IndexKey", dataGridView9.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                    //    Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 9:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView10.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView10.SelectedCells[i].ReadOnly &&
                                    dataGridView10.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView10.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView10.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView10.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "ManufactureTable" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView10.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView10["IndexKey", dataGridView10.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView10.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView10.SelectedCells[i].ReadOnly &&
                                    dataGridView10.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView10.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView10.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "ManufactureTable";
                                drTemp["Column"] = dataGridView10.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView10["IndexKey", dataGridView10.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                     //   Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 10:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView11.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView11.SelectedCells[i].ReadOnly &&
                                    dataGridView11.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView11.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView11.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView11.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "ManufactureResultGroup" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView11.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView11["IndexKey", dataGridView11.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView11.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView11.SelectedCells[i].ReadOnly &&
                                    dataGridView11.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView11.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView11.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "ManufactureResultGroup";
                                drTemp["Column"] = dataGridView11.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView11["IndexKey", dataGridView11.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                      //  Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 11:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView12.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView12.SelectedCells[i].ReadOnly &&
                                    dataGridView12.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView12.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView12.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView12.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "ManufactureVillage" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView12.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView12["IndexKey", dataGridView12.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView12.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView12.SelectedCells[i].ReadOnly &&
                                    dataGridView12.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView12.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView12.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "ManufactureVillage";
                                drTemp["Column"] = dataGridView12.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView12["IndexKey", dataGridView12.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                     //   Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 12:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView13.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView13.SelectedCells[i].ReadOnly &&
                                    dataGridView13.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView13.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView13.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView13.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "AttribEnchantItem" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView13.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView13["IndexKey", dataGridView13.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView13.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView13.SelectedCells[i].ReadOnly &&
                                    dataGridView13.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView13.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView13.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "AttribEnchantItem";
                                drTemp["Column"] = dataGridView13.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView13["IndexKey", dataGridView13.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                     //   Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 13:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView14.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView14.SelectedCells[i].ReadOnly &&
                                    dataGridView14.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView14.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView14.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView14.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "AttribEnchantRequire" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView14.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView14["IndexKey", dataGridView14.SelectedCells[i].RowIndex].Value.ToString())
                                    {
                                        //tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView14.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView14.SelectedCells[i].ReadOnly &&
                                    dataGridView14.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView14.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView14.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "AttribEnchantRequire";
                                drTemp["Column"] = dataGridView14.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView14["IndexKey", dataGridView14.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                      //  Adpt_ColorTable.Update(tblColor);
                    }
                    break;
                case 14:
                    {
                        if (cColor == Color.White)
                        {
                            for (int i = 0; i < dataGridView15.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView15.SelectedCells[i].ReadOnly &&
                                    dataGridView15.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView15.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                if (dataGridView15.SelectedCells[i].Style.BackColor == Color.White)
                                {
                                    continue;
                                }
                                dataGridView15.SelectedCells[i].Style.BackColor = cColor;
                                for (int j = 0; j < tblColor.Rows.Count; j++)
                                {
                                    if (RowDelete.Contains(j) || tblColor.Rows[j].RowState == DataRowState.Deleted)
                                    {
                                        continue;
                                    }
                                    DataRow drTemp = tblColor.Rows[j];
                                    if (drTemp["TableName"].ToString() == "NpcExtraAbility" &&
                                    drTemp["Column"].ToString() == Convert.ToString(dataGridView15.SelectedCells[i].ColumnIndex) &&
                                    drTemp["IndexNum"].ToString() == dataGridView15["IndexKey", dataGridView15.SelectedCells[i].RowIndex].Value.ToString())//Convert.ToString(dataGridView15.SelectedCells[i].RowIndex))
                                    {
                                        // tblColor.Rows.RemoveAt(j);
                                        tblColor.Rows[j].Delete();
                                        RowDelete.Add(j);
                                        //break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < dataGridView15.SelectedCells.Count; i++)
                            {
                                //09. 06. 10 링크데이터 셀색 변경 금지
                                if (dataGridView15.SelectedCells[i].ReadOnly &&
                                    dataGridView15.SelectedCells[i].OwningColumn.Name != "IndexKey" &&
                                    dataGridView15.SelectedCells[i].OwningColumn.Name != "Regdate")
                                {
                                    continue;
                                }

                                dataGridView15.SelectedCells[i].Style.BackColor = cColor;
                                if (tblColor.Rows.Count > 0)
                                {
                                    //nIndex = 0;
                                    DataRow dr = tblColor.Rows[tblColor.Rows.Count - 1];
                                    nIndex = Convert.ToInt32(dr["IndexKey"].ToString()) + 1;
                                }
                                tblColor.Rows.Add();
                                DataRow drTemp = tblColor.Rows[tblColor.Rows.Count - 1];
                                drTemp["IndexKey"] = nIndex;
                                drTemp["TableName"] = "NpcExtraAbility";
                                drTemp["Column"] = dataGridView15.SelectedCells[i].ColumnIndex;
                                drTemp["IndexNum"] = dataGridView15["IndexKey", dataGridView15.SelectedCells[i].RowIndex].Value;

                                drTemp["Color"] = cColor.ToArgb();

                                drTemp["Regdate"] = DateTime.Now;
                            }
                        }
                        RowDelete.Clear();
                     //   Adpt_ColorTable.Update(tblColor);
                    }
                    break;

            }

        }


        private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            switch (tabControl1.SelectedIndex)
            {
                case 0:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView1.SelectedCells.Count; i++)
                            {                                
                                if (dataGridView1.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView1.SelectedCells[i];
                                    dataGridView1_CellBeginEdit(null, null);
                                    dataGridView1.SelectedCells[i].Value = true;

                                    dataGridView1_CellEndEdit(null, null);
                                    dataGridView1.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView1.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                                /*
                                sTableValue sModiftIDList = new sTableValue();
                                sModiftIDList.nTabIndex = 0;
                                //09. 06. 01 김정협 수정 : Cell정보 추가
                                sModiftIDList.bCell = true;
                                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView1["IndexKey", dataGridView1.SelectedCells[i].RowIndex].Value.ToString());

                                bool m_bSame = false;
                                for (int j = 0; j < m_ModifyIDList.Count; j++)
                                {
                                    if (((sTableValue)m_ModifyIDList[j]).nTabIndex == sModiftIDList.nTabIndex &&
                                        ((sTableValue)m_ModifyIDList[j]).nIndexKey == sModiftIDList.nIndexKey)
                                    {
                                        m_bSame = true;
                                    }
                                }
                                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                                if (!m_bSame)
                                    m_ModifyIDList.Add(sModiftIDList);*/
                            }
                        }
                        else if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView1.SelectedCells.Count; i++)
                            {
                                if (dataGridView1.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView1.SelectedCells[i];
                                    dataGridView1_CellBeginEdit(null, null);
                                    dataGridView1.SelectedCells[i].Value = false;

                                    dataGridView1_CellEndEdit(null, null);
                                    dataGridView1.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView1.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                                /*
                                sTableValue sModiftIDList = new sTableValue();
                                sModiftIDList.nTabIndex = 0;
                                //09. 06. 01 김정협 수정 : Cell정보 추가
                                sModiftIDList.bCell = true;
                                sModiftIDList.nIndexKey = Convert.ToInt32(dataGridView1["IndexKey", dataGridView1.SelectedCells[i].RowIndex].Value.ToString());

                                bool m_bSame = false;
                                for (int j = 0; j < m_ModifyIDList.Count; j++)
                                {
                                    if (((sTableValue)m_ModifyIDList[j]).nTabIndex == sModiftIDList.nTabIndex &&
                                        ((sTableValue)m_ModifyIDList[j]).nIndexKey == sModiftIDList.nIndexKey)
                                    {
                                        m_bSame = true;
                                    }
                                }
                                //09. 06. 01 김정협 수정 : 열 중복저장 방지
                                if (!m_bSame)
                                    m_ModifyIDList.Add(sModiftIDList);*/
                            }
                        }

                        //09. 07. 02 김정협 링크리스트 제작
                        if (e.ClickedItem.Text == "List열기")
                        {
                            dataGridView1_CellBeginEdit(null, null);
                            LinkListView frm = new LinkListView();

                            if (dataGridView1.CurrentCell.OwningColumn.Name == "Item Type" )
                            {
                                frm.SetTable(tblItemType);
                            }
                            else if (dataGridView1.CurrentCell.OwningColumn.Name == "Use Type" )
                            {
                                frm.SetTable(tblUseType);
                            }
                            else if (dataGridView1.CurrentCell.OwningColumn.Name == "Period Type" )
                            {
                                frm.SetTable(tblPeriodType);
                            }
                            else if (dataGridView1.CurrentCell.OwningColumn.Name == "Price Type" )
                            {
                                frm.SetTable(tblPriceType);
                            }
                            else if (dataGridView1.CurrentCell.OwningColumn.Name == "Use Condition" )
                            {
                                frm.SetTable(tblUseCondition);
                            }
                            else if (dataGridView1.CurrentCell.OwningColumn.Name == "Unit Type" )
                            {
                                frm.SetTable(tblUnitType);
                            }
                            else if (dataGridView1.CurrentCell.OwningColumn.Name == "Unit Class" )
                            {
                                frm.SetTable(tblUnitClass);
                            }
                            else if (dataGridView1.CurrentCell.OwningColumn.Name == "Eqip Position" )
                            {
                                frm.SetTable(tblEqipPosition);
                            }
                            else if (dataGridView1.CurrentCell.OwningColumn.Name == "Item Grade" )
                            {
                                frm.SetTable(tblItemGrade);
                            }
                            
                            frm.SetPoint(MousePosition.X, MousePosition.Y);
                            frm.SetDataGridView(dataGridView1, tabControl1.SelectedIndex, "Item" );
                            frm.Owner = this;
                            frm.ShowDialog(this);
                        }

                        dataGridView1.RefreshEdit();
                        
                    }
                    break;
                case 1:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView2.SelectedCells.Count; i++)
                            {
                                if (dataGridView2.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView2.SelectedCells[i];
                                    dataGridView2_CellBeginEdit(null, null);
                                    dataGridView2.SelectedCells[i].Value = true;

                                    dataGridView2_CellEndEdit(null, null);
                                    dataGridView2.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView2.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView2.SelectedCells.Count; i++)
                            {
                                if (dataGridView2.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView2.SelectedCells[i];
                                    dataGridView2_CellBeginEdit(null, null);
                                    dataGridView2.SelectedCells[i].Value = false;

                                    dataGridView2_CellEndEdit(null, null);
                                    dataGridView2.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView2.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                                                                
                            }
                        }

                        //09. 07. 02 김정협 링크리스트 제작
                        if (e.ClickedItem.Text == "List열기")
                        {
                            dataGridView2_CellBeginEdit(null, null);
                            LinkListView frm = new LinkListView();
                            frm.SetTable(tblSpecialAbilityType);                          
                            
                            frm.SetPoint(MousePosition.X, MousePosition.Y);
                            frm.SetDataGridView(dataGridView2, tabControl1.SelectedIndex, "Item");
                            frm.Owner = this;
                            frm.ShowDialog(this);
                        }


                        dataGridView2.RefreshEdit();
                    }
                    break;
                case 2:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView3.SelectedCells.Count; i++)
                            {
                                if (dataGridView3.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView3.SelectedCells[i];
                                    dataGridView3_CellBeginEdit(null, null);
                                    dataGridView3.SelectedCells[i].Value = true;

                                    dataGridView3_CellEndEdit(null, null);
                                    dataGridView3.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView3.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView3.SelectedCells.Count; i++)
                            {
                                if (dataGridView3.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView3.SelectedCells[i];
                                    dataGridView3_CellBeginEdit(null, null);
                                    dataGridView3.SelectedCells[i].Value = false;

                                    dataGridView3_CellEndEdit(null, null);
                                    dataGridView3.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView3.CurrentCell.Value;
                                    m_bPaste = false;
                                }

                            }
                        }

                        //09. 07. 02 김정협 링크리스트 제작
                        if (e.ClickedItem.Text == "List열기")
                        {
                            dataGridView3_CellBeginEdit(null, null);
                            LinkListView frm = new LinkListView();
                            if (dataGridView3.CurrentCell.OwningColumn.Name == "Socket Type")
                            {
                                frm.SetTable(tblSocketDataType);
                            }
                            else if (dataGridView3.CurrentCell.OwningColumn.Name == "ExtraDamageType" ||
                                dataGridView3.CurrentCell.OwningColumn.Name == "ExtraDamageResistType" ||
                                dataGridView3.CurrentCell.OwningColumn.Name == "ImmuneExtraDamageType")
                            {
                                frm.SetTable(tblExtraDamageType);
                            }
                            

                            frm.SetPoint(MousePosition.X, MousePosition.Y);
                            frm.SetDataGridView(dataGridView3, tabControl1.SelectedIndex, "Item");
                            frm.Owner = this;
                            frm.ShowDialog(this);
                        }

                        dataGridView3.RefreshEdit();
                    }
                    break;
                case 3:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView4.SelectedCells.Count; i++)
                            {
                                if (dataGridView4.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView4.SelectedCells[i];
                                    dataGridView4_CellBeginEdit(null, null);
                                    dataGridView4.SelectedCells[i].Value = true;

                                    dataGridView4_CellEndEdit(null, null);
                                    dataGridView4.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView4.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView4.SelectedCells.Count; i++)
                            {
                                if (dataGridView4.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView4.SelectedCells[i];
                                    dataGridView4_CellBeginEdit(null, null);
                                    dataGridView4.SelectedCells[i].Value = false;

                                    dataGridView4_CellEndEdit(null, null);
                                    dataGridView4.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView4.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }

                        //09. 07. 02 김정협 링크리스트 제작
                        if (e.ClickedItem.Text == "List열기")
                        {
                            dataGridView4_CellBeginEdit(null, null);
                            LinkListView frm = new LinkListView();
                            frm.SetTable(tblSocketDataType);

                            frm.SetPoint(MousePosition.X, MousePosition.Y);
                            frm.SetDataGridView(dataGridView4, tabControl1.SelectedIndex, "Item");
                            frm.Owner = this;
                            frm.ShowDialog(this);
                        }

                        dataGridView4.RefreshEdit();
                    }
                    break;
                case 4:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView5.SelectedCells.Count; i++)
                            {
                                if (dataGridView5.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView5.SelectedCells[i];
                                    dataGridView5_CellBeginEdit(null, null);
                                    dataGridView5.SelectedCells[i].Value = true;

                                    dataGridView5_CellEndEdit(null, null);
                                    dataGridView5.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView5.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView5.SelectedCells.Count; i++)
                            {
                                if (dataGridView5.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView5.SelectedCells[i];
                                    dataGridView5_CellBeginEdit(null, null);
                                    dataGridView5.SelectedCells[i].Value = false;

                                    dataGridView5_CellEndEdit(null, null);
                                    dataGridView5.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView5.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        dataGridView5.RefreshEdit();
                    }
                    break;
                case 5:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView6.SelectedCells.Count; i++)
                            {
                                if (dataGridView6.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView6.SelectedCells[i];
                                    dataGridView6_CellBeginEdit(null, null);
                                    dataGridView6.SelectedCells[i].Value = true;

                                    dataGridView6_CellEndEdit(null, null);
                                    dataGridView6.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView6.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView6.SelectedCells.Count; i++)
                            {
                                if (dataGridView6.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView6.SelectedCells[i];
                                    dataGridView6_CellBeginEdit(null, null);
                                    dataGridView6.SelectedCells[i].Value = false;

                                    dataGridView6_CellEndEdit(null, null);
                                    dataGridView6.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView6.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        dataGridView6.RefreshEdit();
                    }
                    break;
                case 6:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView7.SelectedCells.Count; i++)
                            {
                                if (dataGridView7.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView7.SelectedCells[i];
                                    dataGridView7_CellBeginEdit(null, null);
                                    dataGridView7.SelectedCells[i].Value = true;

                                    dataGridView7_CellEndEdit(null, null);
                                    dataGridView7.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView7.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView7.SelectedCells.Count; i++)
                            {
                                if (dataGridView7.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView7.SelectedCells[i];
                                    dataGridView7_CellBeginEdit(null, null);
                                    dataGridView7.SelectedCells[i].Value = false;

                                    dataGridView7_CellEndEdit(null, null);
                                    dataGridView7.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView7.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }

                        //09. 07. 02 김정협 링크리스트 제작
                        if (e.ClickedItem.Text == "List열기")
                        {
                            dataGridView7_CellBeginEdit(null, null);
                            LinkListView frm = new LinkListView();
                            frm.SetTable(tblUnitClass);

                            frm.SetPoint(MousePosition.X, MousePosition.Y);
                            frm.SetDataGridView(dataGridView7, tabControl1.SelectedIndex, "Item");
                            frm.Owner = this;
                            frm.ShowDialog(this);
                        }


                        dataGridView7.RefreshEdit();
                    }
                    break;
                case 7:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView8.SelectedCells.Count; i++)
                            {
                                if (dataGridView8.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView8.SelectedCells[i];
                                    dataGridView8_CellBeginEdit(null, null);
                                    dataGridView8.SelectedCells[i].Value = true;

                                    dataGridView8_CellEndEdit(null, null);
                                    dataGridView8.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView8.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView8.SelectedCells.Count; i++)
                            {
                                if (dataGridView8.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView8.SelectedCells[i];
                                    dataGridView8_CellBeginEdit(null, null);
                                    dataGridView8.SelectedCells[i].Value = false;

                                    dataGridView8_CellEndEdit(null, null);
                                    dataGridView8.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView8.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        
                        dataGridView8.RefreshEdit();
                    }
                    break;
                case 8:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView9.SelectedCells.Count; i++)
                            {
                                if (dataGridView9.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView9.SelectedCells[i];
                                    dataGridView9_CellBeginEdit(null, null);
                                    dataGridView9.SelectedCells[i].Value = true;

                                    dataGridView9_CellEndEdit(null, null);
                                    dataGridView9.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView9.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView9.SelectedCells.Count; i++)
                            {
                                if (dataGridView9.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView9.SelectedCells[i];
                                    dataGridView9_CellBeginEdit(null, null);
                                    dataGridView9.SelectedCells[i].Value = false;

                                    dataGridView9_CellEndEdit(null, null);
                                    dataGridView9.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView9.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        //09. 07. 02 김정협 링크리스트 제작
                        if (e.ClickedItem.Text == "List열기")
                        {
                            dataGridView9_CellBeginEdit(null, null);
                            LinkListView frm = new LinkListView();

                            if (dataGridView9.CurrentCell.OwningColumn.Name == "House_ID")
                            {
                                frm.SetTable(tblHouseID);
                            }
                            else if (dataGridView9.CurrentCell.OwningColumn.Name == "ExchangeType")
                            {
                                frm.SetTable(tblExchangeType);
                            }


                            frm.SetPoint(MousePosition.X, MousePosition.Y);
                            frm.SetDataGridView(dataGridView9, tabControl1.SelectedIndex, "Item");
                            frm.Owner = this;
                            frm.ShowDialog(this);
                        }
                        dataGridView9.RefreshEdit();
                    }
                    break;
                case 9:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView10.SelectedCells.Count; i++)
                            {
                                if (dataGridView10.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView10.SelectedCells[i];
                                    dataGridView10_CellBeginEdit(null, null);
                                    dataGridView10.SelectedCells[i].Value = true;

                                    dataGridView10_CellEndEdit(null, null);
                                    dataGridView10.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView10.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView10.SelectedCells.Count; i++)
                            {
                                if (dataGridView10.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView10.SelectedCells[i];
                                    dataGridView10_CellBeginEdit(null, null);
                                    dataGridView10.SelectedCells[i].Value = false;

                                    dataGridView10_CellEndEdit(null, null);
                                    dataGridView10.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView10.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }

                        //09. 07. 02 김정협 링크리스트 제작
                        if (e.ClickedItem.Text == "List열기")
                        {
                            dataGridView10_CellBeginEdit(null, null);
                            LinkListView frm = new LinkListView();
                            frm.SetTable(tblMenufactureType);

                            frm.SetPoint(MousePosition.X, MousePosition.Y);
                            frm.SetDataGridView(dataGridView10, tabControl1.SelectedIndex, "Item");
                            frm.Owner = this;
                            frm.ShowDialog(this);
                        }

                        dataGridView10.RefreshEdit();
                    }
                    break;
                case 10:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView11.SelectedCells.Count; i++)
                            {
                                if (dataGridView11.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView11.SelectedCells[i];
                                    dataGridView11_CellBeginEdit(null, null);
                                    dataGridView11.SelectedCells[i].Value = true;

                                    dataGridView11_CellEndEdit(null, null);
                                    dataGridView11.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView11.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView11.SelectedCells.Count; i++)
                            {
                                if (dataGridView11.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView11.SelectedCells[i];
                                    dataGridView11_CellBeginEdit(null, null);
                                    dataGridView11.SelectedCells[i].Value = false;

                                    dataGridView11_CellEndEdit(null, null);
                                    dataGridView11.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView11.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        dataGridView11.RefreshEdit();
                    }
                    break;
                case 11:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView12.SelectedCells.Count; i++)
                            {
                                if (dataGridView12.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView12.SelectedCells[i];
                                    dataGridView12_CellBeginEdit(null, null);
                                    dataGridView12.SelectedCells[i].Value = true;

                                    dataGridView12_CellEndEdit(null, null);
                                    dataGridView12.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView12.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView12.SelectedCells.Count; i++)
                            {
                                if (dataGridView12.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView12.SelectedCells[i];
                                    dataGridView12_CellBeginEdit(null, null);
                                    dataGridView12.SelectedCells[i].Value = false;

                                    dataGridView12_CellEndEdit(null, null);
                                    dataGridView12.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView12.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }

                        //09. 07. 02 김정협 링크리스트 제작
                        if (e.ClickedItem.Text == "List열기")
                        {
                            dataGridView12_CellBeginEdit(null, null);
                            LinkListView frm = new LinkListView();
                            frm.SetTable(tblVillageID);

                            frm.SetPoint(MousePosition.X, MousePosition.Y);
                            frm.SetDataGridView(dataGridView12, tabControl1.SelectedIndex, "Item");
                            frm.Owner = this;
                            frm.ShowDialog(this);
                        }

                        dataGridView12.RefreshEdit();
                    }
                    break;
                case 12:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView13.SelectedCells.Count; i++)
                            {
                                if (dataGridView13.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView13.SelectedCells[i];
                                    dataGridView13_CellBeginEdit(null, null);
                                    dataGridView13.SelectedCells[i].Value = true;

                                    dataGridView13_CellEndEdit(null, null);
                                    dataGridView13.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView13.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView13.SelectedCells.Count; i++)
                            {
                                if (dataGridView13.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView13.SelectedCells[i];
                                    dataGridView13_CellBeginEdit(null, null);
                                    dataGridView13.SelectedCells[i].Value = false;

                                    dataGridView13_CellEndEdit(null, null);
                                    dataGridView13.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView13.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }

                        //09. 07. 02 김정협 링크리스트 제작
                        if (e.ClickedItem.Text == "List열기")
                        {
                            dataGridView13_CellBeginEdit(null, null);
                            LinkListView frm = new LinkListView();
                            frm.SetTable(tblExtraDamageType);

                            frm.SetPoint(MousePosition.X, MousePosition.Y);
                            frm.SetDataGridView(dataGridView13, tabControl1.SelectedIndex, "Item");
                            frm.Owner = this;
                            frm.ShowDialog(this);
                        }
                        dataGridView13.RefreshEdit();
                    }
                    break;
                case 13:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView14.SelectedCells.Count; i++)
                            {
                                if (dataGridView14.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView14.SelectedCells[i];
                                    dataGridView14_CellBeginEdit(null, null);
                                    dataGridView14.SelectedCells[i].Value = true;

                                    dataGridView14_CellEndEdit(null, null);
                                    dataGridView14.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView14.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView14.SelectedCells.Count; i++)
                            {
                                if (dataGridView14.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView14.SelectedCells[i];
                                    dataGridView14_CellBeginEdit(null, null);
                                    dataGridView14.SelectedCells[i].Value = false;

                                    dataGridView14_CellEndEdit(null, null);
                                    dataGridView14.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView14.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }


                        //09. 07. 02 김정협 링크리스트 제작
                        if (e.ClickedItem.Text == "List열기")
                        {
                            dataGridView14_CellBeginEdit(null, null);
                            LinkListView frm = new LinkListView();
                            frm.SetTable(tblAttribEnchantType);

                            frm.SetPoint(MousePosition.X, MousePosition.Y);
                            frm.SetDataGridView(dataGridView14, tabControl1.SelectedIndex, "Item");
                            frm.Owner = this;
                            frm.ShowDialog(this);
                        }

                        dataGridView14.RefreshEdit();
                    }
                    break;
                case 14:
                    {
                        if (e.ClickedItem.Text == "전체 선택")
                        {
                            for (int i = 0; i < dataGridView15.SelectedCells.Count; i++)
                            {
                                if (dataGridView15.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView15.SelectedCells[i];
                                    dataGridView15_CellBeginEdit(null, null);
                                    dataGridView15.SelectedCells[i].Value = true;

                                    dataGridView15_CellEndEdit(null, null);
                                    dataGridView15.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView15.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }
                        if (e.ClickedItem.Text == "전체 해제")
                        {
                            for (int i = 0; i < dataGridView15.SelectedCells.Count; i++)
                            {
                                if (dataGridView15.SelectedCells[i].ValueType == Type.GetType("System.Boolean"))
                                {
                                    m_bPaste = true;
                                    m_dgvcTemp = dataGridView15.SelectedCells[i];
                                    dataGridView15_CellBeginEdit(null, null);
                                    dataGridView15.SelectedCells[i].Value = false;

                                    dataGridView15_CellEndEdit(null, null);
                                    dataGridView15.RefreshEdit();
                                    //전체선택 후 셀에서 빠져나갈대 dataGridView1_CellEndEdit이벤트 발생시키지않기위하여
                                    objTemp = dataGridView15.CurrentCell.Value;
                                    m_bPaste = false;
                                }
                            }
                        }

                        //09. 07. 02 김정협 링크리스트 제작
                        if (e.ClickedItem.Text == "List열기")
                        {
                            dataGridView15_CellBeginEdit(null, null);
                            LinkListView frm = new LinkListView();
                            frm.SetTable(tblNPCAbility);

                            frm.SetPoint(MousePosition.X, MousePosition.Y);
                            frm.SetDataGridView(dataGridView15, tabControl1.SelectedIndex, "Item");
                            frm.Owner = this;
                            frm.ShowDialog(this);
                        }

                        dataGridView15.RefreshEdit();
                    }
                    break;

            }

        }

        private void contextMenuStrip1_Closed(object sender, ToolStripDropDownClosedEventArgs e)
        {
            contextMenuStrip1.Items.Clear();           
                     
        }

        private void btnColumn_Click(object sender, EventArgs e)
        {
            ColumnManager frm = new ColumnManager();
            switch (tabControl1.SelectedIndex)
            {
                case 0:
                    frm.SetDataGridView(dataGridView1);
                    break;
                case 1:
                    frm.SetDataGridView(dataGridView2);
                    break;
                case 2:
                    frm.SetDataGridView(dataGridView3);
                    break;
                case 3:
                    frm.SetDataGridView(dataGridView4);
                    break;
                case 4:
                    frm.SetDataGridView(dataGridView5);
                    break;
                case 5:
                    frm.SetDataGridView(dataGridView6);
                    break;
                case 6:
                    frm.SetDataGridView(dataGridView7);
                    break;
                case 7:
                    frm.SetDataGridView(dataGridView8);
                    break;
                case 8:
                    frm.SetDataGridView(dataGridView9);
                    break;
                case 9:
                    frm.SetDataGridView(dataGridView10);
                    break;
                case 10:
                    frm.SetDataGridView(dataGridView11);
                    break;
                case 11:
                    frm.SetDataGridView(dataGridView12);
                    break;
                case 12:
                    frm.SetDataGridView(dataGridView13);
                    break;
                case 13:
                    frm.SetDataGridView(dataGridView14);
                    break;
                case 14:
                    frm.SetDataGridView(dataGridView15);
                    break;

            }
            frm.SetCurrentTab(GetCurrentTab());
            frm.Owner = this;
            frm.ShowDialog(this);
        }

        private void dataGridView1_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            //dataGridView1.Rows[0].Visible = false;
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {                    
                    return;
                }
                if (e.RowIndex != -1)
                {
                    bool bSelected = false;
                    for (int i = 0; i < dataGridView1.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView1.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView1.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView1.CurrentCell = dataGridView1[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView1.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView1.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }

                    //09. 07. 02 김정협 링크리스트 열기
                    if (dataGridView1.CurrentCell.OwningColumn.Name == "Item Type" ||
                        dataGridView1.CurrentCell.OwningColumn.Name == "Use Type" ||
                        dataGridView1.CurrentCell.OwningColumn.Name == "Period Type" ||
                        dataGridView1.CurrentCell.OwningColumn.Name == "Price Type" ||
                        dataGridView1.CurrentCell.OwningColumn.Name == "Use Condition" ||
                        dataGridView1.CurrentCell.OwningColumn.Name == "Unit Type" ||
                        dataGridView1.CurrentCell.OwningColumn.Name == "Unit Class" ||
                        dataGridView1.CurrentCell.OwningColumn.Name == "Eqip Position" ||
                        dataGridView1.CurrentCell.OwningColumn.Name == "Item Grade")
                    {
                        contextMenuStrip1.Items.Add("List열기");                        
                        contextMenuStrip1.Show();
                    }
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }
            }
        }

        private void dataGridView2_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    return;
                }
                if (e.RowIndex != -1)
                {
                    bool bSelected = false;
                    for (int i = 0; i < dataGridView2.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView2.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView2.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView2.CurrentCell = dataGridView2[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView2.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView2.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }

                    //09. 07. 02 김정협 링크리스트 열기
                    if (dataGridView2.CurrentCell.OwningColumn.Name == "TYPE")
                    {
                        contextMenuStrip1.Items.Add("List열기");
                        contextMenuStrip1.Show();
                    }

                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }                
            }

        }

        private void dataGridView3_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    return;
                }
                if (e.RowIndex != -1)
                {
                    bool bSelected = false;
                    for (int i = 0; i < dataGridView3.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView3.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView3.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView3.CurrentCell = dataGridView3[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView3.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView3.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }
                    //09. 07. 02 김정협 링크리스트 열기
                    if (dataGridView3.CurrentCell.OwningColumn.Name == "Socket Type" ||
                        dataGridView3.CurrentCell.OwningColumn.Name == "ExtraDamageType" ||
                        dataGridView3.CurrentCell.OwningColumn.Name == "ExtraDamageResistType" ||
                        dataGridView3.CurrentCell.OwningColumn.Name == "ImmuneExtraDamageType")
                    {
                        contextMenuStrip1.Items.Add("List열기");
                        contextMenuStrip1.Show();
                    }       
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }
                     
            }
        }

        private void dataGridView4_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    return;
                }
                if (e.RowIndex != -1)
                {
                    bool bSelected = false;
                    for (int i = 0; i < dataGridView4.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView4.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView4.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView4.CurrentCell = dataGridView4[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView4.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView4.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }
                    //09. 07. 02 김정협 링크리스트 열기
                    if (dataGridView4.CurrentCell.OwningColumn.Name == "SocketDataType")
                    {
                        contextMenuStrip1.Items.Add("List열기");
                        contextMenuStrip1.Show();
                    }    
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }

               
            }
        }

        private void dataGridView5_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    return;
                }
                bool bSelected = false;
                if (e.RowIndex != -1)
                {
                    for (int i = 0; i < dataGridView5.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView5.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView5.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView5.CurrentCell = dataGridView5[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView5.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView5.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }
                    //09. 07. 02 김정협 링크리스트 열기
                    //소켓아이템으로 접근 한 것 일단 패스
                
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }
                
            }
        }

        private void dataGridView6_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    return;
                }
                bool bSelected = false;
                if (e.RowIndex != -1)
                {
                    for (int i = 0; i < dataGridView6.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView6.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView6.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView6.CurrentCell = dataGridView6[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView6.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView6.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }

                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }
            }
        }

        private void dataGridView7_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    return;
                }
                bool bSelected = false;
                if (e.RowIndex != -1)
                {
                    for (int i = 0; i < dataGridView7.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView7.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView7.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView7.CurrentCell = dataGridView7[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView7.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView7.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }
                    //09. 07. 02 김정협 링크리스트 열기
                    //아이템테이블로 접근하는건 일단 패스

                    for (int k = 1; k <= 15; k++)
                    {
                        string strTemp = "Unit Class_";
                        if (k < 10)
                            strTemp = strTemp + "0" + k;
                        else
                            strTemp = strTemp + k;

                        if (dataGridView7.CurrentCell.OwningColumn.Name == strTemp)
                        {
                            contextMenuStrip1.Items.Add("List열기");
                            contextMenuStrip1.Show();
                            break;
                        }
                    }
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }
                
            }
        }

        private void dataGridView8_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {                    
                    return;
                }
                if (e.RowIndex != -1)
                {
                    bool bSelected = false;
                    for (int i = 0; i < dataGridView8.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView8.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView8.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView8.CurrentCell = dataGridView8[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView8.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView8.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }
                    //09. 07. 02 김정협 링크리스트 열기
                    //아이템 아이디 참조한 것 일단 패스
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }
                
            }
        }

        private void dataGridView9_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    //09. 07. 09 김정협 사용자 마음대로 정렬순서정하게 하기 위함
                    if (e.RowIndex != -1 && dataGridView9.SelectedRows.Count > 0)
                    {
                        contextMenuStrip2.Items.Add("복사하기");
                        contextMenuStrip2.Items.Add("복사한 행 삽입");
                        contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    }
                    return;
                }
                if (e.RowIndex != -1)
                {
                    bool bSelected = false;
                    for (int i = 0; i < dataGridView9.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView9.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView9.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView9.CurrentCell = dataGridView9[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView9.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView9.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }
                    //09. 07. 02 김정협 링크리스트 열기
                    //아이템 테이블 참조한 것 일단 패스
                    //09. 07. 02 김정협 링크리스트 열기
                    if (dataGridView9.CurrentCell.OwningColumn.Name == "House_ID" ||
                        dataGridView9.CurrentCell.OwningColumn.Name == "ExchangeType")
                    {
                        contextMenuStrip1.Items.Add("List열기");
                        contextMenuStrip1.Show();
                    }
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }
                
            }
        }

        private void dataGridView10_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    //09. 07. 09 김정협 사용자 마음대로 정렬순서정하게 하기 위함
                    if (e.RowIndex != -1 && dataGridView10.SelectedRows.Count > 0)
                    {
                        contextMenuStrip2.Items.Add("복사하기");
                        contextMenuStrip2.Items.Add("복사한 행 삽입");
                        contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    }
                    return;
                }
                if (e.RowIndex != -1)
                {
                    bool bSelected = false;
                    for (int i = 0; i < dataGridView10.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView10.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView10.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView10.CurrentCell = dataGridView10[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView10.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView10.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }
                    //09. 07. 02 김정협 링크리스트 열기
                    //아이템테이블 링크한 것 일단 패스
                    if (dataGridView10.CurrentCell.OwningColumn.Name == "m_ManufactureType")
                    {
                        contextMenuStrip1.Items.Add("List열기");
                        contextMenuStrip1.Show();
                    }
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }

                
            }
        }

        private void dataGridView11_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    return;
                }
                if (e.RowIndex != -1)
                {
                    bool bSelected = false;
                    for (int i = 0; i < dataGridView11.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView11.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView11.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView11.CurrentCell = dataGridView11[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView11.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView11.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }
                    //09. 07. 02 김정협 링크리스트 열기
                    //ItemTable여는 것은 일단 패스
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }
                
            }
        }
        

        private void dataGridView12_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    //09. 07. 09 김정협 사용자 마음대로 정렬순서정하게 하기 위함
                    if (e.RowIndex != -1 && dataGridView12.SelectedRows.Count > 0)
                    {
                        contextMenuStrip2.Items.Add("복사하기");
                        contextMenuStrip2.Items.Add("복사한 행 삽입"); 
                        contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    }
                    return;
                }
                if (e.RowIndex != -1)
                {
                    bool bSelected = false;
                    for (int i = 0; i < dataGridView12.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView12.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView12.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView12.CurrentCell = dataGridView12[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView12.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView12.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }
                    //09. 07. 02 김정협 링크리스트 열기
                    //ManufactureTable은 일단 패스
                    if (dataGridView12.CurrentCell.OwningColumn.Name == "Village ID")
                    {
                        contextMenuStrip1.Items.Add("List열기");
                        contextMenuStrip1.Show();
                    }
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }

                
            }
        }

        private void dataGridView13_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    return;
                }
                if (e.RowIndex != -1)
                {
                    bool bSelected = false;
                    for (int i = 0; i < dataGridView13.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView13.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView13.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView13.CurrentCell = dataGridView13[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView13.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView13.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }
                    //09. 07. 02 김정협 링크리스트 열기

                    if (dataGridView13.CurrentCell.OwningColumn.Name == "ExtraDamageType")
                    {
                        contextMenuStrip1.Items.Add("List열기");
                        contextMenuStrip1.Show();
                    }
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }
                
            }
        }

        private void dataGridView14_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    return;
                }
                if (e.RowIndex != -1)
                {
                    bool bSelected = false;
                    for (int i = 0; i < dataGridView14.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView14.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView14.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView14.CurrentCell = dataGridView14[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView14.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView14.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }
                    //09. 07. 02 김정협 링크리스트 열기
                    if (dataGridView14.CurrentCell.OwningColumn.Name == "Enchant Type")
                    {
                        contextMenuStrip1.Items.Add("List열기");
                        contextMenuStrip1.Show();
                    }
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }

                
            }
        }

        private void dataGridView15_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.ColumnIndex == -1)
                {
                    return;
                }
                if (e.RowIndex != -1)
                {
                    bool bSelected = false;
                    for (int i = 0; i < dataGridView15.SelectedCells.Count; i++)
                    {
                        if (e.ColumnIndex == dataGridView15.SelectedCells[i].ColumnIndex && e.RowIndex == dataGridView15.SelectedCells[i].RowIndex)
                        {
                            bSelected = true;
                            break;
                        }
                    }
                    if (!bSelected)
                    {
                        dataGridView15.CurrentCell = dataGridView15[e.ColumnIndex, e.RowIndex];
                    }

                    if (dataGridView15.CurrentCell.ValueType == Type.GetType("System.Boolean") && bSelected && dataGridView15.SelectedCells.Count > 1)
                    {
                        contextMenuStrip1.Items.Add("전체 선택");
                        contextMenuStrip1.Items.Add("전체 해제");
                        contextMenuStrip1.Show();
                    }
                    //09. 07. 02 김정협 링크리스트 열기
                    if (dataGridView15.CurrentCell.OwningColumn.Name == "NPC_ABILITY_ID")
                    {
                        contextMenuStrip1.Items.Add("List열기");
                        contextMenuStrip1.Show();
                    }
                }
                else
                {
                    contextMenuStrip2.Items.Add("필터링 설정");
                    contextMenuStrip2.Items.Add("필터링 해제");
                    contextMenuStrip2.Show(MousePosition.X, MousePosition.Y);
                    m_nFilteringColumnIndex = e.ColumnIndex;
                }

               
            }
        }

        private void contextMenuStrip2_Closed(object sender, ToolStripDropDownClosedEventArgs e)
        {
            contextMenuStrip2.Items.Clear();
        }

        private void contextMenuStrip2_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            if (e.ClickedItem.Text == "필터링 설정")
            {

                Filtering frm = new Filtering();
                switch (tabControl1.SelectedIndex)
                {
                    case 0:
                        {
                            frm.SetDataGridView(dataGridView1);
                        }
                        break;
                    case 1:
                        {
                            frm.SetDataGridView(dataGridView2);
                        }
                        break;
                    case 2:
                        {
                            frm.SetDataGridView(dataGridView3);
                        }
                        break;
                    case 3:
                        {
                            frm.SetDataGridView(dataGridView4);
                        }
                        break;
                    case 4:
                        {
                            frm.SetDataGridView(dataGridView5);
                        }
                        break;
                    case 5:
                        {
                            frm.SetDataGridView(dataGridView6);
                        }
                        break;
                    case 6:
                        {
                            frm.SetDataGridView(dataGridView7);
                        }
                        break;
                    case 7:
                        {
                            frm.SetDataGridView(dataGridView8);
                        }
                        break;
                    case 8:
                        {
                            frm.SetDataGridView(dataGridView9);
                        }
                        break;
                    case 9:
                        {
                            frm.SetDataGridView(dataGridView10);
                        }
                        break;
                    case 10:
                        {
                            frm.SetDataGridView(dataGridView11);
                        }
                        break;
                    case 11:
                        {
                            frm.SetDataGridView(dataGridView12);
                        }
                        break;
                    case 12:
                        {
                            frm.SetDataGridView(dataGridView13);
                        }
                        break;
                    case 13:
                        {
                            frm.SetDataGridView(dataGridView14);

                        }
                        break;
                    case 14:
                        {
                            frm.SetDataGridView(dataGridView15);
                        }

                        break;
                }
                //09. 06. 10 필터링 결과내 재검색 기능
                frm.SetIsFiltering(m_IsFiltering);

                frm.SetFilterColumnIndex(m_nFilteringColumnIndex);
                frm.Owner = this;
                frm.ShowDialog(this);

                //09. 06. 10 필터링 결과내 재검색 기능
                m_IsFiltering = true;
            }

            if (e.ClickedItem.Text == "필터링 해제")
            {
                switch (tabControl1.SelectedIndex)
                {
                    case 0:
                        {
                            for (int i = 0; i < dataGridView1.RowCount; i++)
                            {
                                if (dataGridView1.Rows[i].Visible == false)
                                    dataGridView1.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 1:
                        {
                            for (int i = 0; i < dataGridView2.RowCount; i++)
                            {
                                if (dataGridView2.Rows[i].Visible == false)
                                    dataGridView2.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 2:
                        {
                            for (int i = 0; i < dataGridView3.RowCount; i++)
                            {
                                if (dataGridView3.Rows[i].Visible == false)
                                    dataGridView3.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 3:
                        {
                            for (int i = 0; i < dataGridView4.RowCount; i++)
                            {
                                if (dataGridView4.Rows[i].Visible == false)
                                    dataGridView4.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 4:
                        {
                            for (int i = 0; i < dataGridView5.RowCount; i++)
                            {
                                if (dataGridView5.Rows[i].Visible == false)
                                    dataGridView5.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 5:
                        {
                            for (int i = 0; i < dataGridView6.RowCount; i++)
                            {
                                if (dataGridView6.Rows[i].Visible == false)
                                    dataGridView6.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 6:
                        {
                            for (int i = 0; i < dataGridView7.RowCount; i++)
                            {
                                if (dataGridView7.Rows[i].Visible == false)
                                    dataGridView7.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 7:
                        {
                            for (int i = 0; i < dataGridView8.RowCount; i++)
                            {
                                if (dataGridView8.Rows[i].Visible == false)
                                    dataGridView8.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 8:
                        {
                            for (int i = 0; i < dataGridView9.RowCount; i++)
                            {
                                if (dataGridView9.Rows[i].Visible == false)
                                    dataGridView9.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 9:
                        {
                            for (int i = 0; i < dataGridView10.RowCount; i++)
                            {
                                if (dataGridView10.Rows[i].Visible == false)
                                    dataGridView10.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 10:
                        {
                            for (int i = 0; i < dataGridView11.RowCount; i++)
                            {
                                if (dataGridView11.Rows[i].Visible == false)
                                    dataGridView11.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 11:
                        {
                            for (int i = 0; i < dataGridView12.RowCount; i++)
                            {
                                if (dataGridView12.Rows[i].Visible == false)
                                    dataGridView12.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 12:
                        {
                            for (int i = 0; i < dataGridView13.RowCount; i++)
                            {
                                if (dataGridView13.Rows[i].Visible == false)
                                    dataGridView13.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 13:
                        {
                            for (int i = 0; i < dataGridView14.RowCount; i++)
                            {
                                if (dataGridView14.Rows[i].Visible == false)
                                    dataGridView14.Rows[i].Visible = true;
                            }
                        }
                        break;
                    case 14:
                        {
                            for (int i = 0; i < dataGridView15.RowCount; i++)
                            {
                                if (dataGridView15.Rows[i].Visible == false)
                                    dataGridView15.Rows[i].Visible = true;
                            }
                        }
                        break;


                }
            }

            //09. 07. 09 김정협 복사하기 기능은 오직 ManufactureVillage ManufactureTable에서만 사용
            if (e.ClickedItem.Text == "복사하기")
            {
                m_CopyList.Clear();
                if (tabControl1.SelectedIndex == 8)
                {
                    for (int i = 0; i < dataGridView9.SelectedRows.Count; i++)
                    {
                        m_CopyList.Add(Convert.ToInt32(dataGridView9.SelectedRows[i].Cells["HideIndex"].Value.ToString()));
                    }
                }
                if(tabControl1.SelectedIndex == 9)
                {
                    for (int i = 0; i < dataGridView10.SelectedRows.Count; i++)
                    {
                        m_CopyList.Add(Convert.ToInt32(dataGridView10.SelectedRows[i].Cells["HideIndex"].Value.ToString()));
                    }
                }
                else if (tabControl1.SelectedIndex == 11)
                {
                    for (int i = 0; i < dataGridView12.SelectedRows.Count; i++)
                    {
                        m_CopyList.Add(Convert.ToInt32(dataGridView12.SelectedRows[i].Cells["HideIndex"].Value.ToString()));
                    }
                }                
                m_CopyList.Sort();
            }

            if (e.ClickedItem.Text == "복사한 행 삽입")
            {
                if (m_CopyList.Count <= 0)
                {
                    return;
                }
                DataGridView dgvCurrent = null;
                if (tabControl1.SelectedIndex == 8)
                {
                    dgvCurrent = dataGridView9;
                }
                else if (tabControl1.SelectedIndex == 9)
                {
                    dgvCurrent = dataGridView10;
                }
                else if (tabControl1.SelectedIndex == 11)
                {
                    dgvCurrent = dataGridView12;
                }                
                int nTempCurrentIndex = Convert.ToInt32(dgvCurrent["HideIndex", dgvCurrent.CurrentCell.RowIndex].Value.ToString());

                for (int i = 0; i < m_CopyList.Count; i++)
                {
                    if (nTempCurrentIndex == (int)m_CopyList[i])
                    {
                        return;
                    }
                }
                if (dgvCurrent.CurrentCell.RowIndex <= (dgvCurrent.RowCount - 1) / 2)
                {
                    dgvCurrent.CurrentCell = dgvCurrent[0, dgvCurrent.RowCount - 1];
                }
                else
                {
                    dgvCurrent.CurrentCell = dgvCurrent[0, 0];
                }
                
                for (int i = 0; i < m_CopyList.Count; i++)
                {
                    int nLeft = 0;
                    int nRight = dgvCurrent.RowCount - 1;
                    while (nLeft <= nRight)
                    {
                        int nMid = (nLeft + nRight) / 2;

                        int nHideIndex = Convert.ToInt32(dgvCurrent["HideIndex", nMid].Value.ToString());
                        int nIndex = (int)m_CopyList[i];
                        if (nHideIndex == nIndex)
                        {
                            dgvCurrent["HideIndex", nMid].Value = i;
                            break;
                        }
                        if (nHideIndex < nIndex)
                        {
                            nLeft = nMid + 1;
                        }
                        if (nHideIndex > nIndex)
                        {
                            nRight = nMid - 1;
                        }
                    }
                }

                int nLeftNum = 0;
                int nRightNum = dgvCurrent.RowCount - 1;
                int nRow = -1;
                while (nLeftNum <= nRightNum)
                {
                    int nMid = (nLeftNum + nRightNum) / 2;

                    int nHideIndex = Convert.ToInt32(dgvCurrent["HideIndex", nMid].Value.ToString());

                    if (nHideIndex == nTempCurrentIndex)
                    {
                        nRow = dgvCurrent["HideIndex", nMid].RowIndex;
                        break;
                    }
                    if (nHideIndex < nTempCurrentIndex)
                    {
                        nLeftNum = nMid + 1;
                    }
                    if (nHideIndex > nTempCurrentIndex)
                    {
                        nRightNum = nMid - 1;
                    }
                }
                for (int i = dgvCurrent.RowCount - 1; i >= nRow; i--)
                {
                    dgvCurrent["HideIndex", i].Value = Convert.ToInt32(dgvCurrent["HideIndex", i].Value.ToString()) + m_CopyList.Count;
                }
                
                //dgvCurrent.RefreshEdit();

                int nCurrentHideIndex = -1; 
                for (int i = 0; i < m_CopyList.Count; i++)
                {
                    dgvCurrent["HideIndex", 0].Value = nTempCurrentIndex + i;
                    nCurrentHideIndex = nTempCurrentIndex + i;
                    
                }
                
                int nLeft1 = 0;
                int nRight1 = dgvCurrent.RowCount - 1;
                
                while (nLeft1 <= nRight1)
                {
                    int nMid = (nLeft1 + nRight1) / 2;

                    int nHideIndex = Convert.ToInt32(dgvCurrent["HideIndex", nMid].Value.ToString());

                    if (nHideIndex == nCurrentHideIndex)
                    {
                        dgvCurrent.CurrentCell = dgvCurrent[0, nMid];
                        break;
                    }
                    if (nHideIndex < nCurrentHideIndex)
                    {
                        nLeft1 = nMid + 1;
                    }
                    if (nHideIndex > nCurrentHideIndex)
                    {
                        nRight1 = nMid - 1;
                    }
                }
                m_bCopy = true;
                m_bSaveEnd = false;
                m_CopyList.Clear();


                //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여
                if (tabControl1.SelectedIndex == 9)
                {
                    for (int nRowHeader = 0; nRowHeader < dataGridView10.RowCount; nRowHeader++)
                    {
                        dataGridView10.Rows[nRowHeader].HeaderCell.Value = dataGridView10["Manufacture ID", nRowHeader].Value.ToString() + "     " + dataGridView10["Manufacture Name", nRowHeader].Value.ToString();
                    }
                }
            }
        }

        

        void UndoKeyboardControl(DataGridView dgvCurrent,DataTable tblCurrent, sUndoRedo sUndoTemp, sUndoRedo sRedoTemp, int nTabPage)
        {
            tabControl1.SelectedIndex = nTabPage;
            if (sUndoTemp.nType == 1) ////1. 수정(CellEditEnd를거침) 2. ADD 3. Delete
            {
                if (sUndoTemp.nColumnIndex != 1)//ID등 정렬기준값
                {
                    sRedoTemp.nType = sUndoTemp.nType;
                    sRedoTemp.nTabIndex = sUndoTemp.nTabIndex;
                    sRedoTemp.nColumnIndex = sUndoTemp.nColumnIndex;
                    sRedoTemp.nRowIndex = sUndoTemp.nRowIndex;
                    sRedoTemp.objUndoRedo = dgvCurrent[sUndoTemp.nColumnIndex, sUndoTemp.nRowIndex].Value;

                    //09. 07. 02 김정협 Undo그룹짓기
                    sRedoTemp.nGroupID = sUndoTemp.nGroupID;

                    sRedoTemp.sModyfyList = sUndoTemp.sModyfyList;
                    if (sRedoTemp.sModyfyList.nTabIndex != -1)
                    {
                        m_ModifyIDList.Remove(sRedoTemp.sModyfyList);
                    }

                    dgvCurrent[sUndoTemp.nColumnIndex, sUndoTemp.nRowIndex].Value = sUndoTemp.objUndoRedo;

                    //Undo/Redo시 Cell이동에 따른 CellEditEnd이벤트가 발생하는 것을 막기위하여
                    objTemp = dgvCurrent.CurrentCell.Value;
                    dgvCurrent.CurrentCell = dgvCurrent[sUndoTemp.nColumnIndex, sUndoTemp.nRowIndex];
                    UndoRedoLinkDataChange(nTabPage, dgvCurrent);
                }
                else
                {
                    for (int i = 0; i < dgvCurrent.Rows.Count; i++)
                    {
                        if (dgvCurrent["IndexKey", i].Value.ToString() == Convert.ToString(sUndoTemp.nRowIndex))
                        {
                            sRedoTemp.nType = sUndoTemp.nType;
                            sRedoTemp.nTabIndex = sUndoTemp.nTabIndex;
                            sRedoTemp.nColumnIndex = sUndoTemp.nColumnIndex;
                            sRedoTemp.nRowIndex = sUndoTemp.nRowIndex;
                            sRedoTemp.objUndoRedo = dgvCurrent[sUndoTemp.nColumnIndex, i].Value;

                            //09. 07. 02 김정협 Undo그룹짓기
                            sRedoTemp.nGroupID = sUndoTemp.nGroupID;

                            sRedoTemp.sModyfyList = sUndoTemp.sModyfyList;
                            if (sRedoTemp.sModyfyList.nTabIndex != -1)
                            {
                                m_ModifyIDList.Remove(sRedoTemp.sModyfyList);
                            }

                            dgvCurrent[sUndoTemp.nColumnIndex, i].Value = sUndoTemp.objUndoRedo;
                            //Undo/Redo시 Cell이동에 따른 CellEditEnd이벤트가 발생하는 것을 막기위하여
                            objTemp = dgvCurrent.CurrentCell.Value;

                            for (int k = 0; k < dgvCurrent.Rows.Count; k++)
                            {
                                if (dgvCurrent["IndexKey", k].Value.ToString() == Convert.ToString(sUndoTemp.nRowIndex))
                                {
                                    dgvCurrent.CurrentCell = dgvCurrent[sUndoTemp.nColumnIndex, k];                                    
                                    break;
                                }
                            }
                            UndoRedoLinkDataChange(nTabPage, dgvCurrent);

                            SetCellBackgroundColorForDB(nTabPage);
                            ColorRefresh(true);
                            break;
                        }
                    }

                }
                m_RedoStack.Push(sRedoTemp);
                textBox2.Text = Convert.ToString(m_ModifyIDList.Count);
            }
            else if (sUndoTemp.nType == 2)
            {
                //if(sUndoTemp.sModyfyList.nIndexKey == tblItem.Rows[i]
                //09. 07. 02 김정협 언두리두그룹화위해 매개변수 추가
                UserAddUndoRow(sUndoTemp.sModyfyList.nIndexKey, dgvCurrent, tblCurrent, sUndoTemp.sModyfyList, sUndoTemp.nGroupID);
                m_ModifyIDList.Remove(sUndoTemp.sModyfyList);

            }
            else if (sUndoTemp.nType == 3)
            {
                tblCurrent.Columns[1].AllowDBNull = true;
                tblCurrent.Rows.Add();

                DataRow drUndoRow = tblCurrent.Rows[tblCurrent.Rows.Count - 1];

                sRedoTemp.nTabIndex = sUndoTemp.nTabIndex;
                sRedoTemp.nType = sUndoTemp.nType;
                //sRedoTemp.sDeleteList
                for (int i = 0; i < tblCurrent.Columns.Count; i++)
                {
                    drUndoRow[i] = sUndoTemp.sDeleteList.drOriginalRow[i];
                }
                //drUndoRow[1] = sUndoTemp.sDeleteList.drOriginalRow[1];
                if (sUndoTemp.sDeleteList.nTabIndex != -1)
                {
                    sRedoTemp.nRowIndex = Convert.ToInt32(tblCurrent.Rows[tblCurrent.Rows.Count - 1]["IndexKey"].ToString());
                    m_DeleteRowList.Remove(sUndoTemp.sDeleteList);
                }

                //09. 07. 02 김정협 Undo그룹짓기
                sRedoTemp.nGroupID = sUndoTemp.nGroupID;
                m_RedoStack.Push(sRedoTemp);

            }
            dgvCurrent.RefreshEdit();
        }

        void RedoKeyboardControl(DataGridView dgvCurrent, DataTable tblCurrent, sUndoRedo sUndoTemp, sUndoRedo sRedoTemp, int nTabPage)
        {
            tabControl1.SelectedIndex = nTabPage;
            if (sRedoTemp.nType == 1)
            {
                if (sRedoTemp.nColumnIndex != 1)
                {
                    sUndoTemp.nType = sRedoTemp.nType;
                    sUndoTemp.nTabIndex = sRedoTemp.nTabIndex;
                    sUndoTemp.nColumnIndex = sRedoTemp.nColumnIndex;
                    sUndoTemp.nRowIndex = sRedoTemp.nRowIndex;
                    sUndoTemp.objUndoRedo = dgvCurrent[sRedoTemp.nColumnIndex, sRedoTemp.nRowIndex].Value;

                    //09. 07. 02 김정협 Undo그룹짓기
                    sUndoTemp.nGroupID = sRedoTemp.nGroupID;

                    sUndoTemp.sModyfyList = sRedoTemp.sModyfyList;
                    if (sUndoTemp.sModyfyList.nTabIndex != -1)
                    {
                        m_ModifyIDList.Add(sUndoTemp.sModyfyList);
                    }

                    dgvCurrent[sRedoTemp.nColumnIndex, sRedoTemp.nRowIndex].Value = sRedoTemp.objUndoRedo;
                    //Undo/Redo시 Cell이동에 따른 CellEditEnd이벤트가 발생하는 것을 막기위하여
                    objTemp = dgvCurrent.CurrentCell.Value;
                    dgvCurrent.CurrentCell = dgvCurrent[sRedoTemp.nColumnIndex, sRedoTemp.nRowIndex];

                    UndoRedoLinkDataChange(nTabPage, dgvCurrent);
                }
                else
                {
                    for (int i = 0; i < dgvCurrent.Rows.Count; i++)
                    {
                        if (dgvCurrent["IndexKey", i].Value.ToString() == Convert.ToString(sRedoTemp.nRowIndex))
                        {
                            sUndoTemp.nType = sRedoTemp.nType;
                            sUndoTemp.nTabIndex = sRedoTemp.nTabIndex;
                            sUndoTemp.nColumnIndex = sRedoTemp.nColumnIndex;
                            sUndoTemp.nRowIndex = sRedoTemp.nRowIndex;
                            sUndoTemp.objUndoRedo = dgvCurrent[sRedoTemp.nColumnIndex, i].Value;

                            //09. 07. 02 김정협 Undo그룹짓기
                            sUndoTemp.nGroupID = sRedoTemp.nGroupID;

                            sUndoTemp.sModyfyList = sRedoTemp.sModyfyList;
                            if (sUndoTemp.sModyfyList.nTabIndex != -1)
                            {
                                m_ModifyIDList.Add(sUndoTemp.sModyfyList);
                            }

                            dgvCurrent[sRedoTemp.nColumnIndex, i].Value = sRedoTemp.objUndoRedo;

                            //Undo/Redo시 Cell이동에 따른 CellEditEnd이벤트가 발생하는 것을 막기위하여
                            objTemp = dgvCurrent.CurrentCell.Value;
                            for (int k = 0; k < dgvCurrent.Rows.Count; k++)
                            {
                                if (dgvCurrent["IndexKey", k].Value.ToString() == Convert.ToString(sUndoTemp.nRowIndex))
                                {
                                    dgvCurrent.CurrentCell = dgvCurrent.CurrentCell = dgvCurrent[sRedoTemp.nColumnIndex, k]; 
                                    break;
                                }
                            }
                            
                            UndoRedoLinkDataChange(nTabPage, dgvCurrent);
                            SetCellBackgroundColorForDB(nTabPage);
                            ColorRefresh(true);
                            break;
                        }
                    }

                }
                m_UndoStack.Push(sUndoTemp);
                textBox2.Text = Convert.ToString(m_ModifyIDList.Count);
            }
            else if (sRedoTemp.nType == 2)
            {
                tblCurrent.Rows.Add();
                DataRow drRow = tblCurrent.Rows[tblCurrent.Rows.Count - 1];
                for (int i = 0; i < tblCurrent.Columns.Count; i++)
                {
                    drRow[i] = sRedoTemp.drAdd[i];
                }

                sUndoRedo sUndoData = new sUndoRedo();
                sUndoData.nTabIndex = 0;
                sUndoData.nType = 2;//2. Add 수정
                sUndoData.sModyfyList = sRedoTemp.sModyfyList;

                //09. 07. 02 김정협 Undo그룹짓기
                sUndoData.nGroupID = sRedoTemp.nGroupID;

                m_UndoStack.Push(sUndoData);

                m_ModifyIDList.Add(sUndoData.sModyfyList);
            }
            else if (sRedoTemp.nType == 3)
            {
                int nValue = -1;
                for (int i = 0; i < tblCurrent.Rows.Count; i++)
                {
                    if (tblCurrent.Rows[i].RowState == DataRowState.Deleted)
                    {
                        continue;
                    }
                    if (tblCurrent.Rows[i]["IndexKey"].ToString() == sRedoTemp.nRowIndex.ToString())
                    {
                        nValue = i;
                        break;
                    }
                }
                UserDeletingRow(nValue, dgvCurrent, tblCurrent, true, nTabPage);
            }
            dgvCurrent.RefreshEdit();
        }

        void UndoRedoLinkDataChange(int nTabPage, DataGridView dgvCurrent)
        {
            DataGridViewCell dgvCurrentCell;
            dgvCurrentCell = dgvCurrent.CurrentCell;
            int nIndexRow = dgvCurrentCell.RowIndex;
            switch(nTabPage)
            {
                case 0:
                    {
                        //09. 06. 06 김정협
                        if (dgvCurrentCell.OwningColumn.Name == "Item Type")
                        {
                            DataRow dr = tblItemType.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView1["Item Type_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView1["ITEMTYPE_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "Use Type")
                        {
                            DataRow dr = tblUseType.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView1["Use Type_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView1["USETYPE_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "Period Type")
                        {
                            DataRow dr = tblPeriodType.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView1["Period Type_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView1["PERIODTYPE_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "Price Type")
                        {
                            DataRow dr = tblPriceType.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView1["Price Type_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView1["PRICETYPE_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "Use Condition")
                        {
                            DataRow dr = tblUseCondition.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView1["Use Condition_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView1["USECONDITION_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "Unit Type")
                        {
                            DataRow dr = tblUnitType.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView1["Unit Type_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView1["UNITTYPE_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "Unit Class")
                        {
                            DataRow dr = tblUnitClass.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView1["Unit Class_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView1["UNITCLASS_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "Eqip Position")
                        {
                            DataRow dr = tblEqipPosition.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView1["Eqip Position_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView1["EQIPPOSITION_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "Item Grade")
                        {
                            DataRow dr = tblItemGrade.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView1["Item Grade_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView1["ITEMGRADE_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }
                    }
                    break;
                case 1:
                    {
                        if (dgvCurrentCell.OwningColumn.Name == "TYPE")
                        {
                            DataRow dr = tblSpecialAbilityType.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView2["TYPE_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView2["TYPE_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }
                    }
                    break;
                case 2:
                    {
                        if (dgvCurrentCell.OwningColumn.Name == "Socket Type")
                        {
                            DataRow dr = tblSocketDataType.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView3["Socket Type_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView3["Socket Type_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "ExtraDamageType")
                        {
                            DataRow dr = tblExtraDamageType.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView3["ExtraDamageType_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView3["ExtraDamageType_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "ExtraDamageResistType")
                        {
                            DataRow dr = tblExtraDamageType.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView3["ExtraDamageResistType_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView3["ExtraDamageResistType_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "ImmuneExtraDamageType")
                        {
                            DataRow dr = tblExtraDamageType.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView3["ImmuneExtraDamageType_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView3["ImmuneExtraDamageType_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }
                    }
                    break;
                case 3:
                    {
                        if (dgvCurrentCell.OwningColumn.Name == "SocketDataType")
                        {
                            DataRow dr = tblSocketDataType.Rows.Find(dataGridView4["SocketDataType", nIndexRow].Value.ToString());
                            if (dr != null)
                            {
                                dataGridView4["SocketDataType_", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                //dgvCurrentCell.Value = objTemp;
                                dataGridView4["SocketDataType", nIndexRow].Value = objTemp;
                            }
                        }
                    }
                    break;
                case 4:
                    {
                        if (dgvCurrentCell.OwningColumn.Name == "OptionID")
                        {
                            DataRow dr = tblSocketItem.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView5["Option_Des", nIndexRow].Value = dr["Description"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }
                    }
                    break;
                case 5:
                    {
                        //없음
                    }
                    break;
                case 6:
                    {
                        if (dgvCurrentCell.OwningColumn.Name == "BoxID")
                        {
                            DataRow dr = tblItem.Rows.Find(dataGridView7["BoxID", nIndexRow].Value.ToString());
                            if (dr != null)
                            {
                                dataGridView7["BoxName", nIndexRow].Value = dr["Name"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                //dgvCurrentCell.Value = objTemp;
                                dataGridView7["BoxID", nIndexRow].Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "Key ID")
                        {
                            DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView7["Key Name", nIndexRow].Value = dr["Name"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }



                        for (int i = 1; i <= 15; i++)
                        {
                            string strTemp = "Unit Class_";

                            if (i < 10)
                                strTemp = strTemp + "0" + i;
                            else
                                strTemp = strTemp + i;

                            if (dgvCurrentCell.OwningColumn.Name == strTemp)
                            {
                                DataRow dr = tblUnitClass.Rows.Find(dgvCurrentCell.Value.ToString());
                                if (dr != null)
                                {
                                    strTemp = strTemp + "_";
                                    dataGridView7[strTemp, nIndexRow].Value = dr["Des"].ToString();
                                    strTemp = strTemp + "C";
                                    dataGridView7[strTemp, nIndexRow].Value = dr["CODE"].ToString();
                                }
                                else
                                {
                                    MessageBox.Show("존재하지 않는 값입니다.");
                                    dgvCurrentCell.Value = objTemp;
                                }
                            }
                        }
                    }
                    break;
                case 7:
                    {
                        if (dgvCurrentCell.OwningColumn.Name == "Item ID")
                        {
                            DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView8["Item Name", nIndexRow].Value = dr["Name"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }
                    }
                    break;
                case 8:
                    {
                        if (dgvCurrentCell.OwningColumn.Name == "SourceItemID")
                        {
                            DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView9["Exchange_Des1", nIndexRow].Value = dr["Name"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                //dgvCurrentCell.Value = objTemp;
                                dataGridView9["SourceItemID", nIndexRow].Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "ExchangeType")
                        {
                            DataRow dr = tblExchangeType.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView9["ExchangeType_Enum", nIndexRow].Value = dr["Enum"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "House_ID")
                        {
                            DataRow dr = tblHouseID.Rows.Find(dataGridView9["House_ID", nIndexRow].Value.ToString());
                            if (dr != null)
                            {
                                dataGridView9["House_Enum", nIndexRow].Value = dr["Enum"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        if (dgvCurrentCell.OwningColumn.Name == "ResultItemID")
                        {
                            DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView9["Exchange_Des2", nIndexRow].Value = dr["Name"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                    }
                    break;
                case 9:
                    {
                        if (dgvCurrentCell.OwningColumn.Name == "m_ManufactureType")
                        {
                            DataRow dr = tblMenufactureType.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dgvCurrentCell.Value.ToString() == "0")
                            {
                                dataGridView10["ManufactureType_", nIndexRow].Value = "";
                                dataGridView10["ManufactureType_C", nIndexRow].Value = "";
                            }
                            else
                            {
                                if (dr != null)
                                {
                                    dataGridView10["ManufactureType_", nIndexRow].Value = dr["Des"].ToString();
                                    dataGridView10["ManufactureType_C", nIndexRow].Value = dr["CODE"].ToString();
                                }
                                else
                                {
                                    MessageBox.Show("존재하지 않는 값입니다.");
                                    dgvCurrentCell.Value = objTemp;
                                }
                            }
                        }
                        //09. 06. 06 김정협 자동화를 위하여
                        if (dgvCurrentCell.OwningColumn.Name == "Result Group ID")
                        {
                            DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView10["Result Name", nIndexRow].Value = dr["Name"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                        //09. 06. 06 김정협 자동화를 위하여
                        if (dgvCurrentCell.OwningColumn.Name == "Material ID")
                        {
                            DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView10["Material Name", nIndexRow].Value = dr["Name"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }

                    }
                    break;
                case 10:
                    {
                        //09. 06. 06 김정협 자동화를 위하여
                        if (dgvCurrentCell.OwningColumn.Name == "Item ID")
                        {
                            DataRow dr = tblItem.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView11["Item Name", nIndexRow].Value = dr["Name"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }
                    }
                    break;
                case 11:
                    {
                        //09. 06. 06 김정협 자동화를 위하여
                        if (dgvCurrentCell.OwningColumn.Name == "Manufacture ID")
                        {
                            DataRow dr = null;
                            for (int i = 0; i < tblManufactureTable.Rows.Count; i++)
                            {
                                if (tblManufactureTable.Rows[i]["Manufacture ID"].ToString() == dgvCurrentCell.Value.ToString())
                                {
                                    dr = tblManufactureTable.Rows[i];
                                    break;
                                }
                            }
                            //= tblManufactureTable.Rows.Find(dataGridView12["Manufacture ID", nIndexRow].Value.ToString());

                            if (dr != null)
                            {
                                dataGridView12["Manufacture Name", nIndexRow].Value = dr["Manufacture Name"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }
                        //09. 06. 06 김정협 자동화를 위하여
                        if (dgvCurrentCell.OwningColumn.Name == "Village ID")
                        {
                            DataRow dr = tblVillageID.Rows.Find(dgvCurrentCell.Value.ToString());
                            if (dr != null)
                            {
                                dataGridView12["Village Name", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView12["Village Enum", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                            }
                        }
                    }
                    break;
                case 12:
                    {
                        //09. 06. 06 김정협 자동화를 위하여
                        if (dgvCurrentCell.OwningColumn.Name == "ExtraDamageType")
                        {
                            DataRow dr = tblExtraDamageType.Rows.Find(dataGridView13["ExtraDamageType", nIndexRow].Value.ToString());
                            if (dr != null)
                            {
                                dataGridView13["ExtraDamageType_", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView13["ExtraDamageType_C", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                //dgvCurrentCell.Value = objTemp;
                                dataGridView13["ExtraDamageType", nIndexRow].Value = objTemp;
                            }
                        }
                    }
                    break;
                case 13:
                    {
                        //09. 06. 06 김정협 자동화를 위하여
                        if (dgvCurrentCell.OwningColumn.Name == "Enchant Type")
                        {
                            DataRow dr = tblAttribEnchantType.Rows.Find(dataGridView14["Enchant Type", nIndexRow].Value.ToString());
                            if (dr != null)
                            {
                                dataGridView14["Enchant Type_", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dgvCurrentCell.Value = objTemp;
                                dataGridView14["Enchant Type", nIndexRow].Value = objTemp;
                            }
                        }

                    }
                    break;
                case 14:
                    {
                        //09. 06. 06 김정협 자동화를 위하여
                        if (dgvCurrentCell.OwningColumn.Name == "NPC_ABILITY_ID")
                        {
                            DataRow dr = tblNPCAbility.Rows.Find(dataGridView15["NPC_ABILITY_ID", nIndexRow].Value.ToString());
                            if (dr != null)
                            {
                                dataGridView15["NPC_ABILITY_ID_C", nIndexRow].Value = dr["Des"].ToString();
                                dataGridView15["NPC_ABILITY_ID_", nIndexRow].Value = dr["CODE"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("존재하지 않는 값입니다.");
                                dataGridView15["NPC_ABILITY_ID", nIndexRow].Value = objTemp;
                            }
                        }
                    }
                    break;

            }

        }

        private void tabControl1_KeyDown(object sender, KeyEventArgs e)
        {
            /*if (e.KeyCode == Keys.NumPad1)
            {
                nK++;
                dataGridView1.Refresh();
            }*/
            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.Z)
            {                
                if(m_UndoStack.Count > 0 )
                {
                    sUndoRedo sUndoTemp;                    
                    //09. 07. 02 김정협 그룹같은놈 모두 같이 언두 및 리두
                    do
                    {
                        sUndoTemp = ((sUndoRedo)m_UndoStack.Pop());
                        sUndoRedo sRedoTemp = new sUndoRedo();
                        switch (sUndoTemp.nTabIndex)
                        {
                            case 0:
                                {
                                    UndoKeyboardControl(dataGridView1, tblItem, sUndoTemp, sRedoTemp, 0);

                                }
                                break;
                            case 1:
                                {
                                    UndoKeyboardControl(dataGridView2, tblSpecialAbility, sUndoTemp, sRedoTemp, 1);
                                }
                                break;
                            case 2:
                                {
                                    UndoKeyboardControl(dataGridView3, tblSocketItem, sUndoTemp, sRedoTemp, 2);
                                }
                                break;
                            case 3:
                                {
                                    UndoKeyboardControl(dataGridView4, tblSocketRandom, sUndoTemp, sRedoTemp, 3);
                                }
                                break;
                            case 4:
                                {
                                    UndoKeyboardControl(dataGridView5, tblSocketGroup, sUndoTemp, sRedoTemp, 4);
                                }
                                break;
                            case 5:
                                {
                                    UndoKeyboardControl(dataGridView6, tblSetItem, sUndoTemp, sRedoTemp, 5);
                                }
                                break;
                            case 6:
                                {
                                    UndoKeyboardControl(dataGridView7, tblRandomBoxTable, sUndoTemp, sRedoTemp, 6);
                                }
                                break;
                            case 7:
                                {
                                    UndoKeyboardControl(dataGridView8, tblRandomItemGroup, sUndoTemp, sRedoTemp, 7);
                                }
                                break;
                            case 8:
                                {
                                    UndoKeyboardControl(dataGridView9, tblExchangeTable, sUndoTemp, sRedoTemp, 8);
                                }
                                break;
                            case 9:
                                {
                                    UndoKeyboardControl(dataGridView10, tblManufactureTable, sUndoTemp, sRedoTemp, 9);
                                }
                                break;
                            case 10:
                                {
                                    UndoKeyboardControl(dataGridView11, tblManufactureResultGroup, sUndoTemp, sRedoTemp, 10);
                                }
                                break;
                            case 11:
                                {
                                    UndoKeyboardControl(dataGridView12, tblManufactureVillage, sUndoTemp, sRedoTemp, 11);
                                }
                                break;
                            case 12:
                                {
                                    UndoKeyboardControl(dataGridView13, tblAttribEnchantItem, sUndoTemp, sRedoTemp, 12);
                                }
                                break;
                            case 13:
                                {
                                    UndoKeyboardControl(dataGridView14, tblAttribEnchantRequire, sUndoTemp, sRedoTemp, 13);
                                }
                                break;
                            case 14:
                                {
                                    UndoKeyboardControl(dataGridView15, tblNpcExtraAbility, sUndoTemp, sRedoTemp, 14);
                                }
                                break;
                        }

                        if(m_UndoStack.Count <= 0)
                        {
                            break;
                        }

                    } while (((sUndoRedo)m_UndoStack.Peek()).nGroupID == sUndoTemp.nGroupID);

                }                
            }

            if (Control.ModifierKeys == Keys.Control && e.KeyCode == Keys.Y)
            {
                if (m_RedoStack.Count > 0)
                {
                    sUndoRedo sRedoTemp;
                    //09. 07. 02 김정협 그룹같은놈 모두 같이 언두 및 리두
                    do
                    {
                        sRedoTemp = ((sUndoRedo)m_RedoStack.Pop());

                        sUndoRedo sUndoTemp = new sUndoRedo();

                        switch (sRedoTemp.nTabIndex)
                        {
                            case 0:
                                {
                                    RedoKeyboardControl(dataGridView1, tblItem, sUndoTemp, sRedoTemp, 0);
                                }
                                break;
                            case 1:
                                {
                                    RedoKeyboardControl(dataGridView2, tblSpecialAbility, sUndoTemp, sRedoTemp, 1);
                                }
                                break;
                            case 2:
                                {
                                    RedoKeyboardControl(dataGridView3, tblSocketItem, sUndoTemp, sRedoTemp, 2);
                                }
                                break;
                            case 3:
                                {
                                    RedoKeyboardControl(dataGridView4, tblSocketRandom, sUndoTemp, sRedoTemp, 3);
                                }
                                break;
                            case 4:
                                {
                                    RedoKeyboardControl(dataGridView5, tblSocketGroup, sUndoTemp, sRedoTemp, 4);
                                }
                                break;
                            case 5:
                                {
                                    RedoKeyboardControl(dataGridView6, tblSetItem, sUndoTemp, sRedoTemp, 5);
                                }
                                break;
                            case 6:
                                {
                                    RedoKeyboardControl(dataGridView7, tblRandomBoxTable, sUndoTemp, sRedoTemp, 6);
                                }
                                break;
                            case 7:
                                {
                                    RedoKeyboardControl(dataGridView8, tblRandomItemGroup, sUndoTemp, sRedoTemp, 7);
                                }
                                break;
                            case 8:
                                {
                                    RedoKeyboardControl(dataGridView9, tblExchangeTable, sUndoTemp, sRedoTemp, 8);
                                }
                                break;
                            case 9:
                                {
                                    RedoKeyboardControl(dataGridView10, tblManufactureTable, sUndoTemp, sRedoTemp, 9);
                                }
                                break;
                            case 10:
                                {
                                    RedoKeyboardControl(dataGridView11, tblManufactureResultGroup, sUndoTemp, sRedoTemp, 10);
                                }
                                break;
                            case 11:
                                {
                                    RedoKeyboardControl(dataGridView12, tblManufactureVillage, sUndoTemp, sRedoTemp, 11);
                                }
                                break;
                            case 12:
                                {
                                    RedoKeyboardControl(dataGridView13, tblAttribEnchantItem, sUndoTemp, sRedoTemp, 12);
                                }
                                break;
                            case 13:
                                {
                                    RedoKeyboardControl(dataGridView14, tblAttribEnchantRequire, sUndoTemp, sRedoTemp, 13);
                                }
                                break;
                            case 14:
                                {
                                    RedoKeyboardControl(dataGridView15, tblNpcExtraAbility, sUndoTemp, sRedoTemp, 14);
                                }
                                break;

                        }

                        if (m_RedoStack.Count <= 0)
                        {
                            break;
                        }

                    } while (((sUndoRedo)m_RedoStack.Peek()).nGroupID == sRedoTemp.nGroupID);
                }
            }

            if (e.KeyCode == Keys.Escape)
            {
                if (AssistBox.Visible)
                {
                    AssistBox.Hide();
                }
            }

            if (e.KeyCode == Keys.F5)
            {                
                switch (tabControl1.SelectedIndex)
                {
                    case 0:
                        {
                            tblItem.Clear();
                            Adpt.Fill(tblItem);
                            
                            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
                            for (int nRowHeader = 0; nRowHeader < dataGridView1.RowCount; nRowHeader++)
                            {
                                dataGridView1.Rows[nRowHeader].HeaderCell.Value = dataGridView1["ID", nRowHeader].Value.ToString() + "     " + dataGridView1["Name", nRowHeader].Value.ToString();
                            }

                        }
                        break;
                    case 1:
                        {
                            tblSpecialAbility.Clear();
                            Adpt_SpecialAbility.Fill(tblSpecialAbility);

                            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
                            for (int nRowHeader = 0; nRowHeader < dataGridView2.RowCount; nRowHeader++)
                            {
                                dataGridView2.Rows[nRowHeader].HeaderCell.Value = dataGridView2["ID", nRowHeader].Value.ToString() + "     " + dataGridView2["TYPE_", nRowHeader].Value.ToString();
                            }

                        }
                        break;
                    case 2:
                        {
                            tblSocketItem.Clear();
                            Adpt_SocketItem.Fill(tblSocketItem);
                                                        
                            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
                            for (int nRowHeader = 0; nRowHeader < dataGridView3.RowCount; nRowHeader++)
                            {
                                dataGridView3.Rows[nRowHeader].HeaderCell.Value = dataGridView3["ID", nRowHeader].Value.ToString() + "     " + dataGridView3["Description", nRowHeader].Value.ToString();
                            }

                        }
                        break;
                    case 3:
                        {
                            tblSocketRandom.Clear();
                            Adpt_SocketRandom.Fill(tblSocketRandom);
                            for (int nRowHeader = 0; nRowHeader < dataGridView4.RowCount; nRowHeader++)
                            {
                                dataGridView4.Rows[nRowHeader].HeaderCell.Value = "    ";
                            }
                        }
                        break;
                    case 4:
                        {
                            tblSocketGroup.Clear();
                            Adpt_SocketGroup.Fill(tblSocketGroup);
                            for (int nRowHeader = 0; nRowHeader < dataGridView5.RowCount; nRowHeader++)
                            {
                                dataGridView5.Rows[nRowHeader].HeaderCell.Value = "    ";
                            }
                        }
                        break;
                    case 5:
                        {
                            tblSetItem.Clear();
                            Adpt_SetItem.Fill(tblSetItem);
                                                        
                            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
                            for (int nRowHeader = 0; nRowHeader < dataGridView6.RowCount; nRowHeader++)
                            {
                                dataGridView6.Rows[nRowHeader].HeaderCell.Value = dataGridView6["SetID", nRowHeader].Value.ToString() + "     " + dataGridView6["SetName", nRowHeader].Value.ToString();
                            }
                        }
                        break;
                    case 6:
                        {
                            tblRandomBoxTable.Clear();
                            Adpt_RandomBoxTable.Fill(tblRandomBoxTable);

                            for (int nRowHeader = 0; nRowHeader < dataGridView7.RowCount; nRowHeader++)
                            {
                                dataGridView7.Rows[nRowHeader].HeaderCell.Value = dataGridView7["BoxID", nRowHeader].Value.ToString() + "     " + dataGridView7["BoxName", nRowHeader].Value.ToString();
                            }
                        }
                        break;
                    case 7:
                        {
                            tblRandomItemGroup.Clear();
                            Adpt_RandomItemGroup.Fill(tblRandomItemGroup);
                            for (int nRowHeader = 0; nRowHeader < dataGridView8.RowCount; nRowHeader++)
                            {
                                dataGridView8.Rows[nRowHeader].HeaderCell.Value = "    ";
                            }
                        }
                        break;
                    case 8:
                        {
                            tblExchangeTable.Clear();
                            Adpt_ExchangeTable.Fill(tblExchangeTable);
                            for (int nRowHeader = 0; nRowHeader < dataGridView9.RowCount; nRowHeader++)
                            {
                                dataGridView9.Rows[nRowHeader].HeaderCell.Value = "    ";
                            }

                        }
                        break;
                    case 9:
                        {
                            tblManufactureTable.Clear();
                            Adpt_ManufactureTable.Fill(tblManufactureTable);
                                                        
                            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

                            for (int nRowHeader = 0; nRowHeader < dataGridView10.RowCount; nRowHeader++)
                            {
                                dataGridView10.Rows[nRowHeader].HeaderCell.Value = dataGridView10["Manufacture ID", nRowHeader].Value.ToString() + "     " + dataGridView10["Manufacture Name", nRowHeader].Value.ToString();
                            }
                        }
                        break;
                    case 10:
                        {
                            tblManufactureResultGroup.Clear();
                            Adpt_ManufactureResultGroup.Fill(tblManufactureResultGroup);
                            for (int nRowHeader = 0; nRowHeader < dataGridView11.RowCount; nRowHeader++)
                            {
                                dataGridView11.Rows[nRowHeader].HeaderCell.Value = "    ";
                            }
                        }
                        break;
                    case 11:
                        {
                            tblManufactureVillage.Clear();
                            Adpt_ManufactureVillage.Fill(tblManufactureVillage);
                            for (int nRowHeader = 0; nRowHeader < dataGridView12.RowCount; nRowHeader++)
                            {
                                dataGridView12.Rows[nRowHeader].HeaderCell.Value = "    ";
                            }
                        }
                        break;
                    case 12:
                        {
                            tblAttribEnchantItem.Clear();
                            Adpt_AttribEnchantItem.Fill(tblAttribEnchantItem);
                                                        
                            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여

                            for (int nRowHeader = 0; nRowHeader < dataGridView13.RowCount; nRowHeader++)
                            {
                                dataGridView13.Rows[nRowHeader].HeaderCell.Value = dataGridView13["ExtraDamageType", nRowHeader].Value.ToString() + "     " + dataGridView13["ExtraDamageType_", nRowHeader].Value.ToString();
                            }
                            
                        }
                        break;
                    case 13:
                        {
                            tblAttribEnchantRequire.Clear();
                            Adpt_AttribEnchantRequire.Fill(tblAttribEnchantRequire);
                            for (int nRowHeader = 0; nRowHeader < dataGridView14.RowCount; nRowHeader++)
                            {
                                dataGridView14.Rows[nRowHeader].HeaderCell.Value = "    ";
                            }
                        }
                        break;

                    case 14:
                        {
                            tblNpcExtraAbility.Clear();
                            Adpt_NpcExtraAbility.Fill(tblNpcExtraAbility);

                            //09. 06. 30 김정협 엑셀의 고정셀 기능을 위하여            
                            for (int nRowHeader = 0; nRowHeader < dataGridView15.RowCount; nRowHeader++)
                            {
                                dataGridView15.Rows[nRowHeader].HeaderCell.Value = dataGridView15["NPC_ABILITY_ID", nRowHeader].Value.ToString() + "     " + dataGridView15["NPC_ABILITY_ID_C", nRowHeader].Value.ToString();
                            }
                        }
                        break;
                }

                SetCellBackgroundColorForDB(tabControl1.SelectedIndex);
                

                m_DeleteRowList.Clear();
                m_ModifyIDList.Clear();
                m_UndoStack.Clear();
                m_RedoStack.Clear();
                m_bSaveEnd = true;
            }
        }


        //09. 06. 10 김정협 리플레이스 기능 추가
        private void btnReplace_Click(object sender, EventArgs e)
        {
            panel1.Visible = true;
            switch (tabControl1.SelectedIndex)
            {
                case 0:
                    {
                        textBox3.Text = dataGridView1.CurrentCell.Value.ToString();
                    }
                    break;
                case 1:
                    {
                        textBox3.Text = dataGridView2.CurrentCell.Value.ToString();
                    }
                    break;
                case 2:
                    {
                        textBox3.Text = dataGridView3.CurrentCell.Value.ToString();
                    }
                    break;
                case 3:
                    {
                        textBox3.Text = dataGridView4.CurrentCell.Value.ToString();
                    }
                    break;
                case 4:
                    {
                        textBox3.Text = dataGridView5.CurrentCell.Value.ToString();
                    }
                    break;
                case 5:
                    {
                        textBox3.Text = dataGridView6.CurrentCell.Value.ToString();
                    }
                    break;
                case 6:
                    {
                        textBox3.Text = dataGridView7.CurrentCell.Value.ToString();
                    }
                    break;
                case 7:
                    {
                        textBox3.Text = dataGridView8.CurrentCell.Value.ToString();
                    }
                    break;
                case 8:
                    {
                        textBox3.Text = dataGridView9.CurrentCell.Value.ToString();
                    }
                    break;
                case 9:
                    {
                        textBox3.Text = dataGridView10.CurrentCell.Value.ToString();
                    }
                    break;
                case 10:
                    {
                        textBox3.Text = dataGridView11.CurrentCell.Value.ToString();
                    }
                    break;
                case 11:
                    {
                        textBox3.Text = dataGridView12.CurrentCell.Value.ToString();
                    }
                    break;
                case 12:
                    {
                        textBox3.Text = dataGridView13.CurrentCell.Value.ToString();
                    }
                    break;
                case 13:
                    {
                        textBox3.Text = dataGridView14.CurrentCell.Value.ToString();
                    }
                    break;
                case 14:
                    {
                        textBox3.Text = dataGridView15.CurrentCell.Value.ToString();
                    }
                    break;

            }
        }
        //09. 06. 10 김정협 리플레이스 기능 추가
        private void btnOK_Click(object sender, EventArgs e)
        {
            switch (tabControl1.SelectedIndex)
            {
                case 0:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView1.SelectedCells.Count; i++)
                        {
                            if(dataGridView1.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView1.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView1.SelectedCells[i];
                                dataGridView1_CellBeginEdit(null, null);

                                string strTemp = dataGridView1.SelectedCells[i].Value.ToString();
                                dataGridView1.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView1_CellEndEdit(null, null);
                                dataGridView1.RefreshEdit();
                                m_bPaste = false;                               
                            }
                        }
                    }
                    break;
                case 1:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView2.SelectedCells.Count; i++)
                        {
                            if (dataGridView2.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView2.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView2.SelectedCells[i];
                                dataGridView2_CellBeginEdit(null, null);

                                string strTemp = dataGridView2.SelectedCells[i].Value.ToString();
                                dataGridView2.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView2_CellEndEdit(null, null);
                                dataGridView2.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 2:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView3.SelectedCells.Count; i++)
                        {
                            if (dataGridView3.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView3.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView3.SelectedCells[i];
                                dataGridView3_CellBeginEdit(null, null);

                                string strTemp = dataGridView3.SelectedCells[i].Value.ToString();
                                dataGridView3.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView3_CellEndEdit(null, null);
                                dataGridView3.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 3:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView4.SelectedCells.Count; i++)
                        {
                            if (dataGridView4.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView4.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView4.SelectedCells[i];
                                dataGridView4_CellBeginEdit(null, null);

                                string strTemp = dataGridView4.SelectedCells[i].Value.ToString();
                                dataGridView4.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView4_CellEndEdit(null, null);
                                dataGridView4.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 4:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView5.SelectedCells.Count; i++)
                        {
                            if (dataGridView5.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView5.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView5.SelectedCells[i];
                                dataGridView5_CellBeginEdit(null, null);

                                string strTemp = dataGridView5.SelectedCells[i].Value.ToString();
                                dataGridView5.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView5_CellEndEdit(null, null);
                                dataGridView5.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 5:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView6.SelectedCells.Count; i++)
                        {
                            if (dataGridView6.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView6.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView6.SelectedCells[i];
                                dataGridView6_CellBeginEdit(null, null);

                                string strTemp = dataGridView6.SelectedCells[i].Value.ToString();
                                dataGridView6.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView6_CellEndEdit(null, null);
                                dataGridView6.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 6:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView7.SelectedCells.Count; i++)
                        {
                            if (dataGridView7.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView7.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView7.SelectedCells[i];
                                dataGridView7_CellBeginEdit(null, null);

                                string strTemp = dataGridView7.SelectedCells[i].Value.ToString();
                                dataGridView7.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView7_CellEndEdit(null, null);
                                dataGridView7.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 7:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView8.SelectedCells.Count; i++)
                        {
                            if (dataGridView8.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView8.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView8.SelectedCells[i];
                                dataGridView8_CellBeginEdit(null, null);

                                string strTemp = dataGridView8.SelectedCells[i].Value.ToString();
                                dataGridView8.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView8_CellEndEdit(null, null);
                                dataGridView8.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 8:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView9.SelectedCells.Count; i++)
                        {
                            if (dataGridView9.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView9.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView9.SelectedCells[i];
                                dataGridView9_CellBeginEdit(null, null);

                                string strTemp = dataGridView9.SelectedCells[i].Value.ToString();
                                dataGridView9.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView9_CellEndEdit(null, null);
                                dataGridView9.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 9:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        } m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;

                        for (int i = 0; i < dataGridView10.SelectedCells.Count; i++)
                        {
                            if (dataGridView10.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView10.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView10.SelectedCells[i];
                                dataGridView10_CellBeginEdit(null, null);

                                string strTemp = dataGridView10.SelectedCells[i].Value.ToString();
                                dataGridView10.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView10_CellEndEdit(null, null);
                                dataGridView10.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 10:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView11.SelectedCells.Count; i++)
                        {
                            if (dataGridView11.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView11.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView11.SelectedCells[i];
                                dataGridView11_CellBeginEdit(null, null);

                                string strTemp = dataGridView11.SelectedCells[i].Value.ToString();
                                dataGridView11.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView11_CellEndEdit(null, null);
                                dataGridView11.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 11:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView12.SelectedCells.Count; i++)
                        {
                            if (dataGridView12.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView12.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView12.SelectedCells[i];
                                dataGridView12_CellBeginEdit(null, null);

                                string strTemp = dataGridView12.SelectedCells[i].Value.ToString();
                                dataGridView12.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView12_CellEndEdit(null, null);
                                dataGridView12.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 12:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView13.SelectedCells.Count; i++)
                        {
                            if (dataGridView13.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView13.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView13.SelectedCells[i];
                                dataGridView13_CellBeginEdit(null, null);

                                string strTemp = dataGridView13.SelectedCells[i].Value.ToString();
                                dataGridView13.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView13_CellEndEdit(null, null);
                                dataGridView13.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 13:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView14.SelectedCells.Count; i++)
                        {
                            if (dataGridView14.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView14.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView14.SelectedCells[i];
                                dataGridView14_CellBeginEdit(null, null);

                                string strTemp = dataGridView14.SelectedCells[i].Value.ToString();
                                dataGridView14.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView14_CellEndEdit(null, null);
                                dataGridView14.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
                case 14:
                    {
                        //09. 07. 02 김정협 언두리두시 그룹지정
                        if (m_UndoStack.Count > 0)
                        {
                            m_nPasteGroup = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
                        }
                        else
                        {
                            m_nPasteGroup = 0;
                        }

                        for (int i = 0; i < dataGridView15.SelectedCells.Count; i++)
                        {
                            if (dataGridView15.SelectedCells[i].ReadOnly)
                            {
                                continue;
                            }
                            int nIndex = dataGridView15.SelectedCells[i].Value.ToString().IndexOf(textBox3.Text);
                            if (nIndex != -1)
                            {
                                m_bPaste = true;
                                m_dgvcTemp = dataGridView15.SelectedCells[i];
                                dataGridView15_CellBeginEdit(null, null);

                                string strTemp = dataGridView15.SelectedCells[i].Value.ToString();
                                dataGridView15.SelectedCells[i].Value = strTemp.Replace(textBox3.Text, textBox4.Text);

                                dataGridView15_CellEndEdit(null, null);
                                dataGridView15.RefreshEdit();
                                m_bPaste = false; 
                            }
                        }
                    }
                    break;
            }


            panel1.Visible = false;
            textBox3.Text = "";
            textBox4.Text = "";
        }
        //09. 06. 10 김정협 리플레이스 기능 추가
        private void btnCancel_Click(object sender, EventArgs e)
        {
            panel1.Visible = false;
            textBox3.Text = "";
            textBox4.Text = "";
        }

        //09. 07. 02 김정협 Undo그룹짓기 nGroup매개변수 추가
        void UserAddUndoRow(int nDeletingRowIndex, DataGridView dgvView, DataTable tblDelete, sTableValue Modify, int nGroup)
        {
            DataRow dr = null;// = tblDelete.Rows[e.Row.Index];
            int nRowIndex = 0;

            for (int i = 0; i < tblDelete.Rows.Count; i++)
            {
                if (tblDelete.Rows[i].RowState == DataRowState.Deleted)
                {
                    continue;
                }

                if (tblDelete.Rows[i]["IndexKey"].ToString() == Convert.ToString(nDeletingRowIndex))
                {
                    dr = tblDelete.Rows[i];
                    nRowIndex = i;
                    break;
                }
            }

            //Redo를 위하여 값을 보존
            DataTable tblTemp = tblDelete.Clone();
            tblTemp = tblDelete.Copy();
            DataRow drOriginal = tblTemp.Rows[nRowIndex];

            sUndoRedo sRedo = new sUndoRedo();
            sRedo.nType = 2;
            sRedo.nTabIndex = 0;
            sRedo.drAdd = drOriginal;
            sRedo.sModyfyList = Modify;

            //09. 07. 02 김정협 Undo그룹짓기
            sRedo.nGroupID = nGroup;
            m_RedoStack.Push(sRedo);

            tblDelete.Rows[nRowIndex].Delete();
            dgvView.DataSource = tblDelete;

            

        }

        void UserDeletingRow(int nDeletingRowIndex, DataGridView dgvView, DataTable tblDelete, bool bTable, int nTabPage)
        {
            DataRow dr = null;// = tblDelete.Rows[e.Row.Index];
            int nRowIndex = 0;
            if (!bTable)
            {
                for (int i = 0; i < tblDelete.Rows.Count; i++)
                {
                    if (tblDelete.Rows[i].RowState == DataRowState.Deleted)
                    {
                        continue;
                    }

                    if (dgvView["IndexKey", nDeletingRowIndex].Value.ToString() == tblDelete.Rows[i]["IndexKey"].ToString())
                    {
                        dr = tblDelete.Rows[i];
                        nRowIndex = i;
                        break;
                    }
                }
            }
            else
            {
                dr = tblDelete.Rows[nDeletingRowIndex];
                nRowIndex = nDeletingRowIndex;
            }

            //DeleteHistory에 넣어주기 위하여 값을 보존
            DataTable tblTemp = tblDelete.Clone();
            tblTemp = tblDelete.Copy();
            DataRow drOriginal = tblTemp.Rows[nRowIndex];

            tblDelete.Rows[nRowIndex].Delete();
            dgvView.DataSource = tblDelete;

            sDeleteRow sRow = new sDeleteRow();
            sRow.drRow = dr;
            sRow.drOriginalRow = drOriginal;
            sRow.nTabIndex = nTabPage;

            sUndoRedo sUndoData = new sUndoRedo();
            sUndoData.nTabIndex = nTabPage;
            sUndoData.nType = 3;//3. Delete타입 수정                
            sUndoData.nRowIndex = nRowIndex;

            //09. 07. 02 김정협 Undo그룹짓기
            if (m_UndoStack.Count > 0)
            {
                sUndoData.nGroupID = ((sUndoRedo)m_UndoStack.Peek()).nGroupID + 1;
            }
            else
            {
                sUndoData.nGroupID = 0;
            }


            if (!m_DeleteRowList.Contains(sRow))
            {
                m_DeleteRowList.Add(sRow);
                sUndoData.sDeleteList = sRow;
            }
            else
            {
                sUndoData.sDeleteList.nTabIndex = -1;
            }

            m_UndoStack.Push(sUndoData);
            if(!bTable)
            {
                m_RedoStack.Clear();
            }           

            //Adpt_NpcExtraAbility.Update(new DataRow[] { dr });
            m_bSaveEnd = false;
        }

        private void dataGridView1_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView1.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView1.SelectedRows.Count;
                    int nMin = dataGridView1.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView1.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView1.SelectedRows[i].Index)
                        {
                            nMin = dataGridView1.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView1, tblItem, false, 0);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView1, tblItem, false, 0);
                }
                e.Cancel = true;
            }
      
#else
            e.Cancel = true;
#endif

        }       

        private void dataGridView2_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView2.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView2.SelectedRows.Count;
                    int nMin = dataGridView2.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView2.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView2.SelectedRows[i].Index)
                        {
                            nMin = dataGridView2.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView2, tblSpecialAbility, false, 1);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView2, tblSpecialAbility, false, 1);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView3_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView3.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView3.SelectedRows.Count;
                    int nMin = dataGridView3.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView3.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView3.SelectedRows[i].Index)
                        {
                            nMin = dataGridView3.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView3, tblSocketItem, false, 2);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView3, tblSocketItem, false, 2);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView4_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView4.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView4.SelectedRows.Count;
                    int nMin = dataGridView4.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView4.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView4.SelectedRows[i].Index)
                        {
                            nMin = dataGridView4.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView4, tblSocketRandom, false, 3);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView4, tblSocketRandom, false, 3);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView5_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView5.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView5.SelectedRows.Count;
                    int nMin = dataGridView5.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView5.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView5.SelectedRows[i].Index)
                        {
                            nMin = dataGridView5.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView5, tblSocketGroup, false, 4);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView5, tblSocketGroup, false, 4);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView6_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView6.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView6.SelectedRows.Count;
                    int nMin = dataGridView6.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView6.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView6.SelectedRows[i].Index)
                        {
                            nMin = dataGridView6.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView6, tblSetItem, false, 5);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView6, tblSetItem, false, 5);
                }
                e.Cancel = true;
                
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView7_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView7.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView7.SelectedRows.Count;
                    int nMin = dataGridView7.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView7.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView7.SelectedRows[i].Index)
                        {
                            nMin = dataGridView7.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView7, tblRandomBoxTable, false, 6);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView7, tblRandomBoxTable, false, 6);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView8_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView8.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView8.SelectedRows.Count;
                    int nMin = dataGridView8.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView8.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView8.SelectedRows[i].Index)
                        {
                            nMin = dataGridView8.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView8, tblRandomItemGroup, false, 7);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView8, tblRandomItemGroup, false, 7);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView9_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView9.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView9.SelectedRows.Count;
                    int nMin = dataGridView9.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView9.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView9.SelectedRows[i].Index)
                        {
                            nMin = dataGridView9.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView9, tblExchangeTable, false, 8);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView9, tblExchangeTable, false, 8);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView10_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView10.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView10.SelectedRows.Count;
                    int nMin = dataGridView10.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView10.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView10.SelectedRows[i].Index)
                        {
                            nMin = dataGridView10.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView10, tblManufactureTable, false, 9);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView10, tblManufactureTable, false, 9);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView11_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView11.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView11.SelectedRows.Count;
                    int nMin = dataGridView11.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView11.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView11.SelectedRows[i].Index)
                        {
                            nMin = dataGridView11.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView11, tblManufactureResultGroup, false, 10);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView11, tblManufactureResultGroup, false, 10);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView12_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView12.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView12.SelectedRows.Count;
                    int nMin = dataGridView12.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView12.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView12.SelectedRows[i].Index)
                        {
                            nMin = dataGridView12.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView12, tblManufactureVillage, false, 11);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView12, tblManufactureVillage, false, 11);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView13_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView13.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView13.SelectedRows.Count;
                    int nMin = dataGridView13.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView13.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView13.SelectedRows[i].Index)
                        {
                            nMin = dataGridView13.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView13, tblAttribEnchantItem, false, 12);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView13, tblAttribEnchantItem, false, 12);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView14_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView14.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView14.SelectedRows.Count;
                    int nMin = dataGridView14.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView14.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView14.SelectedRows[i].Index)
                        {
                            nMin = dataGridView14.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView14, tblAttribEnchantRequire, false, 13);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView14, tblAttribEnchantRequire, false, 13);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        private void dataGridView15_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            //국가별 define정의할 것
#if __COUNTRY_KR__
            DialogResult result = MessageBox.Show("정말 삭제하시겠습니까? 삭제 후 문제가 발생할 수도 있습니다.", "", MessageBoxButtons.OKCancel);
            if (result == DialogResult.Cancel)
            {
                e.Cancel = true;
                return;
            }
            else if (result == DialogResult.OK)
            {
                if (dataGridView15.SelectedRows.Count > 1)
                {
                    int nCount = dataGridView15.SelectedRows.Count;
                    int nMin = dataGridView15.SelectedRows[0].Index;
                    for (int i = 0; i < dataGridView15.SelectedRows.Count; i++)
                    {
                        if (nMin > dataGridView15.SelectedRows[i].Index)
                        {
                            nMin = dataGridView15.SelectedRows[i].Index;
                        }
                    }
                    for (int i = 0; i < nCount; i++)
                    {
                        UserDeletingRow(nMin, dataGridView15, tblNpcExtraAbility, false, 14);
                    }

                }
                else
                {
                    UserDeletingRow(e.Row.Index, dataGridView15, tblNpcExtraAbility, false, 14);
                }
                e.Cancel = true;
            }
#else
            e.Cancel = true;
#endif

        }

        //09. 07. 01 김정협 텍스트 수정창 열기
        private void AssistBox_TextChanged(object sender, EventArgs e)
        {
            if (AssistBox.Text.IndexOf("\n") != -1 || AssistBox.Text.IndexOf("\r\n") != -1)
            {
                return;
            }
            switch (tabControl1.SelectedIndex)
            {
                case 0:
                    dataGridView1.CurrentCell.Value = AssistBox.Text;
                    break;
                case 1:
                    dataGridView2.CurrentCell.Value = AssistBox.Text;
                    break;
                case 2:
                    dataGridView3.CurrentCell.Value = AssistBox.Text;
                    break;
                case 3:
                    dataGridView4.CurrentCell.Value = AssistBox.Text;
                    break;
                case 4:
                    dataGridView5.CurrentCell.Value = AssistBox.Text;
                    break;
                case 5:
                    dataGridView6.CurrentCell.Value = AssistBox.Text;
                    break;
                case 6:
                    dataGridView7.CurrentCell.Value = AssistBox.Text;
                    break;
                case 7:
                    dataGridView8.CurrentCell.Value = AssistBox.Text;
                    break;
                case 8:
                    dataGridView9.CurrentCell.Value = AssistBox.Text;
                    break;
                case 9:
                    dataGridView10.CurrentCell.Value = AssistBox.Text;
                    break;
                case 10:
                    dataGridView11.CurrentCell.Value = AssistBox.Text;
                    break;
                case 11:
                    dataGridView12.CurrentCell.Value = AssistBox.Text;
                    break;
                case 12:
                    dataGridView13.CurrentCell.Value = AssistBox.Text; 
                    break;
                case 13:
                    dataGridView14.CurrentCell.Value = AssistBox.Text;
                    break;
                case 14:
                    dataGridView15.CurrentCell.Value = AssistBox.Text;
                    break;

            }
        }

        //09. 07. 01 김정협 텍스트 수정창 열기
        private void AssistBox_Leave(object sender, EventArgs e)
        {
            switch(tabControl1.SelectedIndex)
            {
                case 0:
                    dataGridView1_CellEndEdit(null, null);
                    break;
                case 1:
                    dataGridView2_CellEndEdit(null, null);
                    break;
                case 2:
                    dataGridView3_CellEndEdit(null, null);
                    break;
                case 3:
                    dataGridView4_CellEndEdit(null, null);
                    break;
                case 4:
                    dataGridView5_CellEndEdit(null, null);
                    break;
                case 5:
                    dataGridView6_CellEndEdit(null, null);
                    break;
                case 6:
                    dataGridView7_CellEndEdit(null, null);
                    break;
                case 7:
                    dataGridView8_CellEndEdit(null, null);
                    break;
                case 8:
                    dataGridView9_CellEndEdit(null, null);
                    break;
                case 9:
                    dataGridView10_CellEndEdit(null, null);
                    break;
                case 10:
                    dataGridView11_CellEndEdit(null, null);
                    break;
                case 11:
                    dataGridView12_CellEndEdit(null, null);
                    break;
                case 12:
                    dataGridView13_CellEndEdit(null, null);
                    break;
                case 13:
                    dataGridView14_CellEndEdit(null, null);
                    break;
                case 14:
                    dataGridView15_CellEndEdit(null, null);
                    break;

            }

            AssistBox.Hide();
        }

        private void btnLink_Click(object sender, EventArgs e)
        {
            int nCount = 0;
            for (int i = 0; i < tblItem.Columns.Count; i++)
            {
                if (tblItem.Columns[i].ColumnName == "Item Type")
                {
                    for (int j = 0; j < tblItem.Rows.Count; j++)
                    {
                        DataRow dr = tblItemType.Rows.Find(tblItem.Rows[j]["Item Type"].ToString());
                        if (tblItem.Rows[j]["Item Type_"].ToString() != dr["Des"].ToString() || 
                            tblItem.Rows[j]["ITEMTYPE_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblItem.Rows[j]["Item Type_"] = dr["Des"];
                            tblItem.Rows[j]["ITEMTYPE_C"] = dr["CODE"];

                            Adpt.Update(new DataRow[] { tblItem.Rows[j] });
                            nCount++;
                        }                        
                    }
                }

                if (tblItem.Columns[i].ColumnName == "Use Type")
                {
                    for (int j = 0; j < tblItem.Rows.Count; j++)
                    {
                        DataRow dr = tblUseType.Rows.Find(tblItem.Rows[j]["Use Type"].ToString());
                        if (tblItem.Rows[j]["Use Type_"].ToString() != dr["Des"].ToString() ||
                            tblItem.Rows[j]["USETYPE_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblItem.Rows[j]["Use Type_"] = dr["Des"];
                            tblItem.Rows[j]["USETYPE_C"] = dr["CODE"];
                            Adpt.Update(new DataRow[] { tblItem.Rows[j] });
                            nCount++;
                        }                        
                    }
                }

                if (tblItem.Columns[i].ColumnName == "Period Type")
                {
                    for (int j = 0; j < tblItem.Rows.Count; j++)
                    {
                        DataRow dr = tblPeriodType.Rows.Find(tblItem.Rows[j]["Period Type"].ToString());
                        if (tblItem.Rows[j]["Period Type_"].ToString() != dr["Des"].ToString() ||
                            tblItem.Rows[j]["PERIODTYPE_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblItem.Rows[j]["Period Type_"] = dr["Des"];
                            tblItem.Rows[j]["PERIODTYPE_C"] = dr["CODE"];
                            Adpt.Update(new DataRow[] { tblItem.Rows[j] });
                            nCount++;
                        }                        
                    }
                }

                if (tblItem.Columns[i].ColumnName == "Price Type")
                {
                    for (int j = 0; j < tblItem.Rows.Count; j++)
                    {
                        DataRow dr = tblPriceType.Rows.Find(tblItem.Rows[j]["Price Type"].ToString());
                        if (tblItem.Rows[j]["Price Type_"].ToString() != dr["Des"].ToString() ||
                            tblItem.Rows[j]["PRICETYPE_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblItem.Rows[j]["Price Type_"] = dr["Des"];
                            tblItem.Rows[j]["PRICETYPE_C"] = dr["CODE"];
                            Adpt.Update(new DataRow[] { tblItem.Rows[j] });
                            nCount++;
                        }                        
                    }
                }

                if (tblItem.Columns[i].ColumnName == "Use Condition")
                {
                    for (int j = 0; j < tblItem.Rows.Count; j++)
                    {
                        DataRow dr = tblUseCondition.Rows.Find(tblItem.Rows[j]["Use Condition"].ToString());
                        if (tblItem.Rows[j]["Use Condition_"].ToString() != dr["Des"].ToString() ||
                            tblItem.Rows[j]["USECONDITION_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblItem.Rows[j]["Use Condition_"] = dr["Des"];
                            tblItem.Rows[j]["USECONDITION_C"] = dr["CODE"];
                            Adpt.Update(new DataRow[] { tblItem.Rows[j] });
                            nCount++;
                        }
                    }
                }

                if (tblItem.Columns[i].ColumnName == "Unit Type")
                {
                    for (int j = 0; j < tblItem.Rows.Count; j++)
                    {
                        DataRow dr = tblUnitType.Rows.Find(tblItem.Rows[j]["Unit Type"].ToString());
                        if (tblItem.Rows[j]["Unit Type_"].ToString() != dr["Des"].ToString() ||
                            tblItem.Rows[j]["UNITTYPE_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblItem.Rows[j]["Unit Type_"] = dr["Des"];
                            tblItem.Rows[j]["UNITTYPE_C"] = dr["CODE"];
                            Adpt.Update(new DataRow[] { tblItem.Rows[j] });
                            nCount++;
                        }
                    }
                }

                if (tblItem.Columns[i].ColumnName == "Unit Class")
                {
                    for (int j = 0; j < tblItem.Rows.Count; j++)
                    {
                        DataRow dr = tblUnitClass.Rows.Find(tblItem.Rows[j]["Unit Class"].ToString());
                        if (tblItem.Rows[j]["Unit Class_"].ToString() != dr["Des"].ToString() ||
                            tblItem.Rows[j]["UNITCLASS_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblItem.Rows[j]["Unit Class_"] = dr["Des"];
                            tblItem.Rows[j]["UNITCLASS_C"] = dr["CODE"];
                            Adpt.Update(new DataRow[] { tblItem.Rows[j] });
                            nCount++;
                        }
                    }
                }

                if (tblItem.Columns[i].ColumnName == "Eqip Position")
                {
                    for (int j = 0; j < tblItem.Rows.Count; j++)
                    {
                        DataRow dr = tblEqipPosition.Rows.Find(tblItem.Rows[j]["Eqip Position"].ToString());
                        if (tblItem.Rows[j]["Eqip Position_"].ToString() != dr["Des"].ToString() ||
                            tblItem.Rows[j]["EQIPPOSITION_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblItem.Rows[j]["Eqip Position_"] = dr["Des"];
                            tblItem.Rows[j]["EQIPPOSITION_C"] = dr["CODE"];
                            Adpt.Update(new DataRow[] { tblItem.Rows[j] });
                            nCount++;
                        }
                    }
                }

                if (tblItem.Columns[i].ColumnName == "Item Grade")
                {
                    for (int j = 0; j < tblItem.Rows.Count; j++)
                    {
                        DataRow dr = tblItemGrade.Rows.Find(tblItem.Rows[j]["Item Grade"].ToString());
                        if (tblItem.Rows[j]["Item Grade_"].ToString() != dr["Des"].ToString() ||
                            tblItem.Rows[j]["ITEMGRADE_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblItem.Rows[j]["Item Grade_"] = dr["Des"];
                            tblItem.Rows[j]["ITEMGRADE_C"] = dr["CODE"];
                            Adpt.Update(new DataRow[] { tblItem.Rows[j] });
                            nCount++;
                        }
                    }
                }


                if (tblItem.Columns[i].ColumnName == "Price")
                {
                    for (int j = 0; j < tblItem.Rows.Count; j++)
                    {
                        bool bChange = false;
                        if (tblItem.Rows[j]["Period Type"].ToString() == "1")
                        {
                            double dTemp = System.Math.Round(Convert.ToSingle(tblItem.Rows[j]["Price"].ToString()) * 0.0007, 1);
                            if (Convert.ToString(dTemp) != tblItem.Rows[j]["Repair ED"].ToString())
                            {

                                if (tblItem.Rows[j]["Price"].ToString() == "")
                                {
                                    tblItem.Rows[j]["Price"] = 0;
                                }

                                tblItem.Rows[j]["Repair ED"] = System.Math.Round(Convert.ToSingle(tblItem.Rows[j]["Price"].ToString()) * 0.0007, 1);

                                if (tblItem.Rows[j]["Item Grade_"].ToString() == "NORMAL")
                                {
                                    tblItem.Rows[j]["EnduranceDamageMin"] = 10;
                                    tblItem.Rows[j]["EnduranceDamageMax"] = 10;
                                }
                                else if (tblItem.Rows[j]["Item Grade_"].ToString() == "RARE")
                                {
                                    tblItem.Rows[j]["EnduranceDamageMin"] = 6;
                                    tblItem.Rows[j]["EnduranceDamageMax"] = 8;
                                }
                                else if (tblItem.Rows[j]["Item Grade_"].ToString() == "ELETE")
                                {
                                    tblItem.Rows[j]["EnduranceDamageMin"] = 5;
                                    tblItem.Rows[j]["EnduranceDamageMax"] = 7;
                                }
                                else if (tblItem.Rows[j]["Item Grade_"].ToString() == "UNIQUE")
                                {
                                    tblItem.Rows[j]["EnduranceDamageMin"] = 4;
                                    tblItem.Rows[j]["EnduranceDamageMax"] = 6;
                                }

                                bChange = true;
                            }
                        }
                        else
                        {
                            if (tblItem.Rows[j]["Repair ED"].ToString() != "0")
                            {
                                tblItem.Rows[j]["Repair ED"] = 0;
                                tblItem.Rows[j]["EnduranceDamageMin"] = 0;
                                tblItem.Rows[j]["EnduranceDamageMax"] = 0;
                                bChange = true;
                            }
                        }
                        if (bChange)
                        {
                            Adpt.Update(new DataRow[] { tblItem.Rows[j] });
                            nCount++;
                        }                        
                    }

                }

            }

            MessageBox.Show("Item 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;

            for (int i = 0; i < tblSpecialAbility.Columns.Count; i++)
            {
                if (tblSpecialAbility.Columns[i].ColumnName == "TYPE")
                {
                    for (int j = 0; j < tblSpecialAbility.Rows.Count; j++)
                    {
                        DataRow dr = tblSpecialAbilityType.Rows.Find(tblSpecialAbility.Rows[j]["TYPE"].ToString());
                        if (tblSpecialAbility.Rows[j]["TYPE_"].ToString() != dr["Des"].ToString() ||
                            tblSpecialAbility.Rows[j]["TYPE_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblSpecialAbility.Rows[j]["TYPE_"] = dr["Des"];
                            tblSpecialAbility.Rows[j]["TYPE_C"] = dr["CODE"];
                            Adpt_SpecialAbility.Update(new DataRow[] { tblSpecialAbility.Rows[j] });                          
                            nCount++;
                        }
                    }
                }
            }


            MessageBox.Show("SpecialAbility 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;

            for (int i = 0; i < tblSocketItem.Columns.Count; i++)
            {
                if (tblSocketItem.Columns[i].ColumnName == "Socket Type")
                {
                    for (int j = 0; j < tblSocketItem.Rows.Count; j++)
                    {
                        DataRow dr = tblSocketDataType.Rows.Find(tblSocketItem.Rows[j]["Socket Type"].ToString());
                        if (tblSocketItem.Rows[j]["Socket Type_"].ToString() != dr["Des"].ToString() ||
                            tblSocketItem.Rows[j]["Socket Type_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblSocketItem.Rows[j]["Socket Type_"] = dr["Des"];
                            tblSocketItem.Rows[j]["Socket Type_C"] = dr["CODE"];
                            Adpt_SocketItem.Update(new DataRow[] { tblSocketItem.Rows[j] });
                            nCount++;
                        }
                    }
                }

                if (tblSocketItem.Columns[i].ColumnName == "ExtraDamageType")
                {
                    for (int j = 0; j < tblSocketItem.Rows.Count; j++)
                    {
                        DataRow dr = tblExtraDamageType.Rows.Find(tblSocketItem.Rows[j]["ExtraDamageType"].ToString());
                        if (tblSocketItem.Rows[j]["ExtraDamageType_"].ToString() != dr["Des"].ToString() ||
                            tblSocketItem.Rows[j]["ExtraDamageType_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblSocketItem.Rows[j]["ExtraDamageType_"] = dr["Des"];
                            tblSocketItem.Rows[j]["ExtraDamageType_C"] = dr["CODE"];
                            Adpt_SocketItem.Update(new DataRow[] { tblSocketItem.Rows[j] });
                            nCount++;
                        }
                    }
                }

                if (tblSocketItem.Columns[i].ColumnName == "ExtraDamageResistType")
                {
                    for (int j = 0; j < tblSocketItem.Rows.Count; j++)
                    {
                        DataRow dr = tblExtraDamageType.Rows.Find(tblSocketItem.Rows[j]["ExtraDamageResistType"].ToString());
                        if (tblSocketItem.Rows[j]["ExtraDamageResistType_"].ToString() != dr["Des"].ToString() ||
                            tblSocketItem.Rows[j]["ExtraDamageResistType_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblSocketItem.Rows[j]["ExtraDamageResistType_"] = dr["Des"];
                            tblSocketItem.Rows[j]["ExtraDamageResistType_C"] = dr["CODE"];
                            Adpt_SocketItem.Update(new DataRow[] { tblSocketItem.Rows[j] });                       
                            nCount++;
                        }
                    }
                }

                if (tblSocketItem.Columns[i].ColumnName == "ImmuneExtraDamageType")
                {
                    for (int j = 0; j < tblSocketItem.Rows.Count; j++)
                    {
                        DataRow dr = tblExtraDamageType.Rows.Find(tblSocketItem.Rows[j]["ImmuneExtraDamageType"].ToString());
                        if (tblSocketItem.Rows[j]["ImmuneExtraDamageType_"].ToString() != dr["Des"].ToString() ||
                            tblSocketItem.Rows[j]["ImmuneExtraDamageType_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblSocketItem.Rows[j]["ImmuneExtraDamageType_"] = dr["Des"];
                            tblSocketItem.Rows[j]["ImmuneExtraDamageType_C"] = dr["CODE"];
                            Adpt_SocketItem.Update(new DataRow[] { tblSocketItem.Rows[j] });
                            nCount++;
                        }
                    }
                }
            }

            MessageBox.Show("SocketItem 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;

            for (int i = 0; i < tblSocketRandom.Columns.Count; i++)
            {
                if (tblSocketRandom.Columns[i].ColumnName == "SocketDataType")
                {
                    for (int j = 0; j < tblSocketRandom.Rows.Count; j++)
                    {
                        DataRow dr = tblSocketDataType.Rows.Find(tblSocketRandom.Rows[j]["SocketDataType"].ToString());
                        if (tblSocketRandom.Rows[j]["SocketDataType_"].ToString() != dr["CODE"].ToString())                            
                        {
                            tblSocketRandom.Rows[j]["SocketDataType_"] = dr["CODE"];
                            Adpt_SocketRandom.Update(new DataRow[] { tblSocketRandom.Rows[j] });
                            nCount++;
                        }
                    }
                }
            }


            MessageBox.Show("SocketRandom 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;

            for (int i = 0; i < tblSocketGroup.Columns.Count; i++)
            {
                if (tblSocketGroup.Columns[i].ColumnName == "OptionID")
                {
                    for (int j = 0; j < tblSocketGroup.Rows.Count; j++)
                    {
                        DataRow dr = tblSocketItem.Rows.Find(tblSocketGroup.Rows[j]["OptionID"].ToString());
                        if (tblSocketGroup.Rows[j]["Option_Des"].ToString() != dr["Description"].ToString())
                        {
                            tblSocketGroup.Rows[j]["Option_Des"] = dr["Description"];
                            Adpt_SocketGroup.Update(new DataRow[] { tblSocketGroup.Rows[j] });
                            nCount++;
                        }
                    }
                }
            }

            MessageBox.Show("SocketGroup 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;


            for (int i = 0; i < tblRandomBoxTable.Columns.Count; i++)
            {
                if (tblRandomBoxTable.Columns[i].ColumnName == "BoxID")
                {
                    for (int j = 0; j < tblRandomBoxTable.Rows.Count; j++)
                    {
                        DataRow dr = tblItem.Rows.Find(tblRandomBoxTable.Rows[j]["BoxID"].ToString());
                        if (tblRandomBoxTable.Rows[j]["BoxName"].ToString() != dr["Name"].ToString())
                        {
                            tblRandomBoxTable.Rows[j]["BoxName"] = dr["Name"];
                            Adpt_RandomBoxTable.Update(new DataRow[] { tblRandomBoxTable.Rows[j] });
                            nCount++;
                        }
                    }
                }


                if (tblRandomBoxTable.Columns[i].ColumnName == "Key ID")
                {
                    for (int j = 0; j < tblRandomBoxTable.Rows.Count; j++)
                    {
                        DataRow dr = tblItem.Rows.Find(tblRandomBoxTable.Rows[j]["Key ID"].ToString());
                        if(dr != null)
                        {
                            if (tblRandomBoxTable.Rows[j]["Key Name"].ToString() != dr["Name"].ToString())
                            {
                                tblRandomBoxTable.Rows[j]["Key Name"] = dr["Name"];
                                Adpt_RandomBoxTable.Update(new DataRow[] { tblRandomBoxTable.Rows[j] });
                                nCount++;
                            }
                        }
                        
                    }
                }


                for (int k = 1; k <= 15; k++)
                {
                    string strTemp = "Unit Class_";

                    if (k < 10)
                        strTemp = strTemp + "0" + k;
                    else
                        strTemp = strTemp + k;

                    if (tblRandomBoxTable.Columns[i].ColumnName == strTemp)
                    {
                        for (int j = 0; j < tblRandomBoxTable.Rows.Count; j++)
                        {
                            DataRow dr = tblUnitClass.Rows.Find(tblRandomBoxTable.Rows[j][strTemp].ToString());
                            if (tblRandomBoxTable.Rows[j][strTemp + "_"].ToString() != dr["Des"].ToString() ||
                                tblRandomBoxTable.Rows[j][strTemp + "_C"].ToString() != dr["CODE"].ToString())
                            {
                                tblRandomBoxTable.Rows[j][strTemp + "_"] = dr["Des"];
                                tblRandomBoxTable.Rows[j][strTemp + "_C"] = dr["CODE"];
                                Adpt_RandomBoxTable.Update(new DataRow[] { tblRandomBoxTable.Rows[j] });
                                nCount++;
                            }
                        }
                    }
                }
            }

            MessageBox.Show("RandomBoxTable 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;


            for (int i = 0; i < tblRandomItemGroup.Columns.Count; i++)
            {
                if (tblRandomItemGroup.Columns[i].ColumnName == "Item ID")
                {
                    for (int j = 0; j < tblRandomItemGroup.Rows.Count; j++)
                    {
                        DataRow dr = tblItem.Rows.Find(tblRandomItemGroup.Rows[j]["Item ID"].ToString());
                        if (tblRandomItemGroup.Rows[j]["Item Name"].ToString() != dr["Name"].ToString())
                        {
                            tblRandomItemGroup.Rows[j]["Item Name"] = dr["Name"];
                            Adpt_RandomItemGroup.Update(new DataRow[] { tblRandomItemGroup.Rows[j] });
                            nCount++;
                        }
                    }
                }
            }


            MessageBox.Show("RandomItemGroup 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;

            for (int i = 0; i < tblExchangeTable.Columns.Count; i++)
            {
                if (tblExchangeTable.Columns[i].ColumnName == "SourceItemID")
                {
                    for (int j = 0; j < tblExchangeTable.Rows.Count; j++)
                    {
                        DataRow dr = tblItem.Rows.Find(tblExchangeTable.Rows[j]["SourceItemID"].ToString());
                        if (tblExchangeTable.Rows[j]["Exchange_Des1"].ToString() != dr["Name"].ToString())
                        {
                            tblExchangeTable.Rows[j]["Exchange_Des1"] = dr["Name"];
                            Adpt_ExchangeTable.Update(new DataRow[] { tblExchangeTable.Rows[j] });
                            nCount++;
                        }
                    }
                }
            }


            MessageBox.Show("ExchangeTable 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;


            for (int i = 0; i < tblManufactureTable.Columns.Count; i++)
            {
                if (tblManufactureTable.Columns[i].ColumnName == "m_ManufactureType")
                {
                    for (int j = 0; j < tblManufactureTable.Rows.Count; j++)
                    {
                        if (tblManufactureTable.Rows[j]["m_ManufactureType"].ToString() != "0")
                        {
                            DataRow dr = tblMenufactureType.Rows.Find(tblManufactureTable.Rows[j]["m_ManufactureType"].ToString());                        
                            if (tblManufactureTable.Rows[j]["ManufactureType_"].ToString() != dr["Des"].ToString() ||
                                tblManufactureTable.Rows[j]["ManufactureType_C"].ToString() != dr["CODE"].ToString())
                            {
                                tblManufactureTable.Rows[j]["ManufactureType_"] = dr["Des"];
                                tblManufactureTable.Rows[j]["ManufactureType_C"] = dr["CODE"];
                                Adpt_ManufactureTable.Update(new DataRow[] { tblManufactureTable.Rows[j] });
                                nCount++;
                            }
                        }
                    }
                }

                if (tblManufactureTable.Columns[i].ColumnName == "Result Group ID")
                {
                    for (int j = 0; j < tblManufactureTable.Rows.Count; j++)
                    {
                        DataRow dr = tblItem.Rows.Find(tblManufactureTable.Rows[j]["Result Group ID"].ToString());
                        if(dr != null)
                        {
                            if (tblManufactureTable.Rows[j]["Result Name"].ToString() != dr["Name"].ToString())
                            {
                                tblManufactureTable.Rows[j]["Result Name"] = dr["Name"];
                                Adpt_ManufactureTable.Update(new DataRow[] { tblManufactureTable.Rows[j] });
                                nCount++;
                            }
                        }                        
                    }
                }

                if (tblManufactureTable.Columns[i].ColumnName == "Material ID")
                {
                    for (int j = 0; j < tblManufactureTable.Rows.Count; j++)
                    {
                        DataRow dr = tblItem.Rows.Find(tblManufactureTable.Rows[j]["Material ID"].ToString());
                        if (tblManufactureTable.Rows[j]["Material Name"].ToString() != dr["Name"].ToString())
                        {
                            tblManufactureTable.Rows[j]["Material Name"] = dr["Name"];
                            Adpt_ManufactureTable.Update(new DataRow[] { tblManufactureTable.Rows[j] });
                            nCount++;
                        }
                    }
                }
            }


            MessageBox.Show("ManufactureTable 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;

            for (int i = 0; i < tblManufactureResultGroup.Columns.Count; i++)
            {
                if (tblManufactureResultGroup.Columns[i].ColumnName == "Item ID")
                {
                    for (int j = 0; j < tblManufactureResultGroup.Rows.Count; j++)
                    {
                        DataRow dr = tblItem.Rows.Find(tblManufactureResultGroup.Rows[j]["Item ID"].ToString());
                        if (tblManufactureResultGroup.Rows[j]["Item Name"].ToString() != dr["Name"].ToString())
                        {
                            tblManufactureResultGroup.Rows[j]["Item Name"] = dr["Name"];
                            Adpt_ManufactureResultGroup.Update(new DataRow[] { tblManufactureResultGroup.Rows[j] });
                            nCount++;
                        }
                    }
                }
            }


            MessageBox.Show("ManufactureResultGroup 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;


            for (int i = 0; i < tblManufactureVillage.Columns.Count; i++)
            {
                if (tblManufactureVillage.Columns[i].ColumnName == "Manufacture ID")
                {
                    for (int j = 0; j < tblManufactureVillage.Rows.Count; j++)
                    {
                        DataRow dr = null;
                        for (int k = 0; k < tblManufactureTable.Rows.Count; k++)
                        {
                            if (tblManufactureTable.Rows[k]["Manufacture ID"].ToString() == tblManufactureVillage.Rows[j]["Manufacture ID"].ToString())
                            {
                                dr = tblManufactureTable.Rows[k];
                                break;
                            }
                        }
                        //DataRow dr = tblItem.Rows.Find(tblManufactureVillage.Rows[j]["Village ID"].ToString());
                        if (tblManufactureVillage.Rows[j]["Manufacture Name"].ToString() != dr["Manufacture Name"].ToString())                            
                        {
                            tblManufactureVillage.Rows[j]["Manufacture Name"] = dr["Manufacture Name"];
                            Adpt_ManufactureVillage.Update(new DataRow[] { tblManufactureVillage.Rows[j] });                       
                            nCount++;
                        }
                    }
                }

                if (tblManufactureVillage.Columns[i].ColumnName == "Village ID")
                {
                    for (int j = 0; j < tblManufactureVillage.Rows.Count; j++)
                    {
                        DataRow dr = tblVillageID.Rows.Find(tblManufactureVillage.Rows[j]["Village ID"].ToString());
                        if (dr != null)
                        {

                            if (tblManufactureVillage.Rows[j]["Village Name"].ToString() != dr["Des"].ToString() ||
                                tblManufactureVillage.Rows[j]["Village Enum"].ToString() != dr["CODE"].ToString())
                            {
                                tblManufactureVillage.Rows[j]["Village Name"] = dr["Des"];
                                tblManufactureVillage.Rows[j]["Village Enum"] = dr["CODE"];
                                Adpt_ManufactureVillage.Update(new DataRow[] { tblManufactureVillage.Rows[j] });
                                nCount++;
                            }
                        }
                    }
                }
            }


            MessageBox.Show("ManufactureVillage 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;

            for (int i = 0; i < tblAttribEnchantItem.Columns.Count; i++)
            {
                if (tblAttribEnchantItem.Columns[i].ColumnName == "ExtraDamageType")
                {
                    for (int j = 0; j < tblAttribEnchantItem.Rows.Count; j++)
                    {
                        DataRow dr = tblExtraDamageType.Rows.Find(tblAttribEnchantItem.Rows[j]["ExtraDamageType"].ToString());
                        if (tblAttribEnchantItem.Rows[j]["ExtraDamageType_"].ToString() != dr["Des"].ToString() ||
                            tblAttribEnchantItem.Rows[j]["ExtraDamageType_C"].ToString() != dr["CODE"].ToString())
                        {
                            tblAttribEnchantItem.Rows[j]["ExtraDamageType_"] = dr["Des"];
                            tblAttribEnchantItem.Rows[j]["ExtraDamageType_C"] = dr["CODE"];
                            Adpt_AttribEnchantItem.Update(new DataRow[] { tblAttribEnchantItem.Rows[j] });
                            nCount++;
                        }
                    }
                }

            }


            MessageBox.Show("AttribEnchantItem 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;

            for (int i = 0; i < tblAttribEnchantRequire.Columns.Count; i++)
            {
                if (tblAttribEnchantRequire.Columns[i].ColumnName == "Enchant Type")
                {
                    for (int j = 0; j < tblAttribEnchantRequire.Rows.Count; j++)
                    {
                        DataRow dr = tblAttribEnchantType.Rows.Find(tblAttribEnchantRequire.Rows[j]["Enchant Type"].ToString());
                        if (tblAttribEnchantRequire.Rows[j]["Enchant Type_"].ToString() != dr["CODE"].ToString())
                        {                            
                            tblAttribEnchantRequire.Rows[j]["Enchant Type_"] = dr["CODE"];
                            Adpt_AttribEnchantRequire.Update(new DataRow[] { tblAttribEnchantRequire.Rows[j] });
                            nCount++;
                        }
                    }
                }

            }


            MessageBox.Show("AttribEnchantRequire 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;



            for (int i = 0; i < tblNpcExtraAbility.Columns.Count; i++)
            {
                if (tblNpcExtraAbility.Columns[i].ColumnName == "NPC_ABILITY_ID")
                {
                    for (int j = 0; j < tblNpcExtraAbility.Rows.Count; j++)
                    {
                        DataRow dr = tblNPCAbility.Rows.Find(tblNpcExtraAbility.Rows[j]["NPC_ABILITY_ID"].ToString());
                        if (tblNpcExtraAbility.Rows[j]["NPC_ABILITY_ID_C"].ToString() != dr["Des"].ToString() ||
                            tblNpcExtraAbility.Rows[j]["NPC_ABILITY_ID_"].ToString() != dr["CODE"].ToString())
                        {
                            tblNpcExtraAbility.Rows[j]["NPC_ABILITY_ID_C"] = dr["CODE"];
                            tblNpcExtraAbility.Rows[j]["NPC_ABILITY_ID_"] = dr["CODE"];
                            Adpt_NpcExtraAbility.Update(new DataRow[] { tblNpcExtraAbility.Rows[j] });
                            nCount++;
                        }
                    }
                }

            }
            MessageBox.Show("NpcExtraAbility 틀린 개수는 " + nCount + "개의 잘못된 링크를 수정하였습니다.");
            nCount = 0;

        }

        private void dataGridView1_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if(dataGridView1.SelectedRows.Count > 0)
            {                
                toolTip1.SetToolTip(dataGridView1, dataGridView1.SelectedRows.Count.ToString() + "R");
            }
        }

        private void dataGridView2_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView2.SelectedRows.Count > 0)
            {                
                toolTip1.SetToolTip(dataGridView2, dataGridView2.SelectedRows.Count.ToString() + "R");                
            }
        }

        private void dataGridView3_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView3.SelectedRows.Count > 0)
            {
                toolTip1.SetToolTip(dataGridView3, dataGridView3.SelectedRows.Count.ToString() + "R");
            }
        }

        private void dataGridView4_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView4.SelectedRows.Count > 0)
            {
                toolTip1.SetToolTip(dataGridView4, dataGridView4.SelectedRows.Count.ToString() + "R");
            }
        }

        private void dataGridView5_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView5.SelectedRows.Count > 0)
            {
                toolTip1.SetToolTip(dataGridView5, dataGridView5.SelectedRows.Count.ToString() + "R");
            }
        }

        private void dataGridView6_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView6.SelectedRows.Count > 0)
            {
                toolTip1.SetToolTip(dataGridView6, dataGridView6.SelectedRows.Count.ToString() + "R");
            }
        }

        private void dataGridView7_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView7.SelectedRows.Count > 0)
            {
                toolTip1.SetToolTip(dataGridView7, dataGridView7.SelectedRows.Count.ToString() + "R");
            }
        }

        private void dataGridView8_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView8.SelectedRows.Count > 0)
            {
                toolTip1.SetToolTip(dataGridView8, dataGridView8.SelectedRows.Count.ToString() + "R");
            }
        }

        private void dataGridView9_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView9.SelectedRows.Count > 0)
            {
                toolTip1.SetToolTip(dataGridView9, dataGridView9.SelectedRows.Count.ToString() + "R");
            }
        }

        private void dataGridView10_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView10.SelectedRows.Count > 0)
            {
                toolTip1.SetToolTip(dataGridView10, dataGridView10.SelectedRows.Count.ToString() + "R");
            }
        }

        private void dataGridView11_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView11.SelectedRows.Count > 0)
            {
                toolTip1.SetToolTip(dataGridView11, dataGridView11.SelectedRows.Count.ToString() + "R");
            }
        }

        private void dataGridView12_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
         
            if (dataGridView12.SelectedRows.Count > 0)
            {                
                toolTip1.SetToolTip(dataGridView12, dataGridView12.SelectedRows.Count.ToString() + "R");
            }
        }

        private void dataGridView13_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView13.SelectedRows.Count > 0)
            {
                toolTip1.SetToolTip(dataGridView13, dataGridView13.SelectedRows.Count.ToString() + "R");                
            }
        }

        private void dataGridView14_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView14.SelectedRows.Count > 0)
            {
                toolTip1.SetToolTip(dataGridView14, dataGridView14.SelectedRows.Count.ToString() + "R");
            }
        }

        private void dataGridView15_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if (dataGridView15.SelectedRows.Count > 0)
            {
                toolTip1.SetToolTip(dataGridView15, dataGridView15.SelectedRows.Count.ToString() + "R");
            }
        }


        private void btnBorder_Click(object sender, EventArgs e)
        {
            int nRow = -1;
            switch(tabControl1.SelectedIndex)
            {
                case 0 :
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IDNum"].ToString() == dataGridView1["ID", dataGridView1.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "Item";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView1["ID", dataGridView1.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView1.Refresh();
                    }
                    break;
                case 1:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IDNum"].ToString() == dataGridView2["ID", dataGridView2.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "SpecialAbility";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView2["ID", dataGridView2.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView2.Refresh();
                    }
                    break;
                case 2 : 
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IDNum"].ToString() == dataGridView3["ID", dataGridView3.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "SocketItem";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView3["ID", dataGridView3.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView3.Refresh();

                    }
                    break;
                case 3:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IndexNum"].ToString() == dataGridView4["IndexKey", dataGridView4.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "SocketRandom";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IndexNum"] = dataGridView4["IndexKey", dataGridView4.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView4["SocketDataType", dataGridView4.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView4.Refresh();

                    }
                    break;
                case 4:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IndexNum"].ToString() == dataGridView5["IndexKey", dataGridView5.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "SocketGroup";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IndexNum"] = dataGridView5["IndexKey", dataGridView5.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView5["GroupID", dataGridView5.CurrentCell.RowIndex].Value;                            
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView5.Refresh();

                    }
                    break;
                case 5:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IndexNum"].ToString() == dataGridView6["IndexKey", dataGridView6.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "SetItem";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IndexNum"] = dataGridView6["IndexKey", dataGridView6.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView6["SetID", dataGridView6.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView6.Refresh();

                    }
                    break;
                case 6:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IDNum"].ToString() == dataGridView7["BoxID", dataGridView7.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "RandomBoxTable";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView7["BoxID", dataGridView7.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView7.Refresh();

                    }
                    break;
                case 7:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IndexNum"].ToString() == dataGridView8["IndexKey", dataGridView8.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "RandomItemGroup";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IndexNum"] = dataGridView8["IndexKey", dataGridView8.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView8["Group ID", dataGridView8.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView8.Refresh();

                    }
                    break;
                case 8:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IndexNum"].ToString() == dataGridView9["IndexKey", dataGridView9.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "ExchangeTable";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IndexNum"] = dataGridView9["IndexKey", dataGridView9.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView9["House_ID", dataGridView9.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView9.Refresh();

                    }
                    break;
                case 9:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IndexNum"].ToString() == dataGridView10["IndexKey", dataGridView10.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "ManufactureTable";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IndexNum"] = dataGridView10["IndexKey", dataGridView10.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView10["Manufacture ID", dataGridView10.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView10.Refresh();

                    }
                    break;
                case 10:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IndexNum"].ToString() == dataGridView11["IndexKey", dataGridView11.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "ManufactureResultGroup";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IndexNum"] = dataGridView11["IndexKey", dataGridView11.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView11["Group ID", dataGridView11.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView11.Refresh();

                    }
                    break;
                case 11:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IndexNum"].ToString() == dataGridView12["IndexKey", dataGridView12.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "ManufactureVillage";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IndexNum"] = dataGridView12["IndexKey", dataGridView12.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView12["Manufacture ID", dataGridView12.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView12.Refresh();
                    }
                    break;
                case 12:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IndexNum"].ToString() == dataGridView13["IndexKey", dataGridView13.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "AttribEnchantItem";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IndexNum"] = dataGridView13["IndexKey", dataGridView13.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView13["ExtraDamageType", dataGridView13.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView13.Refresh();
                    }
                    break;
                case 13:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IndexNum"].ToString() == dataGridView14["IndexKey", dataGridView14.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "AttribEnchantRequire";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IndexNum"] = dataGridView14["IndexKey", dataGridView14.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView14["Enchant Type", dataGridView14.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView14.Refresh();
                    }
                    break;
                case 14:
                    {
                        for (int i = 0; i < tblBorder.Rows.Count; i++)
                        {
                            if (tblBorder.Rows[i].RowState == DataRowState.Deleted)
                            {
                                continue;
                            }
                            if (tblBorder.Rows[i]["IDNum"].ToString() == dataGridView15["NPC_ABILITY_ID", dataGridView15.CurrentCell.RowIndex].Value.ToString())
                            {
                                nRow = i;
                                break;
                            }
                        }

                        if (nRow == -1)
                        {
                            tblBorder.Rows.Add();
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["TableName"] = "NpcExtraAbility";
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["IDNum"] = dataGridView15["NPC_ABILITY_ID", dataGridView15.CurrentCell.RowIndex].Value;
                            tblBorder.Rows[tblBorder.Rows.Count - 1]["Regdate"] = DateTime.Now;
                        }
                        else
                        {
                            tblBorder.Rows[nRow].Delete();
                        }

                        dataGridView15.Refresh();
                    }
                    break;
                
            }            
        }

        private void dataGridView1_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {

            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "Item")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView1.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView1["ID", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        nRow = dataGridView1["ID", nMid].RowIndex;
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }



                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void dataGridView2_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "SpecialAbility")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView2.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView2["ID", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        nRow = dataGridView2["ID", nMid].RowIndex;
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }

                

                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void dataGridView3_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "SocketItem")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView3.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView3["ID", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        nRow = dataGridView3["ID", nMid].RowIndex;
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }
                

                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void dataGridView4_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "SocketRandom")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView4.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView4["SocketDataType", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }

                for (int k = nLeft; k <= nRight; k++)
                {
                    if (Convert.ToInt32(dataGridView4["IndexKey", k].Value.ToString()) == Convert.ToInt32(drTemp["IndexNum"].ToString()))
                    {
                        nRow = dataGridView4["IndexKey", k].RowIndex;
                        break;
                    }
                }

                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void dataGridView5_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "SocketGroup")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView5.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView5["GroupID", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }

                for (int k = nLeft; k <= nRight; k++)
                {
                    if (Convert.ToInt32(dataGridView5["IndexKey", k].Value.ToString()) == Convert.ToInt32(drTemp["IndexNum"].ToString()))
                    {
                        nRow = dataGridView5["IndexKey", k].RowIndex;
                        break;
                    }
                }
                

                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void dataGridView6_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "SetItem")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView6.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView6["SetID", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }

                for (int k = nLeft; k <= nRight; k++)
                {
                    if (Convert.ToInt32(dataGridView6["IndexKey", k].Value.ToString()) == Convert.ToInt32(drTemp["IndexNum"].ToString()))
                    {
                        nRow = dataGridView6["IndexKey", k].RowIndex;
                        break;
                    }
                }

                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void dataGridView7_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "RandomBoxTable")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView7.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView7["BoxID", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        nRow = dataGridView7["BoxID", nMid].RowIndex;
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }
                               

                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void dataGridView8_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "RandomItemGroup")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView8.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView8["Group ID", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }

                for (int k = nLeft; k <= nRight; k++)
                {
                    if (Convert.ToInt32(dataGridView8["IndexKey", k].Value.ToString()) == Convert.ToInt32(drTemp["IndexNum"].ToString()))
                    {
                        nRow = dataGridView8["IndexKey", k].RowIndex;
                        break;
                    }
                }

                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void dataGridView9_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "ExchangeTable")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView9.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView9["House_ID", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }

                for (int k = nLeft; k <= nRight; k++)
                {
                    if (Convert.ToInt32(dataGridView9["IndexKey", k].Value.ToString()) == Convert.ToInt32(drTemp["IndexNum"].ToString()))
                    {
                        nRow = dataGridView9["IndexKey", k].RowIndex;
                        break;
                    }
                }

                
                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void dataGridView10_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            /*for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "ManufactureTable")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView10.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView10["Manufacture ID", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }

                for (int k = nLeft; k <= nRight; k++)
                {
                    if (Convert.ToInt32(dataGridView10["IndexKey", k].Value.ToString()) == Convert.ToInt32(drTemp["IndexNum"].ToString()))
                    {
                        nRow = dataGridView10["IndexKey", k].RowIndex;
                        break;
                    }
                }

                if(nRow == -1)
                {
                    for(int k = 0; k <= dataGridView10.RowCount; k++)
                    {
                        if (Convert.ToInt32(dataGridView10["IndexKey", k].Value.ToString()) == Convert.ToInt32(drTemp["IndexNum"].ToString()))
                        {
                            nRow = dataGridView10["IndexKey", k].RowIndex;
                            break;
                        }
                    }
                }
                
               
                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }*/
        }

        private void dataGridView11_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "ManufactureResultGroup")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];
                int nLeft = 0;
                int nRight = dataGridView11.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView11["Group ID", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }

                for (int k = nLeft; k <= nRight; k++)
                {
                    if (Convert.ToInt32(dataGridView11["IndexKey", k].Value.ToString()) == Convert.ToInt32(drTemp["IndexNum"].ToString()))
                    {
                        nRow = dataGridView11["IndexKey", k].RowIndex;
                        break;
                    }
                }

                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void dataGridView12_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            /*for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "ManufactureVillage")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView12.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView12["Manufacture ID", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }

                for (int k = nLeft; k <= nRight; k++)
                {
                    if (Convert.ToInt32(dataGridView12["IndexKey", k].Value.ToString()) == Convert.ToInt32(drTemp["IndexNum"].ToString()))
                    {
                        nRow = dataGridView12["IndexKey", k].RowIndex;
                        break;
                    }
                }

                if (nRow == -1)
                {
                    for (int k = 0; k <= dataGridView12.RowCount; k++)
                    {
                        if (Convert.ToInt32(dataGridView12["IndexKey", k].Value.ToString()) == Convert.ToInt32(drTemp["IndexNum"].ToString()))
                        {
                            nRow = dataGridView12["IndexKey", k].RowIndex;
                            break;
                        }
                    }
                }

                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }*/
        }

        private void dataGridView13_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "AttribEnchantItem")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView13.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView13["ExtraDamageType", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }

                for (int k = nLeft; k <= nRight; k++)
                {
                    if (Convert.ToInt32(dataGridView13["IndexKey", k].Value.ToString()) == Convert.ToInt32(drTemp["IndexNum"].ToString()))
                    {
                        nRow = dataGridView13["IndexKey", k].RowIndex;
                        break;
                    }
                }


                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void dataGridView14_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "AttribEnchantRequire")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView14.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView14["Enchant Type", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }

                for (int k = nLeft; k <= nRight; k++)
                {
                    if (Convert.ToInt32(dataGridView14["IndexKey", k].Value.ToString()) == Convert.ToInt32(drTemp["IndexNum"].ToString()))
                    {
                        nRow = dataGridView14["IndexKey", k].RowIndex;
                        break;
                    }
                }

                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void dataGridView15_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            for (int i = 0; i < tblBorder.Rows.Count; i++)
            {
                if (tblBorder.Rows[i].RowState == DataRowState.Deleted || tblBorder.Rows[i]["TableName"].ToString() != "NpcExtraAbility")
                {
                    continue;
                }
                int nRow = -1;

                DataRow drTemp = tblBorder.Rows[i];

                int nLeft = 0;
                int nRight = dataGridView15.RowCount - 1;
                while (nLeft <= nRight)
                {
                    int nMid = (nLeft + nRight) / 2;

                    int nDgv = Convert.ToInt32(dataGridView15["NPC_ABILITY_ID", nMid].Value.ToString());
                    int nColorID = Convert.ToInt32(drTemp["IDNum"].ToString());
                    if (nDgv == nColorID)
                    {
                        nRow = dataGridView15["NPC_ABILITY_ID", nMid].RowIndex;
                        break;
                    }
                    if (nDgv < nColorID)
                    {
                        nLeft = nMid + 1;
                    }
                    if (nDgv > nColorID)
                    {
                        nRight = nMid - 1;
                    }
                }

                if (e.RowIndex == nRow)
                {
                    e.AdvancedBorderStyle.Top = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
                }

            }
        }

        private void AssistBox_KeyDown(object sender, KeyEventArgs e)
        {            
            if(e.KeyCode == Keys.Escape || e.KeyCode == Keys.Enter)
            {                
                AssistBox.Hide();                
            }
        }

    }
}


        